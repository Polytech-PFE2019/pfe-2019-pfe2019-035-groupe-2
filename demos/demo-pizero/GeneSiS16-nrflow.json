{
	"dm": {
		"name": "demo",
		"components": [{
				"_type": "/infra/docker_host",
				"name": "RPiZero-101",
				"properties": [],
				"version": "0.0.1",
				"id": "ed4d87de-c3bc-4427-8c19-2a0f8c14d275",
				"provided_execution_port": [{
						"name": "offerDocker",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"ip": "192.168.43.101",
				"port": ["2376"],
				"credentials": {
					"username": "ubuntu",
					"password": "",
					"sshkey": ""
				},
				"monitoring_agent": "none"
			}, {
				"_type": "/internal/node_red",
				"name": "NodeRED-101",
				"properties": [],
				"version": "0.0.1",
				"id": "6f8be2c9-ac9e-413b-ac65-4effa47133d4",
				"provided_execution_port": [{
						"name": "offerNodeRED",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "DockerRaspberryPiZeroGroveBaseHat",
					"image": "node-docker-raspberry-zero:armv6",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880",
						"1883": "1883"
					},
					"mounts": {
						"src": "/sys",
						"tgt": "/sys"
					},
					"devices": [{
							"PathOnHost": "/dev/mem",
							"PathInContainer": "/dev/mem",
							"CgroupPermissions": "rwm"
						}, {
							"PathOnHost": "/dev/gpiomem",
							"PathInContainer": "/dev/gpiomem",
							"CgroupPermissions": "rwm"
						}, {
							"PathOnHost": "/dev/i2c-1",
							"PathInContainer": "/dev/i2c-1",
							"CgroupPermissions": "rwm"
						}
					]
				},
				"ssh_resource": {
					"name": "2e58b6c3-e664-4886-a082-2ec3df98a140",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"ansible_resource": {
					"name": "fc49cfb0-1fb9-4e8d-b03b-6a542a5b933b",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"required_execution_port": {
					"name": "demandDocker",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "fb98f145-bb2f-4c1d-8918-19b57a2d4301",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880"
					}
				],
				"required_communication_port": [{
						"name": "5d9edc3d-7106-4abe-9630-2aac464c90df",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80",
						"isMandatory": false
					}
				],
				"nr_flow": [],
				"path_flow": "",
				"packages": []
			}, {
				"_type": "/internal/node_red_flow",
				"name": "NodeRED-flow-101",
				"properties": [],
				"version": "0.0.1",
				"id": "0acedfd2-e248-44aa-8202-422b93a253c2",
				"provided_execution_port": [{
						"name": "06c4124a-f670-45b1-a7af-c80f93836d11",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "ab8fe39f-bf52-49e5-a006-3345a993c080",
					"image": "",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880"
					},
					"devices": {
						"PathOnHost": "",
						"PathInContainer": "",
						"CgroupPermissions": "rwm"
					}
				},
				"ssh_resource": {
					"name": "a0d75050-13d2-435c-bbf6-8c0029560ea2",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"stopCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"ansible_resource": {
					"name": "106abda0-bed3-42b6-a265-55438dbe6392",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"required_execution_port": {
					"name": "demandNodeRED",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "e46b496f-eb18-423f-827b-93077295df2a",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80"
					}
				],
				"required_communication_port": [{
						"name": "484f2ca8-f048-460a-8caf-230101f68ec6",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880",
						"isMandatory": false
					}
				],
				"nr_flow": [{
						"id": "eac2018f.030101",
						"type": "rpi-gpio out",
						"z": "eac2018f.010101",
						"name": "D 16",
						"pin": "36",
						"set": true,
						"level": "0",
						"freq": "",
						"out": "out",
						"x": 610,
						"y": 140,
						"wires": []
					}, {
						"id": "eac2018f.040101",
						"type": "rpi-gpio in",
						"z": "eac2018f.010101",
						"name": "D 17",
						"pin": "11",
						"intype": "tri",
						"debounce": "25",
						"read": true,
						"x": 90,
						"y": 80,
						"wires": [["eac2018f.180101"]]
					}, {
						"id": "eac2018f.050101",
						"type": "grove-chainable-rgb-led",
						"z": "eac2018f.010101",
						"name": "",
						"pin": "5",
						"x": 560,
						"y": 200,
						"wires": []
					}, {
						"id": "eac2018f.070101",
						"type": "mqtt in",
						"z": "eac2018f.010101",
						"name": "",
						"topic": "/grove/button_led",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020101",
						"x": 130,
						"y": 140,
						"wires": [["eac2018f.150101"]]
					}, {
						"id": "eac2018f.080101",
						"type": "mqtt in",
						"z": "eac2018f.010101",
						"name": "",
						"topic": "/grove/rgb_led",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020101",
						"x": 120,
						"y": 200,
						"wires": [["eac2018f.170101"]]
					}, {
						"id": "eac2018f.060101",
						"type": "mqtt out",
						"z": "eac2018f.010101",
						"name": "",
						"topic": "/grove/button",
						"qos": "",
						"retain": "",
						"broker": "eac2018f.020101",
						"x": 580,
						"y": 80,
						"wires": []
					}, {
						"id": "eac2018f.090101",
						"type": "mosca in",
						"z": "eac2018f.010101",
						"mqtt_port": 1883,
						"mqtt_ws_port": 8080,
						"name": "",
						"username": "",
						"password": "",
						"dburl": "",
						"x": 110,
						"y": 40,
						"wires": [[]]
					}, {
						"id": "eac2018f.100101",
						"type": "grove-4-digit-display",
						"z": "eac2018f.010101",
						"name": "",
						"pin": "22",
						"x": 580,
						"y": 260,
						"wires": []
					}, {
						"id": "eac2018f.110101",
						"type": "mqtt in",
						"z": "eac2018f.010101",
						"name": "",
						"topic": "/grove/4digit_display",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020101",
						"x": 130,
						"y": 260,
						"wires": [["eac2018f.160101"]]
					}, {
						"id": "eac2018f.120101",
						"type": "inject",
						"z": "eac2018f.010101",
						"name": "Startup Inject",
						"topic": "",
						"payload": "0",
						"payloadType": "num",
						"repeat": "",
						"crontab": "",
						"once": true,
						"onceDelay": "1",
						"x": 120,
						"y": 420,
						"wires": [["eac2018f.130101", "eac2018f.200101", "eac2018f.220101", "eac2018f.230101"]]
					}, {
						"id": "eac2018f.130101",
						"type": "trigger",
						"z": "eac2018f.010101",
						"op1": " 101",
						"op2": "    ",
						"op1type": "str",
						"op2type": "str",
						"duration": "5",
						"extend": false,
						"units": "s",
						"reset": "",
						"bytopic": "all",
						"name": "",
						"x": 320,
						"y": 500,
						"wires": [["eac2018f.140101"]]
					}, {
						"id": "eac2018f.140101",
						"type": "grove-4-digit-display",
						"z": "eac2018f.010101",
						"name": "",
						"pin": "22",
						"x": 500,
						"y": 500,
						"wires": []
					}, {
						"id": "eac2018f.150101",
						"type": "function",
						"z": "eac2018f.010101",
						"name": "Store ButtonLed state",
						"func": "flow.set('ButtonLed', msg.payload);\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 340,
						"y": 140,
						"wires": [["eac2018f.030101"]]
					}, {
						"id": "eac2018f.160101",
						"type": "function",
						"z": "eac2018f.010101",
						"name": "Store Display state",
						"func": "try {\n    val = Number(msg.payload);\n} catch (error) {\n    val = msg.payload;\n}\n\nif (Number.isInteger(val)) {\n    if (val > 9999) {\n        val = 0\n    }\n    if (val === 0) {\n        strval = \"    \";\n    } else if (val < 10) {\n        strval = \"   \" + val;\n    } else if (val < 100) {\n        strval = \"  \" + val;\n    } else if (val < 1000) {\n        strval = \" \" + val;\n    } else {\n        strval = val;\n    }\n    flow.set('Display', val);\n    msg.payload = strval;\n}\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 330,
						"y": 260,
						"wires": [["eac2018f.100101"]]
					}, {
						"id": "eac2018f.170101",
						"type": "function",
						"z": "eac2018f.010101",
						"name": "Store RGBLED state",
						"func": "if (msg.payload === \"\") return null;\non = -1;\ntry {\n    msg.payload = JSON.parse(msg.payload)\n    on = Number(msg.payload.on)\n    val = Number(msg.payload.val);\n    flow.set('RGBLed', {'on': on, 'val': val});\n} catch (error) {\n    val = msg.payload;\n}\n\nif (on === 0) {\n    msg.payload = \"rgb(0, 0, 0)\";\n} else if (on === 1) {\n    if (val === -1) {\n        msg.payload = \"rgb(255, 255, 255)\";\n    } else if (Number.isInteger(val)) {\n        val = val % 360;\n        msg.payload = \"hsv(\" + val + \",100%, 50%)\";\n    } else {\n        return null;\n    }\n}\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 340,
						"y": 200,
						"wires": [["eac2018f.050101"]]
					}, {
						"id": "eac2018f.180101",
						"type": "function",
						"z": "eac2018f.010101",
						"name": "Emit Sensors/Actuators states",
						"func": "buttonLed = flow.get('ButtonLed') || 0;\nrgbLed = flow.get('RGBLed') || {'on': 0, 'val': -1};\ndisplay = flow.get('Display') || 0;\nbutton = msg.payload;\n\nmsg.payload = {\n        \"button\": button,\n        \"buttonLed\": buttonLed,\n        \"rgbLed\": rgbLed,\n        \"display\": display\n}\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 330,
						"y": 80,
						"wires": [["eac2018f.060101"]]
					}, {
						"id": "eac2018f.190101",
						"type": "comment",
						"z": "eac2018f.010101",
						"name": "Init Phase",
						"info": "",
						"x": 80,
						"y": 360,
						"wires": []
					}, {
						"id": "eac2018f.200101",
						"type": "function",
						"z": "eac2018f.010101",
						"name": "Reset flow variables",
						"func": "flow.set('ButtonLed', 0);\nflow.set(\"RGBLed\", {'on': 0, 'val': -1});\nflow.set(\"Display\", 0);\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 360,
						"y": 380,
						"wires": [[]]
					}, {
						"id": "eac2018f.210101",
						"type": "grove-chainable-rgb-led",
						"z": "eac2018f.010101",
						"name": "",
						"pin": "5",
						"x": 520,
						"y": 460,
						"wires": []
					}, {
						"id": "eac2018f.220101",
						"type": "rpi-gpio out",
						"z": "eac2018f.010101",
						"name": "D 16",
						"pin": "36",
						"set": true,
						"level": "0",
						"freq": "",
						"out": "out",
						"x": 470,
						"y": 420,
						"wires": []
					}, {
						"id": "eac2018f.230101",
						"type": "function",
						"z": "eac2018f.010101",
						"name": "Switch off",
						"func": "msg.payload = \"rgb(0,0,0)\"\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 320,
						"y": 460,
						"wires": [["eac2018f.210101"]]
					}, {
						"id": "eac2018f.020101",
						"type": "mqtt-broker",
						"z": "eac2018f.010101",
						"name": "",
						"broker": "localhost",
						"port": "1883",
						"clientid": "",
						"usetls": false,
						"compatmode": true,
						"keepalive": "60",
						"cleansession": true,
						"birthTopic": "",
						"birthQos": "0",
						"birthPayload": "",
						"closeTopic": "",
						"closeQos": "0",
						"closePayload": "",
						"willTopic": "",
						"willQos": "0",
						"willPayload": ""
					}
				],
				"path_flow": "",
				"packages": []
			}, {
				"_type": "/infra/docker_host",
				"name": "RPiZero-102",
				"properties": [],
				"version": "0.0.1",
				"id": "ae22d5db-6588-41eb-a292-669a71832c91",
				"provided_execution_port": [{
						"name": "offerDocker",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"ip": "192.168.43.102",
				"port": ["2376"],
				"credentials": {
					"username": "ubuntu",
					"password": "",
					"sshkey": ""
				},
				"monitoring_agent": "none"
			}, {
				"_type": "/internal/node_red",
				"name": "NodeRED-102",
				"properties": [],
				"version": "0.0.1",
				"id": "59209a13-9c69-4adc-b8b6-9a5c9c9ab396",
				"provided_execution_port": [{
						"name": "offerNodeRED",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "DockerRaspberryPiZeroGroveBaseHat",
					"image": "node-docker-raspberry-zero:armv6",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880",
						"1883": "1883"
					},
					"mounts": {
						"src": "/sys",
						"tgt": "/sys"
					},
					"devices": [{
							"PathOnHost": "/dev/mem",
							"PathInContainer": "/dev/mem",
							"CgroupPermissions": "rwm"
						}, {
							"PathOnHost": "/dev/gpiomem",
							"PathInContainer": "/dev/gpiomem",
							"CgroupPermissions": "rwm"
						}, {
							"PathOnHost": "/dev/i2c-1",
							"PathInContainer": "/dev/i2c-1",
							"CgroupPermissions": "rwm"
						}
					]
				},
				"ssh_resource": {
					"name": "60be87f8-5c30-4e8a-b90f-9cebb839204a",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"ansible_resource": {
					"name": "61bceb0b-20f0-4e75-96c0-2a70d43f9227",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"required_execution_port": {
					"name": "demandDocker",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "851dc5ce-8167-4904-85c5-adeb296b776c",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880"
					}
				],
				"required_communication_port": [{
						"name": "2f2619ab-4f97-4ba7-bdc5-84a12e84cd8f",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80",
						"isMandatory": false
					}
				],
				"nr_flow": [],
				"path_flow": "",
				"packages": []
			}, {
				"_type": "/internal/node_red_flow",
				"name": "NodeRED-flow-102",
				"properties": [],
				"version": "0.0.1",
				"id": "c6acab4c-ab5b-4e89-962d-8712aa59b46a",
				"provided_execution_port": [{
						"name": "123f2e6a-42ba-4dae-af10-3f655b9ce7c3",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "6fe45f4b-a0b5-4d25-a37a-96ec4e137aac",
					"image": "",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880"
					},
					"devices": {
						"PathOnHost": "",
						"PathInContainer": "",
						"CgroupPermissions": "rwm"
					}
				},
				"ssh_resource": {
					"name": "50207f52-277d-4337-9cea-e560c9335b6d",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"stopCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"ansible_resource": {
					"name": "1d0bcb21-9e30-4428-ad88-724584ed1262",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"required_execution_port": {
					"name": "demandNodeRED",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "f5de8764-3025-439e-9ba1-f87aed0237fd",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80"
					}
				],
				"required_communication_port": [{
						"name": "05ac9649-82f4-4685-bf0d-699e672b152a",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880",
						"isMandatory": false
					}
				],
				"nr_flow": [{
						"id": "eac2018f.030102",
						"type": "rpi-gpio out",
						"z": "eac2018f.010102",
						"name": "D 16",
						"pin": "36",
						"set": true,
						"level": "0",
						"freq": "",
						"out": "out",
						"x": 610,
						"y": 140,
						"wires": []
					}, {
						"id": "eac2018f.040102",
						"type": "rpi-gpio in",
						"z": "eac2018f.010102",
						"name": "D 17",
						"pin": "11",
						"intype": "tri",
						"debounce": "25",
						"read": true,
						"x": 90,
						"y": 80,
						"wires": [["eac2018f.180102"]]
					}, {
						"id": "eac2018f.050102",
						"type": "grove-chainable-rgb-led",
						"z": "eac2018f.010102",
						"name": "",
						"pin": "5",
						"x": 560,
						"y": 200,
						"wires": []
					}, {
						"id": "eac2018f.070102",
						"type": "mqtt in",
						"z": "eac2018f.010102",
						"name": "",
						"topic": "/grove/button_led",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020102",
						"x": 130,
						"y": 140,
						"wires": [["eac2018f.150102"]]
					}, {
						"id": "eac2018f.080102",
						"type": "mqtt in",
						"z": "eac2018f.010102",
						"name": "",
						"topic": "/grove/rgb_led",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020102",
						"x": 120,
						"y": 200,
						"wires": [["eac2018f.170102"]]
					}, {
						"id": "eac2018f.060102",
						"type": "mqtt out",
						"z": "eac2018f.010102",
						"name": "",
						"topic": "/grove/button",
						"qos": "",
						"retain": "",
						"broker": "eac2018f.020102",
						"x": 580,
						"y": 80,
						"wires": []
					}, {
						"id": "eac2018f.090102",
						"type": "mosca in",
						"z": "eac2018f.010102",
						"mqtt_port": 1883,
						"mqtt_ws_port": 8080,
						"name": "",
						"username": "",
						"password": "",
						"dburl": "",
						"x": 110,
						"y": 40,
						"wires": [[]]
					}, {
						"id": "eac2018f.100102",
						"type": "grove-4-digit-display",
						"z": "eac2018f.010102",
						"name": "",
						"pin": "22",
						"x": 580,
						"y": 260,
						"wires": []
					}, {
						"id": "eac2018f.110102",
						"type": "mqtt in",
						"z": "eac2018f.010102",
						"name": "",
						"topic": "/grove/4digit_display",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020102",
						"x": 130,
						"y": 260,
						"wires": [["eac2018f.160102"]]
					}, {
						"id": "eac2018f.120102",
						"type": "inject",
						"z": "eac2018f.010102",
						"name": "Startup Inject",
						"topic": "",
						"payload": "0",
						"payloadType": "num",
						"repeat": "",
						"crontab": "",
						"once": true,
						"onceDelay": "1",
						"x": 120,
						"y": 420,
						"wires": [["eac2018f.130102", "eac2018f.200102", "eac2018f.220102", "eac2018f.230102"]]
					}, {
						"id": "eac2018f.130102",
						"type": "trigger",
						"z": "eac2018f.010102",
						"op1": " 102",
						"op2": "    ",
						"op1type": "str",
						"op2type": "str",
						"duration": "5",
						"extend": false,
						"units": "s",
						"reset": "",
						"bytopic": "all",
						"name": "",
						"x": 320,
						"y": 500,
						"wires": [["eac2018f.140102"]]
					}, {
						"id": "eac2018f.140102",
						"type": "grove-4-digit-display",
						"z": "eac2018f.010102",
						"name": "",
						"pin": "22",
						"x": 500,
						"y": 500,
						"wires": []
					}, {
						"id": "eac2018f.150102",
						"type": "function",
						"z": "eac2018f.010102",
						"name": "Store ButtonLed state",
						"func": "flow.set('ButtonLed', msg.payload);\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 340,
						"y": 140,
						"wires": [["eac2018f.030102"]]
					}, {
						"id": "eac2018f.160102",
						"type": "function",
						"z": "eac2018f.010102",
						"name": "Store Display state",
						"func": "try {\n    val = Number(msg.payload);\n} catch (error) {\n    val = msg.payload;\n}\n\nif (Number.isInteger(val)) {\n    if (val > 9999) {\n        val = 0\n    }\n    if (val === 0) {\n        strval = \"    \";\n    } else if (val < 10) {\n        strval = \"   \" + val;\n    } else if (val < 100) {\n        strval = \"  \" + val;\n    } else if (val < 1000) {\n        strval = \" \" + val;\n    } else {\n        strval = val;\n    }\n    flow.set('Display', val);\n    msg.payload = strval;\n}\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 330,
						"y": 260,
						"wires": [["eac2018f.100102"]]
					}, {
						"id": "eac2018f.170102",
						"type": "function",
						"z": "eac2018f.010102",
						"name": "Store RGBLED state",
						"func": "if (msg.payload === \"\") return null;\non = -1;\ntry {\n    msg.payload = JSON.parse(msg.payload)\n    on = Number(msg.payload.on)\n    val = Number(msg.payload.val);\n    flow.set('RGBLed', {'on': on, 'val': val});\n} catch (error) {\n    val = msg.payload;\n}\n\nif (on === 0) {\n    msg.payload = \"rgb(0, 0, 0)\";\n} else if (on === 1) {\n    if (val === -1) {\n        msg.payload = \"rgb(255, 255, 255)\";\n    } else if (Number.isInteger(val)) {\n        val = val % 360;\n        msg.payload = \"hsv(\" + val + \",100%, 50%)\";\n    } else {\n        return null;\n    }\n}\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 340,
						"y": 200,
						"wires": [["eac2018f.050102"]]
					}, {
						"id": "eac2018f.180102",
						"type": "function",
						"z": "eac2018f.010102",
						"name": "Emit Sensors/Actuators states",
						"func": "buttonLed = flow.get('ButtonLed') || 0;\nrgbLed = flow.get('RGBLed') || {'on': 0, 'val': -1};\ndisplay = flow.get('Display') || 0;\nbutton = msg.payload;\n\nmsg.payload = {\n        \"button\": button,\n        \"buttonLed\": buttonLed,\n        \"rgbLed\": rgbLed,\n        \"display\": display\n}\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 330,
						"y": 80,
						"wires": [["eac2018f.060102"]]
					}, {
						"id": "eac2018f.190102",
						"type": "comment",
						"z": "eac2018f.010102",
						"name": "Init Phase",
						"info": "",
						"x": 80,
						"y": 360,
						"wires": []
					}, {
						"id": "eac2018f.200102",
						"type": "function",
						"z": "eac2018f.010102",
						"name": "Reset flow variables",
						"func": "flow.set('ButtonLed', 0);\nflow.set(\"RGBLed\", {'on': 0, 'val': -1});\nflow.set(\"Display\", 0);\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 360,
						"y": 380,
						"wires": [[]]
					}, {
						"id": "eac2018f.210102",
						"type": "grove-chainable-rgb-led",
						"z": "eac2018f.010102",
						"name": "",
						"pin": "5",
						"x": 520,
						"y": 460,
						"wires": []
					}, {
						"id": "eac2018f.220102",
						"type": "rpi-gpio out",
						"z": "eac2018f.010102",
						"name": "D 16",
						"pin": "36",
						"set": true,
						"level": "0",
						"freq": "",
						"out": "out",
						"x": 470,
						"y": 420,
						"wires": []
					}, {
						"id": "eac2018f.230102",
						"type": "function",
						"z": "eac2018f.010102",
						"name": "Switch off",
						"func": "msg.payload = \"rgb(0,0,0)\"\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 320,
						"y": 460,
						"wires": [["eac2018f.210102"]]
					}, {
						"id": "eac2018f.020102",
						"type": "mqtt-broker",
						"z": "eac2018f.010101",
						"name": "",
						"broker": "localhost",
						"port": "1883",
						"clientid": "",
						"usetls": false,
						"compatmode": true,
						"keepalive": "60",
						"cleansession": true,
						"birthTopic": "",
						"birthQos": "0",
						"birthPayload": "",
						"closeTopic": "",
						"closeQos": "0",
						"closePayload": "",
						"willTopic": "",
						"willQos": "0",
						"willPayload": ""
					}
				],
				"path_flow": "",
				"packages": []
			}, {
				"_type": "/infra/docker_host",
				"name": "RPiZero-103",
				"properties": [],
				"version": "0.0.1",
				"id": "58f54946-00df-463e-a6ca-c33eee9bf618",
				"provided_execution_port": [{
						"name": "offerDocker",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"ip": "192.168.43.103",
				"port": ["2376"],
				"credentials": {
					"username": "ubuntu",
					"password": "",
					"sshkey": ""
				},
				"monitoring_agent": "none"
			}, {
				"_type": "/internal/node_red",
				"name": "NodeRED-103",
				"properties": [],
				"version": "0.0.1",
				"id": "7270d2ec-1050-46f0-96c6-a56269633d4c",
				"provided_execution_port": [{
						"name": "offerNodeRED",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "DockerRaspberryPiZeroGroveBaseHat",
					"image": "node-docker-raspberry-zero:armv6",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880",
						"1883": "1883"
					},
					"mounts": {
						"src": "/sys",
						"tgt": "/sys"
					},
					"devices": [{
							"PathOnHost": "/dev/mem",
							"PathInContainer": "/dev/mem",
							"CgroupPermissions": "rwm"
						}, {
							"PathOnHost": "/dev/gpiomem",
							"PathInContainer": "/dev/gpiomem",
							"CgroupPermissions": "rwm"
						}, {
							"PathOnHost": "/dev/i2c-1",
							"PathInContainer": "/dev/i2c-1",
							"CgroupPermissions": "rwm"
						}
					]
				},
				"ssh_resource": {
					"name": "4cea0be7-ba14-42ae-920e-b05a38e1c28f",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"ansible_resource": {
					"name": "ba3ee736-a927-429b-b3e0-bdbbaa07540a",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"required_execution_port": {
					"name": "demandDocker",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "261228b6-649b-4839-8c61-9fa712fc07af",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880"
					}
				],
				"required_communication_port": [{
						"name": "62609c40-0856-4948-85f8-df1a85cd7e7c",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80",
						"isMandatory": false
					}
				],
				"nr_flow": [],
				"path_flow": "",
				"packages": []
			}, {
				"_type": "/internal/node_red_flow",
				"name": "NodeRED-flow-103",
				"properties": [],
				"version": "0.0.1",
				"id": "2a8d92b7-3952-4f50-af11-9aac58c78386",
				"provided_execution_port": [{
						"name": "bb82b06d-d66e-434d-a98c-e22a51f7ea5c",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "c2ae7b7b-cca5-4784-b49f-1495575728d6",
					"image": "",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880"
					},
					"devices": {
						"PathOnHost": "",
						"PathInContainer": "",
						"CgroupPermissions": "rwm"
					}
				},
				"ssh_resource": {
					"name": "82ca85a6-f265-4f70-a36b-b069b0fd7f84",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"stopCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"ansible_resource": {
					"name": "826dbf05-ca60-4946-a024-a1f84616ea07",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"required_execution_port": {
					"name": "demandNodeRED",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "622bb64d-0cf5-4cba-927a-09effc24905f",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80"
					}
				],
				"required_communication_port": [{
						"name": "af3cde50-3f48-4321-a638-07366e5c7c35",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880",
						"isMandatory": false
					}
				],
				"nr_flow": [{
						"id": "eac2018f.030103",
						"type": "rpi-gpio out",
						"z": "eac2018f.010103",
						"name": "D 16",
						"pin": "36",
						"set": true,
						"level": "0",
						"freq": "",
						"out": "out",
						"x": 610,
						"y": 140,
						"wires": []
					}, {
						"id": "eac2018f.040103",
						"type": "rpi-gpio in",
						"z": "eac2018f.010103",
						"name": "D 17",
						"pin": "11",
						"intype": "tri",
						"debounce": "25",
						"read": true,
						"x": 90,
						"y": 80,
						"wires": [["eac2018f.180103"]]
					}, {
						"id": "eac2018f.050103",
						"type": "grove-chainable-rgb-led",
						"z": "eac2018f.010103",
						"name": "",
						"pin": "5",
						"x": 560,
						"y": 200,
						"wires": []
					}, {
						"id": "eac2018f.070103",
						"type": "mqtt in",
						"z": "eac2018f.010103",
						"name": "",
						"topic": "/grove/button_led",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020103",
						"x": 130,
						"y": 140,
						"wires": [["eac2018f.150103"]]
					}, {
						"id": "eac2018f.080103",
						"type": "mqtt in",
						"z": "eac2018f.010103",
						"name": "",
						"topic": "/grove/rgb_led",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020103",
						"x": 120,
						"y": 200,
						"wires": [["eac2018f.170103"]]
					}, {
						"id": "eac2018f.060103",
						"type": "mqtt out",
						"z": "eac2018f.010103",
						"name": "",
						"topic": "/grove/button",
						"qos": "",
						"retain": "",
						"broker": "eac2018f.020103",
						"x": 580,
						"y": 80,
						"wires": []
					}, {
						"id": "eac2018f.090103",
						"type": "mosca in",
						"z": "eac2018f.010103",
						"mqtt_port": 1883,
						"mqtt_ws_port": 8080,
						"name": "",
						"username": "",
						"password": "",
						"dburl": "",
						"x": 110,
						"y": 40,
						"wires": [[]]
					}, {
						"id": "eac2018f.100103",
						"type": "grove-4-digit-display",
						"z": "eac2018f.010103",
						"name": "",
						"pin": "22",
						"x": 580,
						"y": 260,
						"wires": []
					}, {
						"id": "eac2018f.110103",
						"type": "mqtt in",
						"z": "eac2018f.010103",
						"name": "",
						"topic": "/grove/4digit_display",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020103",
						"x": 130,
						"y": 260,
						"wires": [["eac2018f.160103"]]
					}, {
						"id": "eac2018f.120103",
						"type": "inject",
						"z": "eac2018f.010103",
						"name": "Startup Inject",
						"topic": "",
						"payload": "0",
						"payloadType": "num",
						"repeat": "",
						"crontab": "",
						"once": true,
						"onceDelay": "1",
						"x": 120,
						"y": 420,
						"wires": [["eac2018f.130103", "eac2018f.200103", "eac2018f.220103", "eac2018f.230103"]]
					}, {
						"id": "eac2018f.130103",
						"type": "trigger",
						"z": "eac2018f.010103",
						"op1": " 103",
						"op2": "    ",
						"op1type": "str",
						"op2type": "str",
						"duration": "5",
						"extend": false,
						"units": "s",
						"reset": "",
						"bytopic": "all",
						"name": "",
						"x": 320,
						"y": 500,
						"wires": [["eac2018f.140103"]]
					}, {
						"id": "eac2018f.140103",
						"type": "grove-4-digit-display",
						"z": "eac2018f.010103",
						"name": "",
						"pin": "22",
						"x": 500,
						"y": 500,
						"wires": []
					}, {
						"id": "eac2018f.150103",
						"type": "function",
						"z": "eac2018f.010103",
						"name": "Store ButtonLed state",
						"func": "flow.set('ButtonLed', msg.payload);\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 340,
						"y": 140,
						"wires": [["eac2018f.030103"]]
					}, {
						"id": "eac2018f.160103",
						"type": "function",
						"z": "eac2018f.010103",
						"name": "Store Display state",
						"func": "try {\n    val = Number(msg.payload);\n} catch (error) {\n    val = msg.payload;\n}\n\nif (Number.isInteger(val)) {\n    if (val > 9999) {\n        val = 0\n    }\n    if (val === 0) {\n        strval = \"    \";\n    } else if (val < 10) {\n        strval = \"   \" + val;\n    } else if (val < 100) {\n        strval = \"  \" + val;\n    } else if (val < 1000) {\n        strval = \" \" + val;\n    } else {\n        strval = val;\n    }\n    flow.set('Display', val);\n    msg.payload = strval;\n}\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 330,
						"y": 260,
						"wires": [["eac2018f.100103"]]
					}, {
						"id": "eac2018f.170103",
						"type": "function",
						"z": "eac2018f.010103",
						"name": "Store RGBLED state",
						"func": "if (msg.payload === \"\") return null;\non = -1;\ntry {\n    msg.payload = JSON.parse(msg.payload)\n    on = Number(msg.payload.on)\n    val = Number(msg.payload.val);\n    flow.set('RGBLed', {'on': on, 'val': val});\n} catch (error) {\n    val = msg.payload;\n}\n\nif (on === 0) {\n    msg.payload = \"rgb(0, 0, 0)\";\n} else if (on === 1) {\n    if (val === -1) {\n        msg.payload = \"rgb(255, 255, 255)\";\n    } else if (Number.isInteger(val)) {\n        val = val % 360;\n        msg.payload = \"hsv(\" + val + \",100%, 50%)\";\n    } else {\n        return null;\n    }\n}\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 340,
						"y": 200,
						"wires": [["eac2018f.050103"]]
					}, {
						"id": "eac2018f.180103",
						"type": "function",
						"z": "eac2018f.010103",
						"name": "Emit Sensors/Actuators states",
						"func": "buttonLed = flow.get('ButtonLed') || 0;\nrgbLed = flow.get('RGBLed') || {'on': 0, 'val': -1};\ndisplay = flow.get('Display') || 0;\nbutton = msg.payload;\n\nmsg.payload = {\n        \"button\": button,\n        \"buttonLed\": buttonLed,\n        \"rgbLed\": rgbLed,\n        \"display\": display\n}\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 330,
						"y": 80,
						"wires": [["eac2018f.060103"]]
					}, {
						"id": "eac2018f.190103",
						"type": "comment",
						"z": "eac2018f.010103",
						"name": "Init Phase",
						"info": "",
						"x": 80,
						"y": 360,
						"wires": []
					}, {
						"id": "eac2018f.200103",
						"type": "function",
						"z": "eac2018f.010103",
						"name": "Reset flow variables",
						"func": "flow.set('ButtonLed', 0);\nflow.set(\"RGBLed\", {'on': 0, 'val': -1});\nflow.set(\"Display\", 0);\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 360,
						"y": 380,
						"wires": [[]]
					}, {
						"id": "eac2018f.210103",
						"type": "grove-chainable-rgb-led",
						"z": "eac2018f.010103",
						"name": "",
						"pin": "5",
						"x": 520,
						"y": 460,
						"wires": []
					}, {
						"id": "eac2018f.220103",
						"type": "rpi-gpio out",
						"z": "eac2018f.010103",
						"name": "D 16",
						"pin": "36",
						"set": true,
						"level": "0",
						"freq": "",
						"out": "out",
						"x": 470,
						"y": 420,
						"wires": []
					}, {
						"id": "eac2018f.230103",
						"type": "function",
						"z": "eac2018f.010103",
						"name": "Switch off",
						"func": "msg.payload = \"rgb(0,0,0)\"\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 320,
						"y": 460,
						"wires": [["eac2018f.210103"]]
					}, {
						"id": "eac2018f.020103",
						"type": "mqtt-broker",
						"z": "eac2018f.010101",
						"name": "",
						"broker": "localhost",
						"port": "1883",
						"clientid": "",
						"usetls": false,
						"compatmode": true,
						"keepalive": "60",
						"cleansession": true,
						"birthTopic": "",
						"birthQos": "0",
						"birthPayload": "",
						"closeTopic": "",
						"closeQos": "0",
						"closePayload": "",
						"willTopic": "",
						"willQos": "0",
						"willPayload": ""
					}
				],
				"path_flow": "",
				"packages": []
			}, {
				"_type": "/infra/docker_host",
				"name": "RPiZero-104",
				"properties": [],
				"version": "0.0.1",
				"id": "5950debd-e0aa-4aaa-bd39-b6321f998a6d",
				"provided_execution_port": [{
						"name": "offerDocker",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"ip": "192.168.43.104",
				"port": ["2376"],
				"credentials": {
					"username": "ubuntu",
					"password": "",
					"sshkey": ""
				},
				"monitoring_agent": "none"
			}, {
				"_type": "/internal/node_red",
				"name": "NodeRED-104",
				"properties": [],
				"version": "0.0.1",
				"id": "3fd66419-59ba-4dd0-9a30-47b1e4370229",
				"provided_execution_port": [{
						"name": "offerNodeRED",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "DockerRaspberryPiZeroGroveBaseHat",
					"image": "node-docker-raspberry-zero:armv6",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880",
						"1883": "1883"
					},
					"mounts": {
						"src": "/sys",
						"tgt": "/sys"
					},
					"devices": [{
							"PathOnHost": "/dev/mem",
							"PathInContainer": "/dev/mem",
							"CgroupPermissions": "rwm"
						}, {
							"PathOnHost": "/dev/gpiomem",
							"PathInContainer": "/dev/gpiomem",
							"CgroupPermissions": "rwm"
						}, {
							"PathOnHost": "/dev/i2c-1",
							"PathInContainer": "/dev/i2c-1",
							"CgroupPermissions": "rwm"
						}
					]
				},
				"ssh_resource": {
					"name": "38cc91ca-74c7-4dca-937f-4963e84d775a",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"ansible_resource": {
					"name": "34999ac4-a9f1-4a7a-8838-8a64fb2e183b",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"required_execution_port": {
					"name": "demandDocker",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "9d12b1dc-a5ab-4b43-9f82-20ec945e2459",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880"
					}
				],
				"required_communication_port": [{
						"name": "afcb384d-be86-4f20-8059-a54fda80f23f",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80",
						"isMandatory": false
					}
				],
				"nr_flow": [],
				"path_flow": "",
				"packages": []
			}, {
				"_type": "/internal/node_red_flow",
				"name": "NodeRED-flow-104",
				"properties": [],
				"version": "0.0.1",
				"id": "0bb14903-4c0b-4a9a-a0fa-9cb0923937a8",
				"provided_execution_port": [{
						"name": "831987f7-40c0-4880-a64f-8882379d272b",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "2f4544c3-1323-4af3-90d4-bcb6cfacc791",
					"image": "",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880"
					},
					"devices": {
						"PathOnHost": "",
						"PathInContainer": "",
						"CgroupPermissions": "rwm"
					}
				},
				"ssh_resource": {
					"name": "a6b31627-9544-46a0-a37a-10dd15b2125b",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"stopCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"ansible_resource": {
					"name": "45be26d0-b870-420d-b7e1-d873d73085f0",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"required_execution_port": {
					"name": "demandNodeRED",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "8b229e89-029a-4362-96be-e3e292a05afa",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80"
					}
				],
				"required_communication_port": [{
						"name": "8d014272-7f0e-4f67-a8db-a9d515324c5b",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880",
						"isMandatory": false
					}
				],
				"nr_flow": [{
						"id": "eac2018f.030104",
						"type": "rpi-gpio out",
						"z": "eac2018f.010104",
						"name": "D 16",
						"pin": "36",
						"set": true,
						"level": "0",
						"freq": "",
						"out": "out",
						"x": 610,
						"y": 140,
						"wires": []
					}, {
						"id": "eac2018f.040104",
						"type": "rpi-gpio in",
						"z": "eac2018f.010104",
						"name": "D 17",
						"pin": "11",
						"intype": "tri",
						"debounce": "25",
						"read": true,
						"x": 90,
						"y": 80,
						"wires": [["eac2018f.180104"]]
					}, {
						"id": "eac2018f.050104",
						"type": "grove-chainable-rgb-led",
						"z": "eac2018f.010104",
						"name": "",
						"pin": "5",
						"x": 560,
						"y": 200,
						"wires": []
					}, {
						"id": "eac2018f.070104",
						"type": "mqtt in",
						"z": "eac2018f.010104",
						"name": "",
						"topic": "/grove/button_led",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020104",
						"x": 130,
						"y": 140,
						"wires": [["eac2018f.150104"]]
					}, {
						"id": "eac2018f.080104",
						"type": "mqtt in",
						"z": "eac2018f.010104",
						"name": "",
						"topic": "/grove/rgb_led",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020104",
						"x": 120,
						"y": 200,
						"wires": [["eac2018f.170104"]]
					}, {
						"id": "eac2018f.060104",
						"type": "mqtt out",
						"z": "eac2018f.010104",
						"name": "",
						"topic": "/grove/button",
						"qos": "",
						"retain": "",
						"broker": "eac2018f.020104",
						"x": 580,
						"y": 80,
						"wires": []
					}, {
						"id": "eac2018f.090104",
						"type": "mosca in",
						"z": "eac2018f.010104",
						"mqtt_port": 1883,
						"mqtt_ws_port": 8080,
						"name": "",
						"username": "",
						"password": "",
						"dburl": "",
						"x": 110,
						"y": 40,
						"wires": [[]]
					}, {
						"id": "eac2018f.100104",
						"type": "grove-4-digit-display",
						"z": "eac2018f.010104",
						"name": "",
						"pin": "22",
						"x": 580,
						"y": 260,
						"wires": []
					}, {
						"id": "eac2018f.110104",
						"type": "mqtt in",
						"z": "eac2018f.010104",
						"name": "",
						"topic": "/grove/4digit_display",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020104",
						"x": 130,
						"y": 260,
						"wires": [["eac2018f.160104"]]
					}, {
						"id": "eac2018f.120104",
						"type": "inject",
						"z": "eac2018f.010104",
						"name": "Startup Inject",
						"topic": "",
						"payload": "0",
						"payloadType": "num",
						"repeat": "",
						"crontab": "",
						"once": true,
						"onceDelay": "1",
						"x": 120,
						"y": 420,
						"wires": [["eac2018f.130104", "eac2018f.200104", "eac2018f.220104", "eac2018f.230104"]]
					}, {
						"id": "eac2018f.130104",
						"type": "trigger",
						"z": "eac2018f.010104",
						"op1": " 104",
						"op2": "    ",
						"op1type": "str",
						"op2type": "str",
						"duration": "5",
						"extend": false,
						"units": "s",
						"reset": "",
						"bytopic": "all",
						"name": "",
						"x": 320,
						"y": 500,
						"wires": [["eac2018f.140104"]]
					}, {
						"id": "eac2018f.140104",
						"type": "grove-4-digit-display",
						"z": "eac2018f.010104",
						"name": "",
						"pin": "22",
						"x": 500,
						"y": 500,
						"wires": []
					}, {
						"id": "eac2018f.150104",
						"type": "function",
						"z": "eac2018f.010104",
						"name": "Store ButtonLed state",
						"func": "flow.set('ButtonLed', msg.payload);\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 340,
						"y": 140,
						"wires": [["eac2018f.030104"]]
					}, {
						"id": "eac2018f.160104",
						"type": "function",
						"z": "eac2018f.010104",
						"name": "Store Display state",
						"func": "try {\n    val = Number(msg.payload);\n} catch (error) {\n    val = msg.payload;\n}\n\nif (Number.isInteger(val)) {\n    if (val > 9999) {\n        val = 0\n    }\n    if (val === 0) {\n        strval = \"    \";\n    } else if (val < 10) {\n        strval = \"   \" + val;\n    } else if (val < 100) {\n        strval = \"  \" + val;\n    } else if (val < 1000) {\n        strval = \" \" + val;\n    } else {\n        strval = val;\n    }\n    flow.set('Display', val);\n    msg.payload = strval;\n}\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 330,
						"y": 260,
						"wires": [["eac2018f.100104"]]
					}, {
						"id": "eac2018f.170104",
						"type": "function",
						"z": "eac2018f.010104",
						"name": "Store RGBLED state",
						"func": "if (msg.payload === \"\") return null;\non = -1;\ntry {\n    msg.payload = JSON.parse(msg.payload)\n    on = Number(msg.payload.on)\n    val = Number(msg.payload.val);\n    flow.set('RGBLed', {'on': on, 'val': val});\n} catch (error) {\n    val = msg.payload;\n}\n\nif (on === 0) {\n    msg.payload = \"rgb(0, 0, 0)\";\n} else if (on === 1) {\n    if (val === -1) {\n        msg.payload = \"rgb(255, 255, 255)\";\n    } else if (Number.isInteger(val)) {\n        val = val % 360;\n        msg.payload = \"hsv(\" + val + \",100%, 50%)\";\n    } else {\n        return null;\n    }\n}\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 340,
						"y": 200,
						"wires": [["eac2018f.050104"]]
					}, {
						"id": "eac2018f.180104",
						"type": "function",
						"z": "eac2018f.010104",
						"name": "Emit Sensors/Actuators states",
						"func": "buttonLed = flow.get('ButtonLed') || 0;\nrgbLed = flow.get('RGBLed') || {'on': 0, 'val': -1};\ndisplay = flow.get('Display') || 0;\nbutton = msg.payload;\n\nmsg.payload = {\n        \"button\": button,\n        \"buttonLed\": buttonLed,\n        \"rgbLed\": rgbLed,\n        \"display\": display\n}\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 330,
						"y": 80,
						"wires": [["eac2018f.060104"]]
					}, {
						"id": "eac2018f.190104",
						"type": "comment",
						"z": "eac2018f.010104",
						"name": "Init Phase",
						"info": "",
						"x": 80,
						"y": 360,
						"wires": []
					}, {
						"id": "eac2018f.200104",
						"type": "function",
						"z": "eac2018f.010104",
						"name": "Reset flow variables",
						"func": "flow.set('ButtonLed', 0);\nflow.set(\"RGBLed\", {'on': 0, 'val': -1});\nflow.set(\"Display\", 0);\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 360,
						"y": 380,
						"wires": [[]]
					}, {
						"id": "eac2018f.210104",
						"type": "grove-chainable-rgb-led",
						"z": "eac2018f.010104",
						"name": "",
						"pin": "5",
						"x": 520,
						"y": 460,
						"wires": []
					}, {
						"id": "eac2018f.220104",
						"type": "rpi-gpio out",
						"z": "eac2018f.010104",
						"name": "D 16",
						"pin": "36",
						"set": true,
						"level": "0",
						"freq": "",
						"out": "out",
						"x": 470,
						"y": 420,
						"wires": []
					}, {
						"id": "eac2018f.230104",
						"type": "function",
						"z": "eac2018f.010104",
						"name": "Switch off",
						"func": "msg.payload = \"rgb(0,0,0)\"\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 320,
						"y": 460,
						"wires": [["eac2018f.210104"]]
					}, {
						"id": "eac2018f.020104",
						"type": "mqtt-broker",
						"z": "eac2018f.010101",
						"name": "",
						"broker": "localhost",
						"port": "1883",
						"clientid": "",
						"usetls": false,
						"compatmode": true,
						"keepalive": "60",
						"cleansession": true,
						"birthTopic": "",
						"birthQos": "0",
						"birthPayload": "",
						"closeTopic": "",
						"closeQos": "0",
						"closePayload": "",
						"willTopic": "",
						"willQos": "0",
						"willPayload": ""
					}
				],
				"path_flow": "",
				"packages": []
			}, {
				"_type": "/infra/docker_host",
				"name": "RPiZero-105",
				"properties": [],
				"version": "0.0.1",
				"id": "02f478ac-222c-4a23-a9b0-51b753faeea1",
				"provided_execution_port": [{
						"name": "offerDocker",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"ip": "192.168.43.105",
				"port": ["2376"],
				"credentials": {
					"username": "ubuntu",
					"password": "",
					"sshkey": ""
				},
				"monitoring_agent": "none"
			}, {
				"_type": "/internal/node_red",
				"name": "NodeRED-105",
				"properties": [],
				"version": "0.0.1",
				"id": "e8808fd6-3878-43cd-bd9c-df4d9fe1b40e",
				"provided_execution_port": [{
						"name": "offerNodeRED",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "DockerRaspberryPiZeroGroveBaseHat",
					"image": "node-docker-raspberry-zero:armv6",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880",
						"1883": "1883"
					},
					"mounts": {
						"src": "/sys",
						"tgt": "/sys"
					},
					"devices": [{
							"PathOnHost": "/dev/mem",
							"PathInContainer": "/dev/mem",
							"CgroupPermissions": "rwm"
						}, {
							"PathOnHost": "/dev/gpiomem",
							"PathInContainer": "/dev/gpiomem",
							"CgroupPermissions": "rwm"
						}, {
							"PathOnHost": "/dev/i2c-1",
							"PathInContainer": "/dev/i2c-1",
							"CgroupPermissions": "rwm"
						}
					]
				},
				"ssh_resource": {
					"name": "46c948c6-dec3-4086-83db-a504c6c02fac",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"ansible_resource": {
					"name": "7245e126-ba2f-411e-bac9-11024763901a",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"required_execution_port": {
					"name": "demandDocker",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "9c6c37e2-e9cf-4fd3-92a2-a26da403d4b2",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880"
					}
				],
				"required_communication_port": [{
						"name": "8b645a6b-10a4-4bf9-83ea-41010394587d",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80",
						"isMandatory": false
					}
				],
				"nr_flow": [],
				"path_flow": "",
				"packages": []
			}, {
				"_type": "/internal/node_red_flow",
				"name": "NodeRED-flow-105",
				"properties": [],
				"version": "0.0.1",
				"id": "db6abb16-2ce7-4309-8505-6e0bda6bf177",
				"provided_execution_port": [{
						"name": "d722201a-d156-453e-add5-3eccc4a8d69d",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "c404a28e-a2c2-4ca0-81e0-bb2fa56a35d1",
					"image": "",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880"
					},
					"devices": {
						"PathOnHost": "",
						"PathInContainer": "",
						"CgroupPermissions": "rwm"
					}
				},
				"ssh_resource": {
					"name": "912d258b-3faf-4415-9af5-b37a5d967fd4",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"stopCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"ansible_resource": {
					"name": "9f4c0347-d6c2-4be4-aca7-dd30c54f7186",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"required_execution_port": {
					"name": "demandNodeRED",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "058da7a6-d036-448f-aec8-57d44ef23d51",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80"
					}
				],
				"required_communication_port": [{
						"name": "fc8fd609-afa6-41f3-84f0-56bcdabd170b",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880",
						"isMandatory": false
					}
				],
				"nr_flow": [{
						"id": "eac2018f.030105",
						"type": "rpi-gpio out",
						"z": "eac2018f.010105",
						"name": "D 16",
						"pin": "36",
						"set": true,
						"level": "0",
						"freq": "",
						"out": "out",
						"x": 610,
						"y": 140,
						"wires": []
					}, {
						"id": "eac2018f.040105",
						"type": "rpi-gpio in",
						"z": "eac2018f.010105",
						"name": "D 17",
						"pin": "11",
						"intype": "tri",
						"debounce": "25",
						"read": true,
						"x": 90,
						"y": 80,
						"wires": [["eac2018f.180105"]]
					}, {
						"id": "eac2018f.050105",
						"type": "grove-chainable-rgb-led",
						"z": "eac2018f.010105",
						"name": "",
						"pin": "5",
						"x": 560,
						"y": 200,
						"wires": []
					}, {
						"id": "eac2018f.070105",
						"type": "mqtt in",
						"z": "eac2018f.010105",
						"name": "",
						"topic": "/grove/button_led",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020105",
						"x": 130,
						"y": 140,
						"wires": [["eac2018f.150105"]]
					}, {
						"id": "eac2018f.080105",
						"type": "mqtt in",
						"z": "eac2018f.010105",
						"name": "",
						"topic": "/grove/rgb_led",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020105",
						"x": 120,
						"y": 200,
						"wires": [["eac2018f.170105"]]
					}, {
						"id": "eac2018f.060105",
						"type": "mqtt out",
						"z": "eac2018f.010105",
						"name": "",
						"topic": "/grove/button",
						"qos": "",
						"retain": "",
						"broker": "eac2018f.020105",
						"x": 580,
						"y": 80,
						"wires": []
					}, {
						"id": "eac2018f.090105",
						"type": "mosca in",
						"z": "eac2018f.010105",
						"mqtt_port": 1883,
						"mqtt_ws_port": 8080,
						"name": "",
						"username": "",
						"password": "",
						"dburl": "",
						"x": 110,
						"y": 40,
						"wires": [[]]
					}, {
						"id": "eac2018f.100105",
						"type": "grove-4-digit-display",
						"z": "eac2018f.010105",
						"name": "",
						"pin": "22",
						"x": 580,
						"y": 260,
						"wires": []
					}, {
						"id": "eac2018f.110105",
						"type": "mqtt in",
						"z": "eac2018f.010105",
						"name": "",
						"topic": "/grove/4digit_display",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020105",
						"x": 130,
						"y": 260,
						"wires": [["eac2018f.160105"]]
					}, {
						"id": "eac2018f.120105",
						"type": "inject",
						"z": "eac2018f.010105",
						"name": "Startup Inject",
						"topic": "",
						"payload": "0",
						"payloadType": "num",
						"repeat": "",
						"crontab": "",
						"once": true,
						"onceDelay": "1",
						"x": 120,
						"y": 420,
						"wires": [["eac2018f.130105", "eac2018f.200105", "eac2018f.220105", "eac2018f.230105"]]
					}, {
						"id": "eac2018f.130105",
						"type": "trigger",
						"z": "eac2018f.010105",
						"op1": " 105",
						"op2": "    ",
						"op1type": "str",
						"op2type": "str",
						"duration": "5",
						"extend": false,
						"units": "s",
						"reset": "",
						"bytopic": "all",
						"name": "",
						"x": 320,
						"y": 500,
						"wires": [["eac2018f.140105"]]
					}, {
						"id": "eac2018f.140105",
						"type": "grove-4-digit-display",
						"z": "eac2018f.010105",
						"name": "",
						"pin": "22",
						"x": 500,
						"y": 500,
						"wires": []
					}, {
						"id": "eac2018f.150105",
						"type": "function",
						"z": "eac2018f.010105",
						"name": "Store ButtonLed state",
						"func": "flow.set('ButtonLed', msg.payload);\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 340,
						"y": 140,
						"wires": [["eac2018f.030105"]]
					}, {
						"id": "eac2018f.160105",
						"type": "function",
						"z": "eac2018f.010105",
						"name": "Store Display state",
						"func": "try {\n    val = Number(msg.payload);\n} catch (error) {\n    val = msg.payload;\n}\n\nif (Number.isInteger(val)) {\n    if (val > 9999) {\n        val = 0\n    }\n    if (val === 0) {\n        strval = \"    \";\n    } else if (val < 10) {\n        strval = \"   \" + val;\n    } else if (val < 100) {\n        strval = \"  \" + val;\n    } else if (val < 1000) {\n        strval = \" \" + val;\n    } else {\n        strval = val;\n    }\n    flow.set('Display', val);\n    msg.payload = strval;\n}\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 330,
						"y": 260,
						"wires": [["eac2018f.100105"]]
					}, {
						"id": "eac2018f.170105",
						"type": "function",
						"z": "eac2018f.010105",
						"name": "Store RGBLED state",
						"func": "if (msg.payload === \"\") return null;\non = -1;\ntry {\n    msg.payload = JSON.parse(msg.payload)\n    on = Number(msg.payload.on)\n    val = Number(msg.payload.val);\n    flow.set('RGBLed', {'on': on, 'val': val});\n} catch (error) {\n    val = msg.payload;\n}\n\nif (on === 0) {\n    msg.payload = \"rgb(0, 0, 0)\";\n} else if (on === 1) {\n    if (val === -1) {\n        msg.payload = \"rgb(255, 255, 255)\";\n    } else if (Number.isInteger(val)) {\n        val = val % 360;\n        msg.payload = \"hsv(\" + val + \",100%, 50%)\";\n    } else {\n        return null;\n    }\n}\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 340,
						"y": 200,
						"wires": [["eac2018f.050105"]]
					}, {
						"id": "eac2018f.180105",
						"type": "function",
						"z": "eac2018f.010105",
						"name": "Emit Sensors/Actuators states",
						"func": "buttonLed = flow.get('ButtonLed') || 0;\nrgbLed = flow.get('RGBLed') || {'on': 0, 'val': -1};\ndisplay = flow.get('Display') || 0;\nbutton = msg.payload;\n\nmsg.payload = {\n        \"button\": button,\n        \"buttonLed\": buttonLed,\n        \"rgbLed\": rgbLed,\n        \"display\": display\n}\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 330,
						"y": 80,
						"wires": [["eac2018f.060105"]]
					}, {
						"id": "eac2018f.190105",
						"type": "comment",
						"z": "eac2018f.010105",
						"name": "Init Phase",
						"info": "",
						"x": 80,
						"y": 360,
						"wires": []
					}, {
						"id": "eac2018f.200105",
						"type": "function",
						"z": "eac2018f.010105",
						"name": "Reset flow variables",
						"func": "flow.set('ButtonLed', 0);\nflow.set(\"RGBLed\", {'on': 0, 'val': -1});\nflow.set(\"Display\", 0);\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 360,
						"y": 380,
						"wires": [[]]
					}, {
						"id": "eac2018f.210105",
						"type": "grove-chainable-rgb-led",
						"z": "eac2018f.010105",
						"name": "",
						"pin": "5",
						"x": 520,
						"y": 460,
						"wires": []
					}, {
						"id": "eac2018f.220105",
						"type": "rpi-gpio out",
						"z": "eac2018f.010105",
						"name": "D 16",
						"pin": "36",
						"set": true,
						"level": "0",
						"freq": "",
						"out": "out",
						"x": 470,
						"y": 420,
						"wires": []
					}, {
						"id": "eac2018f.230105",
						"type": "function",
						"z": "eac2018f.010105",
						"name": "Switch off",
						"func": "msg.payload = \"rgb(0,0,0)\"\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 320,
						"y": 460,
						"wires": [["eac2018f.210105"]]
					}, {
						"id": "eac2018f.020105",
						"type": "mqtt-broker",
						"z": "eac2018f.010101",
						"name": "",
						"broker": "localhost",
						"port": "1883",
						"clientid": "",
						"usetls": false,
						"compatmode": true,
						"keepalive": "60",
						"cleansession": true,
						"birthTopic": "",
						"birthQos": "0",
						"birthPayload": "",
						"closeTopic": "",
						"closeQos": "0",
						"closePayload": "",
						"willTopic": "",
						"willQos": "0",
						"willPayload": ""
					}
				],
				"path_flow": "",
				"packages": []
			}, {
				"_type": "/infra/docker_host",
				"name": "RPiZero-106",
				"properties": [],
				"version": "0.0.1",
				"id": "8f86cc94-a305-4cc5-befb-bbdf7714a0cc",
				"provided_execution_port": [{
						"name": "offerDocker",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"ip": "192.168.43.106",
				"port": ["2376"],
				"credentials": {
					"username": "ubuntu",
					"password": "",
					"sshkey": ""
				},
				"monitoring_agent": "none"
			}, {
				"_type": "/internal/node_red",
				"name": "NodeRED-106",
				"properties": [],
				"version": "0.0.1",
				"id": "1e9765d3-aa2e-48a3-98ad-a2c7c520a558",
				"provided_execution_port": [{
						"name": "offerNodeRED",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "DockerRaspberryPiZeroGroveBaseHat",
					"image": "node-docker-raspberry-zero:armv6",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880",
						"1883": "1883"
					},
					"mounts": {
						"src": "/sys",
						"tgt": "/sys"
					},
					"devices": [{
							"PathOnHost": "/dev/mem",
							"PathInContainer": "/dev/mem",
							"CgroupPermissions": "rwm"
						}, {
							"PathOnHost": "/dev/gpiomem",
							"PathInContainer": "/dev/gpiomem",
							"CgroupPermissions": "rwm"
						}, {
							"PathOnHost": "/dev/i2c-1",
							"PathInContainer": "/dev/i2c-1",
							"CgroupPermissions": "rwm"
						}
					]
				},
				"ssh_resource": {
					"name": "c89cc716-4e1d-4b4c-aaa1-ad9ed2172f33",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"ansible_resource": {
					"name": "4a3114de-ffc3-4b11-9fc7-144d79b5a6c7",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"required_execution_port": {
					"name": "demandDocker",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "ff324117-bde3-4363-a5f4-e91240a6c2da",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880"
					}
				],
				"required_communication_port": [{
						"name": "8a62070d-f785-42ff-bab1-df8f61dc7fd8",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80",
						"isMandatory": false
					}
				],
				"nr_flow": [],
				"path_flow": "",
				"packages": []
			}, {
				"_type": "/internal/node_red_flow",
				"name": "NodeRED-flow-106",
				"properties": [],
				"version": "0.0.1",
				"id": "f882fcf4-3186-4113-968f-a1f7e680ad99",
				"provided_execution_port": [{
						"name": "2a455d0a-3f8e-400c-8a0d-4a9b39b06d92",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "33b8bde7-5513-45c9-872f-0c30f1806c82",
					"image": "",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880"
					},
					"devices": {
						"PathOnHost": "",
						"PathInContainer": "",
						"CgroupPermissions": "rwm"
					}
				},
				"ssh_resource": {
					"name": "487d8c00-d59b-4122-b9ce-9658a3ee525e",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"stopCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"ansible_resource": {
					"name": "05d51d56-69f7-45a5-b600-bd2e3b637117",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"required_execution_port": {
					"name": "demandNodeRED",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "89588e42-edf6-42c2-b662-a58e4f297ab8",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80"
					}
				],
				"required_communication_port": [{
						"name": "1c57bead-2c1c-4bcc-ac22-460efd8481f9",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880",
						"isMandatory": false
					}
				],
				"nr_flow": [{
						"id": "eac2018f.030106",
						"type": "rpi-gpio out",
						"z": "eac2018f.010106",
						"name": "D 16",
						"pin": "36",
						"set": true,
						"level": "0",
						"freq": "",
						"out": "out",
						"x": 610,
						"y": 140,
						"wires": []
					}, {
						"id": "eac2018f.040106",
						"type": "rpi-gpio in",
						"z": "eac2018f.010106",
						"name": "D 17",
						"pin": "11",
						"intype": "tri",
						"debounce": "25",
						"read": true,
						"x": 90,
						"y": 80,
						"wires": [["eac2018f.180106"]]
					}, {
						"id": "eac2018f.050106",
						"type": "grove-chainable-rgb-led",
						"z": "eac2018f.010106",
						"name": "",
						"pin": "5",
						"x": 560,
						"y": 200,
						"wires": []
					}, {
						"id": "eac2018f.070106",
						"type": "mqtt in",
						"z": "eac2018f.010106",
						"name": "",
						"topic": "/grove/button_led",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020106",
						"x": 130,
						"y": 140,
						"wires": [["eac2018f.150106"]]
					}, {
						"id": "eac2018f.080106",
						"type": "mqtt in",
						"z": "eac2018f.010106",
						"name": "",
						"topic": "/grove/rgb_led",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020106",
						"x": 120,
						"y": 200,
						"wires": [["eac2018f.170106"]]
					}, {
						"id": "eac2018f.060106",
						"type": "mqtt out",
						"z": "eac2018f.010106",
						"name": "",
						"topic": "/grove/button",
						"qos": "",
						"retain": "",
						"broker": "eac2018f.020106",
						"x": 580,
						"y": 80,
						"wires": []
					}, {
						"id": "eac2018f.090106",
						"type": "mosca in",
						"z": "eac2018f.010106",
						"mqtt_port": 1883,
						"mqtt_ws_port": 8080,
						"name": "",
						"username": "",
						"password": "",
						"dburl": "",
						"x": 110,
						"y": 40,
						"wires": [[]]
					}, {
						"id": "eac2018f.100106",
						"type": "grove-4-digit-display",
						"z": "eac2018f.010106",
						"name": "",
						"pin": "22",
						"x": 580,
						"y": 260,
						"wires": []
					}, {
						"id": "eac2018f.110106",
						"type": "mqtt in",
						"z": "eac2018f.010106",
						"name": "",
						"topic": "/grove/4digit_display",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020106",
						"x": 130,
						"y": 260,
						"wires": [["eac2018f.160106"]]
					}, {
						"id": "eac2018f.120106",
						"type": "inject",
						"z": "eac2018f.010106",
						"name": "Startup Inject",
						"topic": "",
						"payload": "0",
						"payloadType": "num",
						"repeat": "",
						"crontab": "",
						"once": true,
						"onceDelay": "1",
						"x": 120,
						"y": 420,
						"wires": [["eac2018f.130106", "eac2018f.200106", "eac2018f.220106", "eac2018f.230106"]]
					}, {
						"id": "eac2018f.130106",
						"type": "trigger",
						"z": "eac2018f.010106",
						"op1": " 106",
						"op2": "    ",
						"op1type": "str",
						"op2type": "str",
						"duration": "5",
						"extend": false,
						"units": "s",
						"reset": "",
						"bytopic": "all",
						"name": "",
						"x": 320,
						"y": 500,
						"wires": [["eac2018f.140106"]]
					}, {
						"id": "eac2018f.140106",
						"type": "grove-4-digit-display",
						"z": "eac2018f.010106",
						"name": "",
						"pin": "22",
						"x": 500,
						"y": 500,
						"wires": []
					}, {
						"id": "eac2018f.150106",
						"type": "function",
						"z": "eac2018f.010106",
						"name": "Store ButtonLed state",
						"func": "flow.set('ButtonLed', msg.payload);\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 340,
						"y": 140,
						"wires": [["eac2018f.030106"]]
					}, {
						"id": "eac2018f.160106",
						"type": "function",
						"z": "eac2018f.010106",
						"name": "Store Display state",
						"func": "try {\n    val = Number(msg.payload);\n} catch (error) {\n    val = msg.payload;\n}\n\nif (Number.isInteger(val)) {\n    if (val > 9999) {\n        val = 0\n    }\n    if (val === 0) {\n        strval = \"    \";\n    } else if (val < 10) {\n        strval = \"   \" + val;\n    } else if (val < 100) {\n        strval = \"  \" + val;\n    } else if (val < 1000) {\n        strval = \" \" + val;\n    } else {\n        strval = val;\n    }\n    flow.set('Display', val);\n    msg.payload = strval;\n}\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 330,
						"y": 260,
						"wires": [["eac2018f.100106"]]
					}, {
						"id": "eac2018f.170106",
						"type": "function",
						"z": "eac2018f.010106",
						"name": "Store RGBLED state",
						"func": "if (msg.payload === \"\") return null;\non = -1;\ntry {\n    msg.payload = JSON.parse(msg.payload)\n    on = Number(msg.payload.on)\n    val = Number(msg.payload.val);\n    flow.set('RGBLed', {'on': on, 'val': val});\n} catch (error) {\n    val = msg.payload;\n}\n\nif (on === 0) {\n    msg.payload = \"rgb(0, 0, 0)\";\n} else if (on === 1) {\n    if (val === -1) {\n        msg.payload = \"rgb(255, 255, 255)\";\n    } else if (Number.isInteger(val)) {\n        val = val % 360;\n        msg.payload = \"hsv(\" + val + \",100%, 50%)\";\n    } else {\n        return null;\n    }\n}\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 340,
						"y": 200,
						"wires": [["eac2018f.050106"]]
					}, {
						"id": "eac2018f.180106",
						"type": "function",
						"z": "eac2018f.010106",
						"name": "Emit Sensors/Actuators states",
						"func": "buttonLed = flow.get('ButtonLed') || 0;\nrgbLed = flow.get('RGBLed') || {'on': 0, 'val': -1};\ndisplay = flow.get('Display') || 0;\nbutton = msg.payload;\n\nmsg.payload = {\n        \"button\": button,\n        \"buttonLed\": buttonLed,\n        \"rgbLed\": rgbLed,\n        \"display\": display\n}\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 330,
						"y": 80,
						"wires": [["eac2018f.060106"]]
					}, {
						"id": "eac2018f.190106",
						"type": "comment",
						"z": "eac2018f.010106",
						"name": "Init Phase",
						"info": "",
						"x": 80,
						"y": 360,
						"wires": []
					}, {
						"id": "eac2018f.200106",
						"type": "function",
						"z": "eac2018f.010106",
						"name": "Reset flow variables",
						"func": "flow.set('ButtonLed', 0);\nflow.set(\"RGBLed\", {'on': 0, 'val': -1});\nflow.set(\"Display\", 0);\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 360,
						"y": 380,
						"wires": [[]]
					}, {
						"id": "eac2018f.210106",
						"type": "grove-chainable-rgb-led",
						"z": "eac2018f.010106",
						"name": "",
						"pin": "5",
						"x": 520,
						"y": 460,
						"wires": []
					}, {
						"id": "eac2018f.220106",
						"type": "rpi-gpio out",
						"z": "eac2018f.010106",
						"name": "D 16",
						"pin": "36",
						"set": true,
						"level": "0",
						"freq": "",
						"out": "out",
						"x": 470,
						"y": 420,
						"wires": []
					}, {
						"id": "eac2018f.230106",
						"type": "function",
						"z": "eac2018f.010106",
						"name": "Switch off",
						"func": "msg.payload = \"rgb(0,0,0)\"\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 320,
						"y": 460,
						"wires": [["eac2018f.210106"]]
					}, {
						"id": "eac2018f.020106",
						"type": "mqtt-broker",
						"z": "eac2018f.010101",
						"name": "",
						"broker": "localhost",
						"port": "1883",
						"clientid": "",
						"usetls": false,
						"compatmode": true,
						"keepalive": "60",
						"cleansession": true,
						"birthTopic": "",
						"birthQos": "0",
						"birthPayload": "",
						"closeTopic": "",
						"closeQos": "0",
						"closePayload": "",
						"willTopic": "",
						"willQos": "0",
						"willPayload": ""
					}
				],
				"path_flow": "",
				"packages": []
			}, {
				"_type": "/infra/docker_host",
				"name": "RPiZero-107",
				"properties": [],
				"version": "0.0.1",
				"id": "7794ace0-2564-4cf0-b1c6-70affbb25233",
				"provided_execution_port": [{
						"name": "offerDocker",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"ip": "192.168.43.107",
				"port": ["2376"],
				"credentials": {
					"username": "ubuntu",
					"password": "",
					"sshkey": ""
				},
				"monitoring_agent": "none"
			}, {
				"_type": "/internal/node_red",
				"name": "NodeRED-107",
				"properties": [],
				"version": "0.0.1",
				"id": "2173cee9-d084-47af-b26c-aff264c83f79",
				"provided_execution_port": [{
						"name": "offerNodeRED",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "DockerRaspberryPiZeroGroveBaseHat",
					"image": "node-docker-raspberry-zero:armv6",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880",
						"1883": "1883"
					},
					"mounts": {
						"src": "/sys",
						"tgt": "/sys"
					},
					"devices": [{
							"PathOnHost": "/dev/mem",
							"PathInContainer": "/dev/mem",
							"CgroupPermissions": "rwm"
						}, {
							"PathOnHost": "/dev/gpiomem",
							"PathInContainer": "/dev/gpiomem",
							"CgroupPermissions": "rwm"
						}, {
							"PathOnHost": "/dev/i2c-1",
							"PathInContainer": "/dev/i2c-1",
							"CgroupPermissions": "rwm"
						}
					]
				},
				"ssh_resource": {
					"name": "f53bc99d-20c0-49e9-8f93-279ba7c96476",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"ansible_resource": {
					"name": "0a08f2bc-6467-4863-96e3-9318cc1973f6",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"required_execution_port": {
					"name": "demandDocker",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "fe444e1a-d0ce-49ae-bf0f-e5235269ce5c",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880"
					}
				],
				"required_communication_port": [{
						"name": "756a7bfd-6095-4ec6-9f16-19bcf2fd9a0d",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80",
						"isMandatory": false
					}
				],
				"nr_flow": [],
				"path_flow": "",
				"packages": []
			}, {
				"_type": "/internal/node_red_flow",
				"name": "NodeRED-flow-107",
				"properties": [],
				"version": "0.0.1",
				"id": "83ddc08a-3f48-43a2-9a45-7799ba6d067e",
				"provided_execution_port": [{
						"name": "44f6e3f7-1255-4b7d-aa3f-a2dda9ccd333",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "a67a509b-f656-4d3e-a0bc-6414d35dff26",
					"image": "",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880"
					},
					"devices": {
						"PathOnHost": "",
						"PathInContainer": "",
						"CgroupPermissions": "rwm"
					}
				},
				"ssh_resource": {
					"name": "096938e8-530e-4837-a413-5d2ff2bfa8cc",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"stopCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"ansible_resource": {
					"name": "7e2f7ba4-ecbd-41d6-86db-7ef5c108b614",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"required_execution_port": {
					"name": "demandNodeRED",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "f0744ed6-bef6-4b8b-88d5-248d8e0ce8aa",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80"
					}
				],
				"required_communication_port": [{
						"name": "9d36b048-77d4-47e4-be44-ea8e46ac4e8e",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880",
						"isMandatory": false
					}
				],
				"nr_flow": [{
						"id": "eac2018f.030107",
						"type": "rpi-gpio out",
						"z": "eac2018f.010107",
						"name": "D 16",
						"pin": "36",
						"set": true,
						"level": "0",
						"freq": "",
						"out": "out",
						"x": 610,
						"y": 140,
						"wires": []
					}, {
						"id": "eac2018f.040107",
						"type": "rpi-gpio in",
						"z": "eac2018f.010107",
						"name": "D 17",
						"pin": "11",
						"intype": "tri",
						"debounce": "25",
						"read": true,
						"x": 90,
						"y": 80,
						"wires": [["eac2018f.180107"]]
					}, {
						"id": "eac2018f.050107",
						"type": "grove-chainable-rgb-led",
						"z": "eac2018f.010107",
						"name": "",
						"pin": "5",
						"x": 560,
						"y": 200,
						"wires": []
					}, {
						"id": "eac2018f.070107",
						"type": "mqtt in",
						"z": "eac2018f.010107",
						"name": "",
						"topic": "/grove/button_led",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020107",
						"x": 130,
						"y": 140,
						"wires": [["eac2018f.150107"]]
					}, {
						"id": "eac2018f.080107",
						"type": "mqtt in",
						"z": "eac2018f.010107",
						"name": "",
						"topic": "/grove/rgb_led",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020107",
						"x": 120,
						"y": 200,
						"wires": [["eac2018f.170107"]]
					}, {
						"id": "eac2018f.060107",
						"type": "mqtt out",
						"z": "eac2018f.010107",
						"name": "",
						"topic": "/grove/button",
						"qos": "",
						"retain": "",
						"broker": "eac2018f.020107",
						"x": 580,
						"y": 80,
						"wires": []
					}, {
						"id": "eac2018f.090107",
						"type": "mosca in",
						"z": "eac2018f.010107",
						"mqtt_port": 1883,
						"mqtt_ws_port": 8080,
						"name": "",
						"username": "",
						"password": "",
						"dburl": "",
						"x": 110,
						"y": 40,
						"wires": [[]]
					}, {
						"id": "eac2018f.100107",
						"type": "grove-4-digit-display",
						"z": "eac2018f.010107",
						"name": "",
						"pin": "22",
						"x": 580,
						"y": 260,
						"wires": []
					}, {
						"id": "eac2018f.110107",
						"type": "mqtt in",
						"z": "eac2018f.010107",
						"name": "",
						"topic": "/grove/4digit_display",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020107",
						"x": 130,
						"y": 260,
						"wires": [["eac2018f.160107"]]
					}, {
						"id": "eac2018f.120107",
						"type": "inject",
						"z": "eac2018f.010107",
						"name": "Startup Inject",
						"topic": "",
						"payload": "0",
						"payloadType": "num",
						"repeat": "",
						"crontab": "",
						"once": true,
						"onceDelay": "1",
						"x": 120,
						"y": 420,
						"wires": [["eac2018f.130107", "eac2018f.200107", "eac2018f.220107", "eac2018f.230107"]]
					}, {
						"id": "eac2018f.130107",
						"type": "trigger",
						"z": "eac2018f.010107",
						"op1": " 107",
						"op2": "    ",
						"op1type": "str",
						"op2type": "str",
						"duration": "5",
						"extend": false,
						"units": "s",
						"reset": "",
						"bytopic": "all",
						"name": "",
						"x": 320,
						"y": 500,
						"wires": [["eac2018f.140107"]]
					}, {
						"id": "eac2018f.140107",
						"type": "grove-4-digit-display",
						"z": "eac2018f.010107",
						"name": "",
						"pin": "22",
						"x": 500,
						"y": 500,
						"wires": []
					}, {
						"id": "eac2018f.150107",
						"type": "function",
						"z": "eac2018f.010107",
						"name": "Store ButtonLed state",
						"func": "flow.set('ButtonLed', msg.payload);\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 340,
						"y": 140,
						"wires": [["eac2018f.030107"]]
					}, {
						"id": "eac2018f.160107",
						"type": "function",
						"z": "eac2018f.010107",
						"name": "Store Display state",
						"func": "try {\n    val = Number(msg.payload);\n} catch (error) {\n    val = msg.payload;\n}\n\nif (Number.isInteger(val)) {\n    if (val > 9999) {\n        val = 0\n    }\n    if (val === 0) {\n        strval = \"    \";\n    } else if (val < 10) {\n        strval = \"   \" + val;\n    } else if (val < 100) {\n        strval = \"  \" + val;\n    } else if (val < 1000) {\n        strval = \" \" + val;\n    } else {\n        strval = val;\n    }\n    flow.set('Display', val);\n    msg.payload = strval;\n}\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 330,
						"y": 260,
						"wires": [["eac2018f.100107"]]
					}, {
						"id": "eac2018f.170107",
						"type": "function",
						"z": "eac2018f.010107",
						"name": "Store RGBLED state",
						"func": "if (msg.payload === \"\") return null;\non = -1;\ntry {\n    msg.payload = JSON.parse(msg.payload)\n    on = Number(msg.payload.on)\n    val = Number(msg.payload.val);\n    flow.set('RGBLed', {'on': on, 'val': val});\n} catch (error) {\n    val = msg.payload;\n}\n\nif (on === 0) {\n    msg.payload = \"rgb(0, 0, 0)\";\n} else if (on === 1) {\n    if (val === -1) {\n        msg.payload = \"rgb(255, 255, 255)\";\n    } else if (Number.isInteger(val)) {\n        val = val % 360;\n        msg.payload = \"hsv(\" + val + \",100%, 50%)\";\n    } else {\n        return null;\n    }\n}\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 340,
						"y": 200,
						"wires": [["eac2018f.050107"]]
					}, {
						"id": "eac2018f.180107",
						"type": "function",
						"z": "eac2018f.010107",
						"name": "Emit Sensors/Actuators states",
						"func": "buttonLed = flow.get('ButtonLed') || 0;\nrgbLed = flow.get('RGBLed') || {'on': 0, 'val': -1};\ndisplay = flow.get('Display') || 0;\nbutton = msg.payload;\n\nmsg.payload = {\n        \"button\": button,\n        \"buttonLed\": buttonLed,\n        \"rgbLed\": rgbLed,\n        \"display\": display\n}\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 330,
						"y": 80,
						"wires": [["eac2018f.060107"]]
					}, {
						"id": "eac2018f.190107",
						"type": "comment",
						"z": "eac2018f.010107",
						"name": "Init Phase",
						"info": "",
						"x": 80,
						"y": 360,
						"wires": []
					}, {
						"id": "eac2018f.200107",
						"type": "function",
						"z": "eac2018f.010107",
						"name": "Reset flow variables",
						"func": "flow.set('ButtonLed', 0);\nflow.set(\"RGBLed\", {'on': 0, 'val': -1});\nflow.set(\"Display\", 0);\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 360,
						"y": 380,
						"wires": [[]]
					}, {
						"id": "eac2018f.210107",
						"type": "grove-chainable-rgb-led",
						"z": "eac2018f.010107",
						"name": "",
						"pin": "5",
						"x": 520,
						"y": 460,
						"wires": []
					}, {
						"id": "eac2018f.220107",
						"type": "rpi-gpio out",
						"z": "eac2018f.010107",
						"name": "D 16",
						"pin": "36",
						"set": true,
						"level": "0",
						"freq": "",
						"out": "out",
						"x": 470,
						"y": 420,
						"wires": []
					}, {
						"id": "eac2018f.230107",
						"type": "function",
						"z": "eac2018f.010107",
						"name": "Switch off",
						"func": "msg.payload = \"rgb(0,0,0)\"\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 320,
						"y": 460,
						"wires": [["eac2018f.210107"]]
					}, {
						"id": "eac2018f.020107",
						"type": "mqtt-broker",
						"z": "eac2018f.010101",
						"name": "",
						"broker": "localhost",
						"port": "1883",
						"clientid": "",
						"usetls": false,
						"compatmode": true,
						"keepalive": "60",
						"cleansession": true,
						"birthTopic": "",
						"birthQos": "0",
						"birthPayload": "",
						"closeTopic": "",
						"closeQos": "0",
						"closePayload": "",
						"willTopic": "",
						"willQos": "0",
						"willPayload": ""
					}
				],
				"path_flow": "",
				"packages": []
			}, {
				"_type": "/infra/docker_host",
				"name": "RPiZero-108",
				"properties": [],
				"version": "0.0.1",
				"id": "3d970bbb-1a01-4968-9578-a3119a3689f2",
				"provided_execution_port": [{
						"name": "offerDocker",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"ip": "192.168.43.108",
				"port": ["2376"],
				"credentials": {
					"username": "ubuntu",
					"password": "",
					"sshkey": ""
				},
				"monitoring_agent": "none"
			}, {
				"_type": "/internal/node_red",
				"name": "NodeRED-108",
				"properties": [],
				"version": "0.0.1",
				"id": "0798aab8-7a57-40b4-a0e2-b010fe6d3d7d",
				"provided_execution_port": [{
						"name": "offerNodeRED",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "DockerRaspberryPiZeroGroveBaseHat",
					"image": "node-docker-raspberry-zero:armv6",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880",
						"1883": "1883"
					},
					"mounts": {
						"src": "/sys",
						"tgt": "/sys"
					},
					"devices": [{
							"PathOnHost": "/dev/mem",
							"PathInContainer": "/dev/mem",
							"CgroupPermissions": "rwm"
						}, {
							"PathOnHost": "/dev/gpiomem",
							"PathInContainer": "/dev/gpiomem",
							"CgroupPermissions": "rwm"
						}, {
							"PathOnHost": "/dev/i2c-1",
							"PathInContainer": "/dev/i2c-1",
							"CgroupPermissions": "rwm"
						}
					]
				},
				"ssh_resource": {
					"name": "c90028cd-2740-49ea-81e6-eebc3be90f4a",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"ansible_resource": {
					"name": "bdd697e2-ef0e-46a6-b5f2-712c93914786",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"required_execution_port": {
					"name": "demandDocker",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "da41a3be-07ae-44d6-a52e-5d3eed59c074",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880"
					}
				],
				"required_communication_port": [{
						"name": "01976f3e-ff42-456d-86a5-075edf51fc53",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80",
						"isMandatory": false
					}
				],
				"nr_flow": [],
				"path_flow": "",
				"packages": []
			}, {
				"_type": "/internal/node_red_flow",
				"name": "NodeRED-flow-108",
				"properties": [],
				"version": "0.0.1",
				"id": "b87cf033-1aeb-4282-8826-eac4998bd0b4",
				"provided_execution_port": [{
						"name": "2971759d-dcdd-4418-afec-ae58d08243d0",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "71c89e31-9ac9-4009-be35-508261f02942",
					"image": "",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880"
					},
					"devices": {
						"PathOnHost": "",
						"PathInContainer": "",
						"CgroupPermissions": "rwm"
					}
				},
				"ssh_resource": {
					"name": "5bd586e1-38ec-4cdf-bdff-9cf3c14b0d78",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"stopCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"ansible_resource": {
					"name": "a8e6cb5f-1313-4b1a-8025-b679bd6e9c18",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"required_execution_port": {
					"name": "demandNodeRED",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "75bf0222-4239-4dab-8d69-3e59ba34b064",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80"
					}
				],
				"required_communication_port": [{
						"name": "deea0ce3-b353-4747-87cf-7f9715409020",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880",
						"isMandatory": false
					}
				],
				"nr_flow": [{
						"id": "eac2018f.030108",
						"type": "rpi-gpio out",
						"z": "eac2018f.010108",
						"name": "D 16",
						"pin": "36",
						"set": true,
						"level": "0",
						"freq": "",
						"out": "out",
						"x": 610,
						"y": 140,
						"wires": []
					}, {
						"id": "eac2018f.040108",
						"type": "rpi-gpio in",
						"z": "eac2018f.010108",
						"name": "D 17",
						"pin": "11",
						"intype": "tri",
						"debounce": "25",
						"read": true,
						"x": 90,
						"y": 80,
						"wires": [["eac2018f.180108"]]
					}, {
						"id": "eac2018f.050108",
						"type": "grove-chainable-rgb-led",
						"z": "eac2018f.010108",
						"name": "",
						"pin": "5",
						"x": 560,
						"y": 200,
						"wires": []
					}, {
						"id": "eac2018f.070108",
						"type": "mqtt in",
						"z": "eac2018f.010108",
						"name": "",
						"topic": "/grove/button_led",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020108",
						"x": 130,
						"y": 140,
						"wires": [["eac2018f.150108"]]
					}, {
						"id": "eac2018f.080108",
						"type": "mqtt in",
						"z": "eac2018f.010108",
						"name": "",
						"topic": "/grove/rgb_led",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020108",
						"x": 120,
						"y": 200,
						"wires": [["eac2018f.170108"]]
					}, {
						"id": "eac2018f.060108",
						"type": "mqtt out",
						"z": "eac2018f.010108",
						"name": "",
						"topic": "/grove/button",
						"qos": "",
						"retain": "",
						"broker": "eac2018f.020108",
						"x": 580,
						"y": 80,
						"wires": []
					}, {
						"id": "eac2018f.090108",
						"type": "mosca in",
						"z": "eac2018f.010108",
						"mqtt_port": 1883,
						"mqtt_ws_port": 8080,
						"name": "",
						"username": "",
						"password": "",
						"dburl": "",
						"x": 110,
						"y": 40,
						"wires": [[]]
					}, {
						"id": "eac2018f.100108",
						"type": "grove-4-digit-display",
						"z": "eac2018f.010108",
						"name": "",
						"pin": "22",
						"x": 580,
						"y": 260,
						"wires": []
					}, {
						"id": "eac2018f.110108",
						"type": "mqtt in",
						"z": "eac2018f.010108",
						"name": "",
						"topic": "/grove/4digit_display",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020108",
						"x": 130,
						"y": 260,
						"wires": [["eac2018f.160108"]]
					}, {
						"id": "eac2018f.120108",
						"type": "inject",
						"z": "eac2018f.010108",
						"name": "Startup Inject",
						"topic": "",
						"payload": "0",
						"payloadType": "num",
						"repeat": "",
						"crontab": "",
						"once": true,
						"onceDelay": "1",
						"x": 120,
						"y": 420,
						"wires": [["eac2018f.130108", "eac2018f.200108", "eac2018f.220108", "eac2018f.230108"]]
					}, {
						"id": "eac2018f.130108",
						"type": "trigger",
						"z": "eac2018f.010108",
						"op1": " 108",
						"op2": "    ",
						"op1type": "str",
						"op2type": "str",
						"duration": "5",
						"extend": false,
						"units": "s",
						"reset": "",
						"bytopic": "all",
						"name": "",
						"x": 320,
						"y": 500,
						"wires": [["eac2018f.140108"]]
					}, {
						"id": "eac2018f.140108",
						"type": "grove-4-digit-display",
						"z": "eac2018f.010108",
						"name": "",
						"pin": "22",
						"x": 500,
						"y": 500,
						"wires": []
					}, {
						"id": "eac2018f.150108",
						"type": "function",
						"z": "eac2018f.010108",
						"name": "Store ButtonLed state",
						"func": "flow.set('ButtonLed', msg.payload);\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 340,
						"y": 140,
						"wires": [["eac2018f.030108"]]
					}, {
						"id": "eac2018f.160108",
						"type": "function",
						"z": "eac2018f.010108",
						"name": "Store Display state",
						"func": "try {\n    val = Number(msg.payload);\n} catch (error) {\n    val = msg.payload;\n}\n\nif (Number.isInteger(val)) {\n    if (val > 9999) {\n        val = 0\n    }\n    if (val === 0) {\n        strval = \"    \";\n    } else if (val < 10) {\n        strval = \"   \" + val;\n    } else if (val < 100) {\n        strval = \"  \" + val;\n    } else if (val < 1000) {\n        strval = \" \" + val;\n    } else {\n        strval = val;\n    }\n    flow.set('Display', val);\n    msg.payload = strval;\n}\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 330,
						"y": 260,
						"wires": [["eac2018f.100108"]]
					}, {
						"id": "eac2018f.170108",
						"type": "function",
						"z": "eac2018f.010108",
						"name": "Store RGBLED state",
						"func": "if (msg.payload === \"\") return null;\non = -1;\ntry {\n    msg.payload = JSON.parse(msg.payload)\n    on = Number(msg.payload.on)\n    val = Number(msg.payload.val);\n    flow.set('RGBLed', {'on': on, 'val': val});\n} catch (error) {\n    val = msg.payload;\n}\n\nif (on === 0) {\n    msg.payload = \"rgb(0, 0, 0)\";\n} else if (on === 1) {\n    if (val === -1) {\n        msg.payload = \"rgb(255, 255, 255)\";\n    } else if (Number.isInteger(val)) {\n        val = val % 360;\n        msg.payload = \"hsv(\" + val + \",100%, 50%)\";\n    } else {\n        return null;\n    }\n}\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 340,
						"y": 200,
						"wires": [["eac2018f.050108"]]
					}, {
						"id": "eac2018f.180108",
						"type": "function",
						"z": "eac2018f.010108",
						"name": "Emit Sensors/Actuators states",
						"func": "buttonLed = flow.get('ButtonLed') || 0;\nrgbLed = flow.get('RGBLed') || {'on': 0, 'val': -1};\ndisplay = flow.get('Display') || 0;\nbutton = msg.payload;\n\nmsg.payload = {\n        \"button\": button,\n        \"buttonLed\": buttonLed,\n        \"rgbLed\": rgbLed,\n        \"display\": display\n}\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 330,
						"y": 80,
						"wires": [["eac2018f.060108"]]
					}, {
						"id": "eac2018f.190108",
						"type": "comment",
						"z": "eac2018f.010108",
						"name": "Init Phase",
						"info": "",
						"x": 80,
						"y": 360,
						"wires": []
					}, {
						"id": "eac2018f.200108",
						"type": "function",
						"z": "eac2018f.010108",
						"name": "Reset flow variables",
						"func": "flow.set('ButtonLed', 0);\nflow.set(\"RGBLed\", {'on': 0, 'val': -1});\nflow.set(\"Display\", 0);\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 360,
						"y": 380,
						"wires": [[]]
					}, {
						"id": "eac2018f.210108",
						"type": "grove-chainable-rgb-led",
						"z": "eac2018f.010108",
						"name": "",
						"pin": "5",
						"x": 520,
						"y": 460,
						"wires": []
					}, {
						"id": "eac2018f.220108",
						"type": "rpi-gpio out",
						"z": "eac2018f.010108",
						"name": "D 16",
						"pin": "36",
						"set": true,
						"level": "0",
						"freq": "",
						"out": "out",
						"x": 470,
						"y": 420,
						"wires": []
					}, {
						"id": "eac2018f.230108",
						"type": "function",
						"z": "eac2018f.010108",
						"name": "Switch off",
						"func": "msg.payload = \"rgb(0,0,0)\"\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 320,
						"y": 460,
						"wires": [["eac2018f.210108"]]
					}, {
						"id": "eac2018f.020108",
						"type": "mqtt-broker",
						"z": "eac2018f.010101",
						"name": "",
						"broker": "localhost",
						"port": "1883",
						"clientid": "",
						"usetls": false,
						"compatmode": true,
						"keepalive": "60",
						"cleansession": true,
						"birthTopic": "",
						"birthQos": "0",
						"birthPayload": "",
						"closeTopic": "",
						"closeQos": "0",
						"closePayload": "",
						"willTopic": "",
						"willQos": "0",
						"willPayload": ""
					}
				],
				"path_flow": "",
				"packages": []
			}, {
				"_type": "/infra/docker_host",
				"name": "RPiZero-109",
				"properties": [],
				"version": "0.0.1",
				"id": "6bf6c989-b3d7-4be1-aa00-4ae03cc37ef7",
				"provided_execution_port": [{
						"name": "offerDocker",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"ip": "192.168.43.109",
				"port": ["2376"],
				"credentials": {
					"username": "ubuntu",
					"password": "",
					"sshkey": ""
				},
				"monitoring_agent": "none"
			}, {
				"_type": "/internal/node_red",
				"name": "NodeRED-109",
				"properties": [],
				"version": "0.0.1",
				"id": "bdd07779-0f8b-458a-b035-46b70b587afc",
				"provided_execution_port": [{
						"name": "offerNodeRED",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "DockerRaspberryPiZeroGroveBaseHat",
					"image": "node-docker-raspberry-zero:armv6",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880",
						"1883": "1883"
					},
					"mounts": {
						"src": "/sys",
						"tgt": "/sys"
					},
					"devices": [{
							"PathOnHost": "/dev/mem",
							"PathInContainer": "/dev/mem",
							"CgroupPermissions": "rwm"
						}, {
							"PathOnHost": "/dev/gpiomem",
							"PathInContainer": "/dev/gpiomem",
							"CgroupPermissions": "rwm"
						}, {
							"PathOnHost": "/dev/i2c-1",
							"PathInContainer": "/dev/i2c-1",
							"CgroupPermissions": "rwm"
						}
					]
				},
				"ssh_resource": {
					"name": "22b81b7b-6e69-447f-af83-8db91ccb896c",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"ansible_resource": {
					"name": "d95ed4d7-2208-4fc5-bf23-7518d46dc84e",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"required_execution_port": {
					"name": "demandDocker",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "3e3275a5-a9e1-4a27-8c04-062278b3afbd",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880"
					}
				],
				"required_communication_port": [{
						"name": "b47fa2a0-2590-48b7-8a30-8ceefd5a839f",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80",
						"isMandatory": false
					}
				],
				"nr_flow": [],
				"path_flow": "",
				"packages": []
			}, {
				"_type": "/internal/node_red_flow",
				"name": "NodeRED-flow-109",
				"properties": [],
				"version": "0.0.1",
				"id": "9528efeb-54a2-4607-bdbc-ce096e87cb71",
				"provided_execution_port": [{
						"name": "4d3ebede-f7e7-4fa7-a8d0-db618274118e",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "976060d4-1457-4924-827b-4583ca4e9998",
					"image": "",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880"
					},
					"devices": {
						"PathOnHost": "",
						"PathInContainer": "",
						"CgroupPermissions": "rwm"
					}
				},
				"ssh_resource": {
					"name": "b9e751f9-88be-4af8-a998-bf325428687c",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"stopCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"ansible_resource": {
					"name": "e8058316-2768-4bdb-a9d7-6004187745df",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"required_execution_port": {
					"name": "demandNodeRED",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "4730acb8-8b28-4110-8926-32a3f447c436",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80"
					}
				],
				"required_communication_port": [{
						"name": "8dec4c8a-7e33-4388-9b5e-85c6e453d92f",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880",
						"isMandatory": false
					}
				],
				"nr_flow": [{
						"id": "eac2018f.030109",
						"type": "rpi-gpio out",
						"z": "eac2018f.010109",
						"name": "D 16",
						"pin": "36",
						"set": true,
						"level": "0",
						"freq": "",
						"out": "out",
						"x": 610,
						"y": 140,
						"wires": []
					}, {
						"id": "eac2018f.040109",
						"type": "rpi-gpio in",
						"z": "eac2018f.010109",
						"name": "D 17",
						"pin": "11",
						"intype": "tri",
						"debounce": "25",
						"read": true,
						"x": 90,
						"y": 80,
						"wires": [["eac2018f.180109"]]
					}, {
						"id": "eac2018f.050109",
						"type": "grove-chainable-rgb-led",
						"z": "eac2018f.010109",
						"name": "",
						"pin": "5",
						"x": 560,
						"y": 200,
						"wires": []
					}, {
						"id": "eac2018f.070109",
						"type": "mqtt in",
						"z": "eac2018f.010109",
						"name": "",
						"topic": "/grove/button_led",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020109",
						"x": 130,
						"y": 140,
						"wires": [["eac2018f.150109"]]
					}, {
						"id": "eac2018f.080109",
						"type": "mqtt in",
						"z": "eac2018f.010109",
						"name": "",
						"topic": "/grove/rgb_led",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020109",
						"x": 120,
						"y": 200,
						"wires": [["eac2018f.170109"]]
					}, {
						"id": "eac2018f.060109",
						"type": "mqtt out",
						"z": "eac2018f.010109",
						"name": "",
						"topic": "/grove/button",
						"qos": "",
						"retain": "",
						"broker": "eac2018f.020109",
						"x": 580,
						"y": 80,
						"wires": []
					}, {
						"id": "eac2018f.090109",
						"type": "mosca in",
						"z": "eac2018f.010109",
						"mqtt_port": 1883,
						"mqtt_ws_port": 8080,
						"name": "",
						"username": "",
						"password": "",
						"dburl": "",
						"x": 110,
						"y": 40,
						"wires": [[]]
					}, {
						"id": "eac2018f.100109",
						"type": "grove-4-digit-display",
						"z": "eac2018f.010109",
						"name": "",
						"pin": "22",
						"x": 580,
						"y": 260,
						"wires": []
					}, {
						"id": "eac2018f.110109",
						"type": "mqtt in",
						"z": "eac2018f.010109",
						"name": "",
						"topic": "/grove/4digit_display",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020109",
						"x": 130,
						"y": 260,
						"wires": [["eac2018f.160109"]]
					}, {
						"id": "eac2018f.120109",
						"type": "inject",
						"z": "eac2018f.010109",
						"name": "Startup Inject",
						"topic": "",
						"payload": "0",
						"payloadType": "num",
						"repeat": "",
						"crontab": "",
						"once": true,
						"onceDelay": "1",
						"x": 120,
						"y": 420,
						"wires": [["eac2018f.130109", "eac2018f.200109", "eac2018f.220109", "eac2018f.230109"]]
					}, {
						"id": "eac2018f.130109",
						"type": "trigger",
						"z": "eac2018f.010109",
						"op1": " 109",
						"op2": "    ",
						"op1type": "str",
						"op2type": "str",
						"duration": "5",
						"extend": false,
						"units": "s",
						"reset": "",
						"bytopic": "all",
						"name": "",
						"x": 320,
						"y": 500,
						"wires": [["eac2018f.140109"]]
					}, {
						"id": "eac2018f.140109",
						"type": "grove-4-digit-display",
						"z": "eac2018f.010109",
						"name": "",
						"pin": "22",
						"x": 500,
						"y": 500,
						"wires": []
					}, {
						"id": "eac2018f.150109",
						"type": "function",
						"z": "eac2018f.010109",
						"name": "Store ButtonLed state",
						"func": "flow.set('ButtonLed', msg.payload);\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 340,
						"y": 140,
						"wires": [["eac2018f.030109"]]
					}, {
						"id": "eac2018f.160109",
						"type": "function",
						"z": "eac2018f.010109",
						"name": "Store Display state",
						"func": "try {\n    val = Number(msg.payload);\n} catch (error) {\n    val = msg.payload;\n}\n\nif (Number.isInteger(val)) {\n    if (val > 9999) {\n        val = 0\n    }\n    if (val === 0) {\n        strval = \"    \";\n    } else if (val < 10) {\n        strval = \"   \" + val;\n    } else if (val < 100) {\n        strval = \"  \" + val;\n    } else if (val < 1000) {\n        strval = \" \" + val;\n    } else {\n        strval = val;\n    }\n    flow.set('Display', val);\n    msg.payload = strval;\n}\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 330,
						"y": 260,
						"wires": [["eac2018f.100109"]]
					}, {
						"id": "eac2018f.170109",
						"type": "function",
						"z": "eac2018f.010109",
						"name": "Store RGBLED state",
						"func": "if (msg.payload === \"\") return null;\non = -1;\ntry {\n    msg.payload = JSON.parse(msg.payload)\n    on = Number(msg.payload.on)\n    val = Number(msg.payload.val);\n    flow.set('RGBLed', {'on': on, 'val': val});\n} catch (error) {\n    val = msg.payload;\n}\n\nif (on === 0) {\n    msg.payload = \"rgb(0, 0, 0)\";\n} else if (on === 1) {\n    if (val === -1) {\n        msg.payload = \"rgb(255, 255, 255)\";\n    } else if (Number.isInteger(val)) {\n        val = val % 360;\n        msg.payload = \"hsv(\" + val + \",100%, 50%)\";\n    } else {\n        return null;\n    }\n}\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 340,
						"y": 200,
						"wires": [["eac2018f.050109"]]
					}, {
						"id": "eac2018f.180109",
						"type": "function",
						"z": "eac2018f.010109",
						"name": "Emit Sensors/Actuators states",
						"func": "buttonLed = flow.get('ButtonLed') || 0;\nrgbLed = flow.get('RGBLed') || {'on': 0, 'val': -1};\ndisplay = flow.get('Display') || 0;\nbutton = msg.payload;\n\nmsg.payload = {\n        \"button\": button,\n        \"buttonLed\": buttonLed,\n        \"rgbLed\": rgbLed,\n        \"display\": display\n}\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 330,
						"y": 80,
						"wires": [["eac2018f.060109"]]
					}, {
						"id": "eac2018f.190109",
						"type": "comment",
						"z": "eac2018f.010109",
						"name": "Init Phase",
						"info": "",
						"x": 80,
						"y": 360,
						"wires": []
					}, {
						"id": "eac2018f.200109",
						"type": "function",
						"z": "eac2018f.010109",
						"name": "Reset flow variables",
						"func": "flow.set('ButtonLed', 0);\nflow.set(\"RGBLed\", {'on': 0, 'val': -1});\nflow.set(\"Display\", 0);\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 360,
						"y": 380,
						"wires": [[]]
					}, {
						"id": "eac2018f.210109",
						"type": "grove-chainable-rgb-led",
						"z": "eac2018f.010109",
						"name": "",
						"pin": "5",
						"x": 520,
						"y": 460,
						"wires": []
					}, {
						"id": "eac2018f.220109",
						"type": "rpi-gpio out",
						"z": "eac2018f.010109",
						"name": "D 16",
						"pin": "36",
						"set": true,
						"level": "0",
						"freq": "",
						"out": "out",
						"x": 470,
						"y": 420,
						"wires": []
					}, {
						"id": "eac2018f.230109",
						"type": "function",
						"z": "eac2018f.010109",
						"name": "Switch off",
						"func": "msg.payload = \"rgb(0,0,0)\"\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 320,
						"y": 460,
						"wires": [["eac2018f.210109"]]
					}, {
						"id": "eac2018f.020109",
						"type": "mqtt-broker",
						"z": "eac2018f.010101",
						"name": "",
						"broker": "localhost",
						"port": "1883",
						"clientid": "",
						"usetls": false,
						"compatmode": true,
						"keepalive": "60",
						"cleansession": true,
						"birthTopic": "",
						"birthQos": "0",
						"birthPayload": "",
						"closeTopic": "",
						"closeQos": "0",
						"closePayload": "",
						"willTopic": "",
						"willQos": "0",
						"willPayload": ""
					}
				],
				"path_flow": "",
				"packages": []
			}, {
				"_type": "/infra/docker_host",
				"name": "RPiZero-110",
				"properties": [],
				"version": "0.0.1",
				"id": "40d38b42-2c38-4ee0-850a-788036ce3d79",
				"provided_execution_port": [{
						"name": "offerDocker",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"ip": "192.168.43.110",
				"port": ["2376"],
				"credentials": {
					"username": "ubuntu",
					"password": "",
					"sshkey": ""
				},
				"monitoring_agent": "none"
			}, {
				"_type": "/internal/node_red",
				"name": "NodeRED-110",
				"properties": [],
				"version": "0.0.1",
				"id": "c2871ad2-23be-43a2-9a80-a3575d15fbff",
				"provided_execution_port": [{
						"name": "offerNodeRED",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "DockerRaspberryPiZeroGroveBaseHat",
					"image": "node-docker-raspberry-zero:armv6",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880",
						"1883": "1883"
					},
					"mounts": {
						"src": "/sys",
						"tgt": "/sys"
					},
					"devices": [{
							"PathOnHost": "/dev/mem",
							"PathInContainer": "/dev/mem",
							"CgroupPermissions": "rwm"
						}, {
							"PathOnHost": "/dev/gpiomem",
							"PathInContainer": "/dev/gpiomem",
							"CgroupPermissions": "rwm"
						}, {
							"PathOnHost": "/dev/i2c-1",
							"PathInContainer": "/dev/i2c-1",
							"CgroupPermissions": "rwm"
						}
					]
				},
				"ssh_resource": {
					"name": "cf84c1ae-ac15-4792-9ac1-ea2d114f4708",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"ansible_resource": {
					"name": "29b3e1fa-aa5b-439f-8057-dcbcd5b1c372",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"required_execution_port": {
					"name": "demandDocker",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "3ddc170b-5316-44ca-9709-c6128170a0a5",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880"
					}
				],
				"required_communication_port": [{
						"name": "db85d401-916c-46e7-b514-13723ce350fc",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80",
						"isMandatory": false
					}
				],
				"nr_flow": [],
				"path_flow": "",
				"packages": []
			}, {
				"_type": "/internal/node_red_flow",
				"name": "NodeRED-flow-110",
				"properties": [],
				"version": "0.0.1",
				"id": "abd2e8de-29ad-44fb-91b9-112d517181b3",
				"provided_execution_port": [{
						"name": "890f9d40-a46c-4a8e-af20-d64bf2ecbbcd",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "6dc11d4b-cddd-449a-8c47-395d0392e60a",
					"image": "",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880"
					},
					"devices": {
						"PathOnHost": "",
						"PathInContainer": "",
						"CgroupPermissions": "rwm"
					}
				},
				"ssh_resource": {
					"name": "bce99013-bf0b-434b-99a5-ceb71e58af7e",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"stopCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"ansible_resource": {
					"name": "be266bdc-72b3-47e1-9fa2-908ad1acd21f",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"required_execution_port": {
					"name": "demandNodeRED",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "dad871bb-e70c-4a23-9b12-f428e92c491c",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80"
					}
				],
				"required_communication_port": [{
						"name": "c0ac8ac8-3836-46c0-9521-15f3622b6a06",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880",
						"isMandatory": false
					}
				],
				"nr_flow": [{
						"id": "eac2018f.030110",
						"type": "rpi-gpio out",
						"z": "eac2018f.010110",
						"name": "D 16",
						"pin": "36",
						"set": true,
						"level": "0",
						"freq": "",
						"out": "out",
						"x": 610,
						"y": 140,
						"wires": []
					}, {
						"id": "eac2018f.040110",
						"type": "rpi-gpio in",
						"z": "eac2018f.010110",
						"name": "D 17",
						"pin": "11",
						"intype": "tri",
						"debounce": "25",
						"read": true,
						"x": 90,
						"y": 80,
						"wires": [["eac2018f.180110"]]
					}, {
						"id": "eac2018f.050110",
						"type": "grove-chainable-rgb-led",
						"z": "eac2018f.010110",
						"name": "",
						"pin": "5",
						"x": 560,
						"y": 200,
						"wires": []
					}, {
						"id": "eac2018f.070110",
						"type": "mqtt in",
						"z": "eac2018f.010110",
						"name": "",
						"topic": "/grove/button_led",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020110",
						"x": 130,
						"y": 140,
						"wires": [["eac2018f.150110"]]
					}, {
						"id": "eac2018f.080110",
						"type": "mqtt in",
						"z": "eac2018f.010110",
						"name": "",
						"topic": "/grove/rgb_led",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020110",
						"x": 120,
						"y": 200,
						"wires": [["eac2018f.170110"]]
					}, {
						"id": "eac2018f.060110",
						"type": "mqtt out",
						"z": "eac2018f.010110",
						"name": "",
						"topic": "/grove/button",
						"qos": "",
						"retain": "",
						"broker": "eac2018f.020110",
						"x": 580,
						"y": 80,
						"wires": []
					}, {
						"id": "eac2018f.090110",
						"type": "mosca in",
						"z": "eac2018f.010110",
						"mqtt_port": 1883,
						"mqtt_ws_port": 8080,
						"name": "",
						"username": "",
						"password": "",
						"dburl": "",
						"x": 110,
						"y": 40,
						"wires": [[]]
					}, {
						"id": "eac2018f.100110",
						"type": "grove-4-digit-display",
						"z": "eac2018f.010110",
						"name": "",
						"pin": "22",
						"x": 580,
						"y": 260,
						"wires": []
					}, {
						"id": "eac2018f.110110",
						"type": "mqtt in",
						"z": "eac2018f.010110",
						"name": "",
						"topic": "/grove/4digit_display",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020110",
						"x": 130,
						"y": 260,
						"wires": [["eac2018f.160110"]]
					}, {
						"id": "eac2018f.120110",
						"type": "inject",
						"z": "eac2018f.010110",
						"name": "Startup Inject",
						"topic": "",
						"payload": "0",
						"payloadType": "num",
						"repeat": "",
						"crontab": "",
						"once": true,
						"onceDelay": "1",
						"x": 120,
						"y": 420,
						"wires": [["eac2018f.130110", "eac2018f.200110", "eac2018f.220110", "eac2018f.230110"]]
					}, {
						"id": "eac2018f.130110",
						"type": "trigger",
						"z": "eac2018f.010110",
						"op1": " 110",
						"op2": "    ",
						"op1type": "str",
						"op2type": "str",
						"duration": "5",
						"extend": false,
						"units": "s",
						"reset": "",
						"bytopic": "all",
						"name": "",
						"x": 320,
						"y": 500,
						"wires": [["eac2018f.140110"]]
					}, {
						"id": "eac2018f.140110",
						"type": "grove-4-digit-display",
						"z": "eac2018f.010110",
						"name": "",
						"pin": "22",
						"x": 500,
						"y": 500,
						"wires": []
					}, {
						"id": "eac2018f.150110",
						"type": "function",
						"z": "eac2018f.010110",
						"name": "Store ButtonLed state",
						"func": "flow.set('ButtonLed', msg.payload);\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 340,
						"y": 140,
						"wires": [["eac2018f.030110"]]
					}, {
						"id": "eac2018f.160110",
						"type": "function",
						"z": "eac2018f.010110",
						"name": "Store Display state",
						"func": "try {\n    val = Number(msg.payload);\n} catch (error) {\n    val = msg.payload;\n}\n\nif (Number.isInteger(val)) {\n    if (val > 9999) {\n        val = 0\n    }\n    if (val === 0) {\n        strval = \"    \";\n    } else if (val < 10) {\n        strval = \"   \" + val;\n    } else if (val < 100) {\n        strval = \"  \" + val;\n    } else if (val < 1000) {\n        strval = \" \" + val;\n    } else {\n        strval = val;\n    }\n    flow.set('Display', val);\n    msg.payload = strval;\n}\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 330,
						"y": 260,
						"wires": [["eac2018f.100110"]]
					}, {
						"id": "eac2018f.170110",
						"type": "function",
						"z": "eac2018f.010110",
						"name": "Store RGBLED state",
						"func": "if (msg.payload === \"\") return null;\non = -1;\ntry {\n    msg.payload = JSON.parse(msg.payload)\n    on = Number(msg.payload.on)\n    val = Number(msg.payload.val);\n    flow.set('RGBLed', {'on': on, 'val': val});\n} catch (error) {\n    val = msg.payload;\n}\n\nif (on === 0) {\n    msg.payload = \"rgb(0, 0, 0)\";\n} else if (on === 1) {\n    if (val === -1) {\n        msg.payload = \"rgb(255, 255, 255)\";\n    } else if (Number.isInteger(val)) {\n        val = val % 360;\n        msg.payload = \"hsv(\" + val + \",100%, 50%)\";\n    } else {\n        return null;\n    }\n}\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 340,
						"y": 200,
						"wires": [["eac2018f.050110"]]
					}, {
						"id": "eac2018f.180110",
						"type": "function",
						"z": "eac2018f.010110",
						"name": "Emit Sensors/Actuators states",
						"func": "buttonLed = flow.get('ButtonLed') || 0;\nrgbLed = flow.get('RGBLed') || {'on': 0, 'val': -1};\ndisplay = flow.get('Display') || 0;\nbutton = msg.payload;\n\nmsg.payload = {\n        \"button\": button,\n        \"buttonLed\": buttonLed,\n        \"rgbLed\": rgbLed,\n        \"display\": display\n}\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 330,
						"y": 80,
						"wires": [["eac2018f.060110"]]
					}, {
						"id": "eac2018f.190110",
						"type": "comment",
						"z": "eac2018f.010110",
						"name": "Init Phase",
						"info": "",
						"x": 80,
						"y": 360,
						"wires": []
					}, {
						"id": "eac2018f.200110",
						"type": "function",
						"z": "eac2018f.010110",
						"name": "Reset flow variables",
						"func": "flow.set('ButtonLed', 0);\nflow.set(\"RGBLed\", {'on': 0, 'val': -1});\nflow.set(\"Display\", 0);\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 360,
						"y": 380,
						"wires": [[]]
					}, {
						"id": "eac2018f.210110",
						"type": "grove-chainable-rgb-led",
						"z": "eac2018f.010110",
						"name": "",
						"pin": "5",
						"x": 520,
						"y": 460,
						"wires": []
					}, {
						"id": "eac2018f.220110",
						"type": "rpi-gpio out",
						"z": "eac2018f.010110",
						"name": "D 16",
						"pin": "36",
						"set": true,
						"level": "0",
						"freq": "",
						"out": "out",
						"x": 470,
						"y": 420,
						"wires": []
					}, {
						"id": "eac2018f.230110",
						"type": "function",
						"z": "eac2018f.010110",
						"name": "Switch off",
						"func": "msg.payload = \"rgb(0,0,0)\"\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 320,
						"y": 460,
						"wires": [["eac2018f.210110"]]
					}, {
						"id": "eac2018f.020110",
						"type": "mqtt-broker",
						"z": "eac2018f.010101",
						"name": "",
						"broker": "localhost",
						"port": "1883",
						"clientid": "",
						"usetls": false,
						"compatmode": true,
						"keepalive": "60",
						"cleansession": true,
						"birthTopic": "",
						"birthQos": "0",
						"birthPayload": "",
						"closeTopic": "",
						"closeQos": "0",
						"closePayload": "",
						"willTopic": "",
						"willQos": "0",
						"willPayload": ""
					}
				],
				"path_flow": "",
				"packages": []
			}, {
				"_type": "/infra/docker_host",
				"name": "RPiZero-111",
				"properties": [],
				"version": "0.0.1",
				"id": "0b08d245-e97c-4e56-bd02-228e23683651",
				"provided_execution_port": [{
						"name": "offerDocker",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"ip": "192.168.43.111",
				"port": ["2376"],
				"credentials": {
					"username": "ubuntu",
					"password": "",
					"sshkey": ""
				},
				"monitoring_agent": "none"
			}, {
				"_type": "/internal/node_red",
				"name": "NodeRED-111",
				"properties": [],
				"version": "0.0.1",
				"id": "e6284367-476b-4fe4-b2ec-0c031e06d940",
				"provided_execution_port": [{
						"name": "offerNodeRED",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "DockerRaspberryPiZeroGroveBaseHat",
					"image": "node-docker-raspberry-zero:armv6",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880",
						"1883": "1883"
					},
					"mounts": {
						"src": "/sys",
						"tgt": "/sys"
					},
					"devices": [{
							"PathOnHost": "/dev/mem",
							"PathInContainer": "/dev/mem",
							"CgroupPermissions": "rwm"
						}, {
							"PathOnHost": "/dev/gpiomem",
							"PathInContainer": "/dev/gpiomem",
							"CgroupPermissions": "rwm"
						}, {
							"PathOnHost": "/dev/i2c-1",
							"PathInContainer": "/dev/i2c-1",
							"CgroupPermissions": "rwm"
						}
					]
				},
				"ssh_resource": {
					"name": "c43458d3-057b-404d-b284-4a9d39ed679a",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"ansible_resource": {
					"name": "8d8b0666-e52f-422f-a981-8d89ebeac7aa",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"required_execution_port": {
					"name": "demandDocker",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "f9265d23-00a7-4629-bf60-31247382c186",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880"
					}
				],
				"required_communication_port": [{
						"name": "80af45bb-beff-4aaa-a691-4481315fdb9a",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80",
						"isMandatory": false
					}
				],
				"nr_flow": [],
				"path_flow": "",
				"packages": []
			}, {
				"_type": "/internal/node_red_flow",
				"name": "NodeRED-flow-111",
				"properties": [],
				"version": "0.0.1",
				"id": "f230fcc7-ee74-451d-8e3d-633ea0bfe6fd",
				"provided_execution_port": [{
						"name": "609fd3a7-b983-4239-9523-ab39c9b7b75d",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "97a37843-e78a-4b50-8e75-d76a266e43d1",
					"image": "",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880"
					},
					"devices": {
						"PathOnHost": "",
						"PathInContainer": "",
						"CgroupPermissions": "rwm"
					}
				},
				"ssh_resource": {
					"name": "6a72c9f2-7bea-4c64-b918-5a1d4515dcd6",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"stopCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"ansible_resource": {
					"name": "2e5e93f1-2a0d-40c8-b66c-d1b24f440718",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"required_execution_port": {
					"name": "demandNodeRED",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "4a85abe0-2dff-4d33-b5f0-bfa39b24ff3d",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80"
					}
				],
				"required_communication_port": [{
						"name": "62255b99-304f-48d8-8398-4cfe44e43deb",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880",
						"isMandatory": false
					}
				],
				"nr_flow": [{
						"id": "eac2018f.030111",
						"type": "rpi-gpio out",
						"z": "eac2018f.010111",
						"name": "D 16",
						"pin": "36",
						"set": true,
						"level": "0",
						"freq": "",
						"out": "out",
						"x": 610,
						"y": 140,
						"wires": []
					}, {
						"id": "eac2018f.040111",
						"type": "rpi-gpio in",
						"z": "eac2018f.010111",
						"name": "D 17",
						"pin": "11",
						"intype": "tri",
						"debounce": "25",
						"read": true,
						"x": 90,
						"y": 80,
						"wires": [["eac2018f.180111"]]
					}, {
						"id": "eac2018f.050111",
						"type": "grove-chainable-rgb-led",
						"z": "eac2018f.010111",
						"name": "",
						"pin": "5",
						"x": 560,
						"y": 200,
						"wires": []
					}, {
						"id": "eac2018f.070111",
						"type": "mqtt in",
						"z": "eac2018f.010111",
						"name": "",
						"topic": "/grove/button_led",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020111",
						"x": 130,
						"y": 140,
						"wires": [["eac2018f.150111"]]
					}, {
						"id": "eac2018f.080111",
						"type": "mqtt in",
						"z": "eac2018f.010111",
						"name": "",
						"topic": "/grove/rgb_led",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020111",
						"x": 120,
						"y": 200,
						"wires": [["eac2018f.170111"]]
					}, {
						"id": "eac2018f.060111",
						"type": "mqtt out",
						"z": "eac2018f.010111",
						"name": "",
						"topic": "/grove/button",
						"qos": "",
						"retain": "",
						"broker": "eac2018f.020111",
						"x": 580,
						"y": 80,
						"wires": []
					}, {
						"id": "eac2018f.090111",
						"type": "mosca in",
						"z": "eac2018f.010111",
						"mqtt_port": 1883,
						"mqtt_ws_port": 8080,
						"name": "",
						"username": "",
						"password": "",
						"dburl": "",
						"x": 110,
						"y": 40,
						"wires": [[]]
					}, {
						"id": "eac2018f.100111",
						"type": "grove-4-digit-display",
						"z": "eac2018f.010111",
						"name": "",
						"pin": "22",
						"x": 580,
						"y": 260,
						"wires": []
					}, {
						"id": "eac2018f.110111",
						"type": "mqtt in",
						"z": "eac2018f.010111",
						"name": "",
						"topic": "/grove/4digit_display",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020111",
						"x": 130,
						"y": 260,
						"wires": [["eac2018f.160111"]]
					}, {
						"id": "eac2018f.120111",
						"type": "inject",
						"z": "eac2018f.010111",
						"name": "Startup Inject",
						"topic": "",
						"payload": "0",
						"payloadType": "num",
						"repeat": "",
						"crontab": "",
						"once": true,
						"onceDelay": "1",
						"x": 120,
						"y": 420,
						"wires": [["eac2018f.130111", "eac2018f.200111", "eac2018f.220111", "eac2018f.230111"]]
					}, {
						"id": "eac2018f.130111",
						"type": "trigger",
						"z": "eac2018f.010111",
						"op1": " 111",
						"op2": "    ",
						"op1type": "str",
						"op2type": "str",
						"duration": "5",
						"extend": false,
						"units": "s",
						"reset": "",
						"bytopic": "all",
						"name": "",
						"x": 320,
						"y": 500,
						"wires": [["eac2018f.140111"]]
					}, {
						"id": "eac2018f.140111",
						"type": "grove-4-digit-display",
						"z": "eac2018f.010111",
						"name": "",
						"pin": "22",
						"x": 500,
						"y": 500,
						"wires": []
					}, {
						"id": "eac2018f.150111",
						"type": "function",
						"z": "eac2018f.010111",
						"name": "Store ButtonLed state",
						"func": "flow.set('ButtonLed', msg.payload);\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 340,
						"y": 140,
						"wires": [["eac2018f.030111"]]
					}, {
						"id": "eac2018f.160111",
						"type": "function",
						"z": "eac2018f.010111",
						"name": "Store Display state",
						"func": "try {\n    val = Number(msg.payload);\n} catch (error) {\n    val = msg.payload;\n}\n\nif (Number.isInteger(val)) {\n    if (val > 9999) {\n        val = 0\n    }\n    if (val === 0) {\n        strval = \"    \";\n    } else if (val < 10) {\n        strval = \"   \" + val;\n    } else if (val < 100) {\n        strval = \"  \" + val;\n    } else if (val < 1000) {\n        strval = \" \" + val;\n    } else {\n        strval = val;\n    }\n    flow.set('Display', val);\n    msg.payload = strval;\n}\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 330,
						"y": 260,
						"wires": [["eac2018f.100111"]]
					}, {
						"id": "eac2018f.170111",
						"type": "function",
						"z": "eac2018f.010111",
						"name": "Store RGBLED state",
						"func": "if (msg.payload === \"\") return null;\non = -1;\ntry {\n    msg.payload = JSON.parse(msg.payload)\n    on = Number(msg.payload.on)\n    val = Number(msg.payload.val);\n    flow.set('RGBLed', {'on': on, 'val': val});\n} catch (error) {\n    val = msg.payload;\n}\n\nif (on === 0) {\n    msg.payload = \"rgb(0, 0, 0)\";\n} else if (on === 1) {\n    if (val === -1) {\n        msg.payload = \"rgb(255, 255, 255)\";\n    } else if (Number.isInteger(val)) {\n        val = val % 360;\n        msg.payload = \"hsv(\" + val + \",100%, 50%)\";\n    } else {\n        return null;\n    }\n}\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 340,
						"y": 200,
						"wires": [["eac2018f.050111"]]
					}, {
						"id": "eac2018f.180111",
						"type": "function",
						"z": "eac2018f.010111",
						"name": "Emit Sensors/Actuators states",
						"func": "buttonLed = flow.get('ButtonLed') || 0;\nrgbLed = flow.get('RGBLed') || {'on': 0, 'val': -1};\ndisplay = flow.get('Display') || 0;\nbutton = msg.payload;\n\nmsg.payload = {\n        \"button\": button,\n        \"buttonLed\": buttonLed,\n        \"rgbLed\": rgbLed,\n        \"display\": display\n}\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 330,
						"y": 80,
						"wires": [["eac2018f.060111"]]
					}, {
						"id": "eac2018f.190111",
						"type": "comment",
						"z": "eac2018f.010111",
						"name": "Init Phase",
						"info": "",
						"x": 80,
						"y": 360,
						"wires": []
					}, {
						"id": "eac2018f.200111",
						"type": "function",
						"z": "eac2018f.010111",
						"name": "Reset flow variables",
						"func": "flow.set('ButtonLed', 0);\nflow.set(\"RGBLed\", {'on': 0, 'val': -1});\nflow.set(\"Display\", 0);\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 360,
						"y": 380,
						"wires": [[]]
					}, {
						"id": "eac2018f.210111",
						"type": "grove-chainable-rgb-led",
						"z": "eac2018f.010111",
						"name": "",
						"pin": "5",
						"x": 520,
						"y": 460,
						"wires": []
					}, {
						"id": "eac2018f.220111",
						"type": "rpi-gpio out",
						"z": "eac2018f.010111",
						"name": "D 16",
						"pin": "36",
						"set": true,
						"level": "0",
						"freq": "",
						"out": "out",
						"x": 470,
						"y": 420,
						"wires": []
					}, {
						"id": "eac2018f.230111",
						"type": "function",
						"z": "eac2018f.010111",
						"name": "Switch off",
						"func": "msg.payload = \"rgb(0,0,0)\"\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 320,
						"y": 460,
						"wires": [["eac2018f.210111"]]
					}, {
						"id": "eac2018f.020111",
						"type": "mqtt-broker",
						"z": "eac2018f.010101",
						"name": "",
						"broker": "localhost",
						"port": "1883",
						"clientid": "",
						"usetls": false,
						"compatmode": true,
						"keepalive": "60",
						"cleansession": true,
						"birthTopic": "",
						"birthQos": "0",
						"birthPayload": "",
						"closeTopic": "",
						"closeQos": "0",
						"closePayload": "",
						"willTopic": "",
						"willQos": "0",
						"willPayload": ""
					}
				],
				"path_flow": "",
				"packages": []
			}, {
				"_type": "/infra/docker_host",
				"name": "RPiZero-112",
				"properties": [],
				"version": "0.0.1",
				"id": "5c5fb82b-2d36-4710-a048-4ae6d54f2562",
				"provided_execution_port": [{
						"name": "offerDocker",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"ip": "192.168.43.112",
				"port": ["2376"],
				"credentials": {
					"username": "ubuntu",
					"password": "",
					"sshkey": ""
				},
				"monitoring_agent": "none"
			}, {
				"_type": "/internal/node_red",
				"name": "NodeRED-112",
				"properties": [],
				"version": "0.0.1",
				"id": "b303584f-c7f6-4ea8-96db-0ec2178a913f",
				"provided_execution_port": [{
						"name": "offerNodeRED",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "DockerRaspberryPiZeroGroveBaseHat",
					"image": "node-docker-raspberry-zero:armv6",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880",
						"1883": "1883"
					},
					"mounts": {
						"src": "/sys",
						"tgt": "/sys"
					},
					"devices": [{
							"PathOnHost": "/dev/mem",
							"PathInContainer": "/dev/mem",
							"CgroupPermissions": "rwm"
						}, {
							"PathOnHost": "/dev/gpiomem",
							"PathInContainer": "/dev/gpiomem",
							"CgroupPermissions": "rwm"
						}, {
							"PathOnHost": "/dev/i2c-1",
							"PathInContainer": "/dev/i2c-1",
							"CgroupPermissions": "rwm"
						}
					]
				},
				"ssh_resource": {
					"name": "489f80f2-b403-4b77-a826-fa95717cb907",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"ansible_resource": {
					"name": "a35c3b42-9ccc-4189-8325-8e2cf0eb38bc",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"required_execution_port": {
					"name": "demandDocker",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "82623f9a-f7fc-4803-9b22-0054c91c6d5f",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880"
					}
				],
				"required_communication_port": [{
						"name": "1d890de4-eb67-447d-bcf4-73e13588b3e4",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80",
						"isMandatory": false
					}
				],
				"nr_flow": [],
				"path_flow": "",
				"packages": []
			}, {
				"_type": "/internal/node_red_flow",
				"name": "NodeRED-flow-112",
				"properties": [],
				"version": "0.0.1",
				"id": "1536cccb-951e-4913-8cc3-1acc4734eb04",
				"provided_execution_port": [{
						"name": "0912679b-3038-4d50-a3eb-889c7069b385",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "e1646d3d-d70b-4ef1-b02a-0d795327fe0b",
					"image": "",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880"
					},
					"devices": {
						"PathOnHost": "",
						"PathInContainer": "",
						"CgroupPermissions": "rwm"
					}
				},
				"ssh_resource": {
					"name": "d3d72a33-a816-43ce-aea0-a144b9273562",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"stopCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"ansible_resource": {
					"name": "0b9d75a7-7b16-470b-b367-6bb40ae6e102",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"required_execution_port": {
					"name": "demandNodeRED",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "16e06130-921e-4679-b3ff-513cada8481c",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80"
					}
				],
				"required_communication_port": [{
						"name": "d36e9b14-1f77-494d-b4f0-474974d005b5",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880",
						"isMandatory": false
					}
				],
				"nr_flow": [{
						"id": "eac2018f.030112",
						"type": "rpi-gpio out",
						"z": "eac2018f.010112",
						"name": "D 16",
						"pin": "36",
						"set": true,
						"level": "0",
						"freq": "",
						"out": "out",
						"x": 610,
						"y": 140,
						"wires": []
					}, {
						"id": "eac2018f.040112",
						"type": "rpi-gpio in",
						"z": "eac2018f.010112",
						"name": "D 17",
						"pin": "11",
						"intype": "tri",
						"debounce": "25",
						"read": true,
						"x": 90,
						"y": 80,
						"wires": [["eac2018f.180112"]]
					}, {
						"id": "eac2018f.050112",
						"type": "grove-chainable-rgb-led",
						"z": "eac2018f.010112",
						"name": "",
						"pin": "5",
						"x": 560,
						"y": 200,
						"wires": []
					}, {
						"id": "eac2018f.070112",
						"type": "mqtt in",
						"z": "eac2018f.010112",
						"name": "",
						"topic": "/grove/button_led",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020112",
						"x": 130,
						"y": 140,
						"wires": [["eac2018f.150112"]]
					}, {
						"id": "eac2018f.080112",
						"type": "mqtt in",
						"z": "eac2018f.010112",
						"name": "",
						"topic": "/grove/rgb_led",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020112",
						"x": 120,
						"y": 200,
						"wires": [["eac2018f.170112"]]
					}, {
						"id": "eac2018f.060112",
						"type": "mqtt out",
						"z": "eac2018f.010112",
						"name": "",
						"topic": "/grove/button",
						"qos": "",
						"retain": "",
						"broker": "eac2018f.020112",
						"x": 580,
						"y": 80,
						"wires": []
					}, {
						"id": "eac2018f.090112",
						"type": "mosca in",
						"z": "eac2018f.010112",
						"mqtt_port": 1883,
						"mqtt_ws_port": 8080,
						"name": "",
						"username": "",
						"password": "",
						"dburl": "",
						"x": 110,
						"y": 40,
						"wires": [[]]
					}, {
						"id": "eac2018f.100112",
						"type": "grove-4-digit-display",
						"z": "eac2018f.010112",
						"name": "",
						"pin": "22",
						"x": 580,
						"y": 260,
						"wires": []
					}, {
						"id": "eac2018f.110112",
						"type": "mqtt in",
						"z": "eac2018f.010112",
						"name": "",
						"topic": "/grove/4digit_display",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020112",
						"x": 130,
						"y": 260,
						"wires": [["eac2018f.160112"]]
					}, {
						"id": "eac2018f.120112",
						"type": "inject",
						"z": "eac2018f.010112",
						"name": "Startup Inject",
						"topic": "",
						"payload": "0",
						"payloadType": "num",
						"repeat": "",
						"crontab": "",
						"once": true,
						"onceDelay": "1",
						"x": 120,
						"y": 420,
						"wires": [["eac2018f.130112", "eac2018f.200112", "eac2018f.220112", "eac2018f.230112"]]
					}, {
						"id": "eac2018f.130112",
						"type": "trigger",
						"z": "eac2018f.010112",
						"op1": " 112",
						"op2": "    ",
						"op1type": "str",
						"op2type": "str",
						"duration": "5",
						"extend": false,
						"units": "s",
						"reset": "",
						"bytopic": "all",
						"name": "",
						"x": 320,
						"y": 500,
						"wires": [["eac2018f.140112"]]
					}, {
						"id": "eac2018f.140112",
						"type": "grove-4-digit-display",
						"z": "eac2018f.010112",
						"name": "",
						"pin": "22",
						"x": 500,
						"y": 500,
						"wires": []
					}, {
						"id": "eac2018f.150112",
						"type": "function",
						"z": "eac2018f.010112",
						"name": "Store ButtonLed state",
						"func": "flow.set('ButtonLed', msg.payload);\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 340,
						"y": 140,
						"wires": [["eac2018f.030112"]]
					}, {
						"id": "eac2018f.160112",
						"type": "function",
						"z": "eac2018f.010112",
						"name": "Store Display state",
						"func": "try {\n    val = Number(msg.payload);\n} catch (error) {\n    val = msg.payload;\n}\n\nif (Number.isInteger(val)) {\n    if (val > 9999) {\n        val = 0\n    }\n    if (val === 0) {\n        strval = \"    \";\n    } else if (val < 10) {\n        strval = \"   \" + val;\n    } else if (val < 100) {\n        strval = \"  \" + val;\n    } else if (val < 1000) {\n        strval = \" \" + val;\n    } else {\n        strval = val;\n    }\n    flow.set('Display', val);\n    msg.payload = strval;\n}\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 330,
						"y": 260,
						"wires": [["eac2018f.100112"]]
					}, {
						"id": "eac2018f.170112",
						"type": "function",
						"z": "eac2018f.010112",
						"name": "Store RGBLED state",
						"func": "if (msg.payload === \"\") return null;\non = -1;\ntry {\n    msg.payload = JSON.parse(msg.payload)\n    on = Number(msg.payload.on)\n    val = Number(msg.payload.val);\n    flow.set('RGBLed', {'on': on, 'val': val});\n} catch (error) {\n    val = msg.payload;\n}\n\nif (on === 0) {\n    msg.payload = \"rgb(0, 0, 0)\";\n} else if (on === 1) {\n    if (val === -1) {\n        msg.payload = \"rgb(255, 255, 255)\";\n    } else if (Number.isInteger(val)) {\n        val = val % 360;\n        msg.payload = \"hsv(\" + val + \",100%, 50%)\";\n    } else {\n        return null;\n    }\n}\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 340,
						"y": 200,
						"wires": [["eac2018f.050112"]]
					}, {
						"id": "eac2018f.180112",
						"type": "function",
						"z": "eac2018f.010112",
						"name": "Emit Sensors/Actuators states",
						"func": "buttonLed = flow.get('ButtonLed') || 0;\nrgbLed = flow.get('RGBLed') || {'on': 0, 'val': -1};\ndisplay = flow.get('Display') || 0;\nbutton = msg.payload;\n\nmsg.payload = {\n        \"button\": button,\n        \"buttonLed\": buttonLed,\n        \"rgbLed\": rgbLed,\n        \"display\": display\n}\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 330,
						"y": 80,
						"wires": [["eac2018f.060112"]]
					}, {
						"id": "eac2018f.190112",
						"type": "comment",
						"z": "eac2018f.010112",
						"name": "Init Phase",
						"info": "",
						"x": 80,
						"y": 360,
						"wires": []
					}, {
						"id": "eac2018f.200112",
						"type": "function",
						"z": "eac2018f.010112",
						"name": "Reset flow variables",
						"func": "flow.set('ButtonLed', 0);\nflow.set(\"RGBLed\", {'on': 0, 'val': -1});\nflow.set(\"Display\", 0);\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 360,
						"y": 380,
						"wires": [[]]
					}, {
						"id": "eac2018f.210112",
						"type": "grove-chainable-rgb-led",
						"z": "eac2018f.010112",
						"name": "",
						"pin": "5",
						"x": 520,
						"y": 460,
						"wires": []
					}, {
						"id": "eac2018f.220112",
						"type": "rpi-gpio out",
						"z": "eac2018f.010112",
						"name": "D 16",
						"pin": "36",
						"set": true,
						"level": "0",
						"freq": "",
						"out": "out",
						"x": 470,
						"y": 420,
						"wires": []
					}, {
						"id": "eac2018f.230112",
						"type": "function",
						"z": "eac2018f.010112",
						"name": "Switch off",
						"func": "msg.payload = \"rgb(0,0,0)\"\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 320,
						"y": 460,
						"wires": [["eac2018f.210112"]]
					}, {
						"id": "eac2018f.020112",
						"type": "mqtt-broker",
						"z": "eac2018f.010101",
						"name": "",
						"broker": "localhost",
						"port": "1883",
						"clientid": "",
						"usetls": false,
						"compatmode": true,
						"keepalive": "60",
						"cleansession": true,
						"birthTopic": "",
						"birthQos": "0",
						"birthPayload": "",
						"closeTopic": "",
						"closeQos": "0",
						"closePayload": "",
						"willTopic": "",
						"willQos": "0",
						"willPayload": ""
					}
				],
				"path_flow": "",
				"packages": []
			}, {
				"_type": "/infra/docker_host",
				"name": "RPiZero-113",
				"properties": [],
				"version": "0.0.1",
				"id": "753114ec-2f17-4488-8380-5a438292601b",
				"provided_execution_port": [{
						"name": "offerDocker",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"ip": "192.168.43.113",
				"port": ["2376"],
				"credentials": {
					"username": "ubuntu",
					"password": "",
					"sshkey": ""
				},
				"monitoring_agent": "none"
			}, {
				"_type": "/internal/node_red",
				"name": "NodeRED-113",
				"properties": [],
				"version": "0.0.1",
				"id": "27ae7cf6-c983-4e77-ad88-5bdf4937036a",
				"provided_execution_port": [{
						"name": "offerNodeRED",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "DockerRaspberryPiZeroGroveBaseHat",
					"image": "node-docker-raspberry-zero:armv6",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880",
						"1883": "1883"
					},
					"mounts": {
						"src": "/sys",
						"tgt": "/sys"
					},
					"devices": [{
							"PathOnHost": "/dev/mem",
							"PathInContainer": "/dev/mem",
							"CgroupPermissions": "rwm"
						}, {
							"PathOnHost": "/dev/gpiomem",
							"PathInContainer": "/dev/gpiomem",
							"CgroupPermissions": "rwm"
						}, {
							"PathOnHost": "/dev/i2c-1",
							"PathInContainer": "/dev/i2c-1",
							"CgroupPermissions": "rwm"
						}
					]
				},
				"ssh_resource": {
					"name": "fe887d46-90af-435e-b7f2-7395472b5c11",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"ansible_resource": {
					"name": "da0511af-f1f3-4fe4-872a-f69a504bd745",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"required_execution_port": {
					"name": "demandDocker",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "70774eb3-31c9-444b-be5d-cb1ce9c91e44",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880"
					}
				],
				"required_communication_port": [{
						"name": "45c3996b-c598-493e-87ec-4218421b8f3c",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80",
						"isMandatory": false
					}
				],
				"nr_flow": [],
				"path_flow": "",
				"packages": []
			}, {
				"_type": "/internal/node_red_flow",
				"name": "NodeRED-flow-113",
				"properties": [],
				"version": "0.0.1",
				"id": "3fef5042-7f68-4911-9eca-6f75e3555408",
				"provided_execution_port": [{
						"name": "1ca8d6cd-9074-46d2-ad7e-468d94d78feb",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "e8e623eb-d6cf-4017-9c8f-3c7864a398ea",
					"image": "",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880"
					},
					"devices": {
						"PathOnHost": "",
						"PathInContainer": "",
						"CgroupPermissions": "rwm"
					}
				},
				"ssh_resource": {
					"name": "01bdbcb9-0d05-43cc-9a67-cd92629b170d",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"stopCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"ansible_resource": {
					"name": "cf5266f4-8650-4e0f-b2c7-673ed7e660b8",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"required_execution_port": {
					"name": "demandNodeRED",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "ac315cc7-4fea-440e-b027-c8bb9060b588",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80"
					}
				],
				"required_communication_port": [{
						"name": "310b6fa0-3b30-4905-8c82-5549155fe583",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880",
						"isMandatory": false
					}
				],
				"nr_flow": [{
						"id": "eac2018f.030113",
						"type": "rpi-gpio out",
						"z": "eac2018f.010113",
						"name": "D 16",
						"pin": "36",
						"set": true,
						"level": "0",
						"freq": "",
						"out": "out",
						"x": 610,
						"y": 140,
						"wires": []
					}, {
						"id": "eac2018f.040113",
						"type": "rpi-gpio in",
						"z": "eac2018f.010113",
						"name": "D 17",
						"pin": "11",
						"intype": "tri",
						"debounce": "25",
						"read": true,
						"x": 90,
						"y": 80,
						"wires": [["eac2018f.180113"]]
					}, {
						"id": "eac2018f.050113",
						"type": "grove-chainable-rgb-led",
						"z": "eac2018f.010113",
						"name": "",
						"pin": "5",
						"x": 560,
						"y": 200,
						"wires": []
					}, {
						"id": "eac2018f.070113",
						"type": "mqtt in",
						"z": "eac2018f.010113",
						"name": "",
						"topic": "/grove/button_led",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020113",
						"x": 130,
						"y": 140,
						"wires": [["eac2018f.150113"]]
					}, {
						"id": "eac2018f.080113",
						"type": "mqtt in",
						"z": "eac2018f.010113",
						"name": "",
						"topic": "/grove/rgb_led",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020113",
						"x": 120,
						"y": 200,
						"wires": [["eac2018f.170113"]]
					}, {
						"id": "eac2018f.060113",
						"type": "mqtt out",
						"z": "eac2018f.010113",
						"name": "",
						"topic": "/grove/button",
						"qos": "",
						"retain": "",
						"broker": "eac2018f.020113",
						"x": 580,
						"y": 80,
						"wires": []
					}, {
						"id": "eac2018f.090113",
						"type": "mosca in",
						"z": "eac2018f.010113",
						"mqtt_port": 1883,
						"mqtt_ws_port": 8080,
						"name": "",
						"username": "",
						"password": "",
						"dburl": "",
						"x": 110,
						"y": 40,
						"wires": [[]]
					}, {
						"id": "eac2018f.100113",
						"type": "grove-4-digit-display",
						"z": "eac2018f.010113",
						"name": "",
						"pin": "22",
						"x": 580,
						"y": 260,
						"wires": []
					}, {
						"id": "eac2018f.110113",
						"type": "mqtt in",
						"z": "eac2018f.010113",
						"name": "",
						"topic": "/grove/4digit_display",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020113",
						"x": 130,
						"y": 260,
						"wires": [["eac2018f.160113"]]
					}, {
						"id": "eac2018f.120113",
						"type": "inject",
						"z": "eac2018f.010113",
						"name": "Startup Inject",
						"topic": "",
						"payload": "0",
						"payloadType": "num",
						"repeat": "",
						"crontab": "",
						"once": true,
						"onceDelay": "1",
						"x": 120,
						"y": 420,
						"wires": [["eac2018f.130113", "eac2018f.200113", "eac2018f.220113", "eac2018f.230113"]]
					}, {
						"id": "eac2018f.130113",
						"type": "trigger",
						"z": "eac2018f.010113",
						"op1": " 113",
						"op2": "    ",
						"op1type": "str",
						"op2type": "str",
						"duration": "5",
						"extend": false,
						"units": "s",
						"reset": "",
						"bytopic": "all",
						"name": "",
						"x": 320,
						"y": 500,
						"wires": [["eac2018f.140113"]]
					}, {
						"id": "eac2018f.140113",
						"type": "grove-4-digit-display",
						"z": "eac2018f.010113",
						"name": "",
						"pin": "22",
						"x": 500,
						"y": 500,
						"wires": []
					}, {
						"id": "eac2018f.150113",
						"type": "function",
						"z": "eac2018f.010113",
						"name": "Store ButtonLed state",
						"func": "flow.set('ButtonLed', msg.payload);\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 340,
						"y": 140,
						"wires": [["eac2018f.030113"]]
					}, {
						"id": "eac2018f.160113",
						"type": "function",
						"z": "eac2018f.010113",
						"name": "Store Display state",
						"func": "try {\n    val = Number(msg.payload);\n} catch (error) {\n    val = msg.payload;\n}\n\nif (Number.isInteger(val)) {\n    if (val > 9999) {\n        val = 0\n    }\n    if (val === 0) {\n        strval = \"    \";\n    } else if (val < 10) {\n        strval = \"   \" + val;\n    } else if (val < 100) {\n        strval = \"  \" + val;\n    } else if (val < 1000) {\n        strval = \" \" + val;\n    } else {\n        strval = val;\n    }\n    flow.set('Display', val);\n    msg.payload = strval;\n}\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 330,
						"y": 260,
						"wires": [["eac2018f.100113"]]
					}, {
						"id": "eac2018f.170113",
						"type": "function",
						"z": "eac2018f.010113",
						"name": "Store RGBLED state",
						"func": "if (msg.payload === \"\") return null;\non = -1;\ntry {\n    msg.payload = JSON.parse(msg.payload)\n    on = Number(msg.payload.on)\n    val = Number(msg.payload.val);\n    flow.set('RGBLed', {'on': on, 'val': val});\n} catch (error) {\n    val = msg.payload;\n}\n\nif (on === 0) {\n    msg.payload = \"rgb(0, 0, 0)\";\n} else if (on === 1) {\n    if (val === -1) {\n        msg.payload = \"rgb(255, 255, 255)\";\n    } else if (Number.isInteger(val)) {\n        val = val % 360;\n        msg.payload = \"hsv(\" + val + \",100%, 50%)\";\n    } else {\n        return null;\n    }\n}\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 340,
						"y": 200,
						"wires": [["eac2018f.050113"]]
					}, {
						"id": "eac2018f.180113",
						"type": "function",
						"z": "eac2018f.010113",
						"name": "Emit Sensors/Actuators states",
						"func": "buttonLed = flow.get('ButtonLed') || 0;\nrgbLed = flow.get('RGBLed') || {'on': 0, 'val': -1};\ndisplay = flow.get('Display') || 0;\nbutton = msg.payload;\n\nmsg.payload = {\n        \"button\": button,\n        \"buttonLed\": buttonLed,\n        \"rgbLed\": rgbLed,\n        \"display\": display\n}\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 330,
						"y": 80,
						"wires": [["eac2018f.060113"]]
					}, {
						"id": "eac2018f.190113",
						"type": "comment",
						"z": "eac2018f.010113",
						"name": "Init Phase",
						"info": "",
						"x": 80,
						"y": 360,
						"wires": []
					}, {
						"id": "eac2018f.200113",
						"type": "function",
						"z": "eac2018f.010113",
						"name": "Reset flow variables",
						"func": "flow.set('ButtonLed', 0);\nflow.set(\"RGBLed\", {'on': 0, 'val': -1});\nflow.set(\"Display\", 0);\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 360,
						"y": 380,
						"wires": [[]]
					}, {
						"id": "eac2018f.210113",
						"type": "grove-chainable-rgb-led",
						"z": "eac2018f.010113",
						"name": "",
						"pin": "5",
						"x": 520,
						"y": 460,
						"wires": []
					}, {
						"id": "eac2018f.220113",
						"type": "rpi-gpio out",
						"z": "eac2018f.010113",
						"name": "D 16",
						"pin": "36",
						"set": true,
						"level": "0",
						"freq": "",
						"out": "out",
						"x": 470,
						"y": 420,
						"wires": []
					}, {
						"id": "eac2018f.230113",
						"type": "function",
						"z": "eac2018f.010113",
						"name": "Switch off",
						"func": "msg.payload = \"rgb(0,0,0)\"\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 320,
						"y": 460,
						"wires": [["eac2018f.210113"]]
					}, {
						"id": "eac2018f.020113",
						"type": "mqtt-broker",
						"z": "eac2018f.010101",
						"name": "",
						"broker": "localhost",
						"port": "1883",
						"clientid": "",
						"usetls": false,
						"compatmode": true,
						"keepalive": "60",
						"cleansession": true,
						"birthTopic": "",
						"birthQos": "0",
						"birthPayload": "",
						"closeTopic": "",
						"closeQos": "0",
						"closePayload": "",
						"willTopic": "",
						"willQos": "0",
						"willPayload": ""
					}
				],
				"path_flow": "",
				"packages": []
			}, {
				"_type": "/infra/docker_host",
				"name": "RPiZero-114",
				"properties": [],
				"version": "0.0.1",
				"id": "c90b3035-d545-4985-9c2d-e28da1aa652f",
				"provided_execution_port": [{
						"name": "offerDocker",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"ip": "192.168.43.114",
				"port": ["2376"],
				"credentials": {
					"username": "ubuntu",
					"password": "",
					"sshkey": ""
				},
				"monitoring_agent": "none"
			}, {
				"_type": "/internal/node_red",
				"name": "NodeRED-114",
				"properties": [],
				"version": "0.0.1",
				"id": "520328a8-d098-4ace-a436-2b0f2a097b64",
				"provided_execution_port": [{
						"name": "offerNodeRED",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "DockerRaspberryPiZeroGroveBaseHat",
					"image": "node-docker-raspberry-zero:armv6",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880",
						"1883": "1883"
					},
					"mounts": {
						"src": "/sys",
						"tgt": "/sys"
					},
					"devices": [{
							"PathOnHost": "/dev/mem",
							"PathInContainer": "/dev/mem",
							"CgroupPermissions": "rwm"
						}, {
							"PathOnHost": "/dev/gpiomem",
							"PathInContainer": "/dev/gpiomem",
							"CgroupPermissions": "rwm"
						}, {
							"PathOnHost": "/dev/i2c-1",
							"PathInContainer": "/dev/i2c-1",
							"CgroupPermissions": "rwm"
						}
					]
				},
				"ssh_resource": {
					"name": "9aed8b0a-c185-4749-93d0-03f49fc04e94",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"ansible_resource": {
					"name": "8aadacde-9f0b-4c8d-8ca9-d5f05c49beb9",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"required_execution_port": {
					"name": "demandDocker",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "b17cf53b-657c-421a-96ac-87df3184667f",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880"
					}
				],
				"required_communication_port": [{
						"name": "acb1bd86-7a22-41ad-9549-3393abc7e43b",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80",
						"isMandatory": false
					}
				],
				"nr_flow": [],
				"path_flow": "",
				"packages": []
			}, {
				"_type": "/internal/node_red_flow",
				"name": "NodeRED-flow-114",
				"properties": [],
				"version": "0.0.1",
				"id": "8e179391-ec3d-4812-b53b-663e3f5aa51a",
				"provided_execution_port": [{
						"name": "b26fe21f-1daf-4a57-b941-32ca02f74774",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "94915103-6caa-442e-ad7d-16b4b93867f1",
					"image": "",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880"
					},
					"devices": {
						"PathOnHost": "",
						"PathInContainer": "",
						"CgroupPermissions": "rwm"
					}
				},
				"ssh_resource": {
					"name": "295954f6-542c-44d2-8d1a-b1303e9ef5e6",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"stopCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"ansible_resource": {
					"name": "9f41f904-989c-4c93-b664-2b2817d7d25a",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"required_execution_port": {
					"name": "demandNodeRED",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "2cc11288-ea41-444b-a90a-8855613e7d88",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80"
					}
				],
				"required_communication_port": [{
						"name": "1d31b840-0e5e-4782-83b9-9eb7bb0b6eb7",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880",
						"isMandatory": false
					}
				],
				"nr_flow": [{
						"id": "eac2018f.030114",
						"type": "rpi-gpio out",
						"z": "eac2018f.010114",
						"name": "D 16",
						"pin": "36",
						"set": true,
						"level": "0",
						"freq": "",
						"out": "out",
						"x": 610,
						"y": 140,
						"wires": []
					}, {
						"id": "eac2018f.040114",
						"type": "rpi-gpio in",
						"z": "eac2018f.010114",
						"name": "D 17",
						"pin": "11",
						"intype": "tri",
						"debounce": "25",
						"read": true,
						"x": 90,
						"y": 80,
						"wires": [["eac2018f.180114"]]
					}, {
						"id": "eac2018f.050114",
						"type": "grove-chainable-rgb-led",
						"z": "eac2018f.010114",
						"name": "",
						"pin": "5",
						"x": 560,
						"y": 200,
						"wires": []
					}, {
						"id": "eac2018f.070114",
						"type": "mqtt in",
						"z": "eac2018f.010114",
						"name": "",
						"topic": "/grove/button_led",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020114",
						"x": 130,
						"y": 140,
						"wires": [["eac2018f.150114"]]
					}, {
						"id": "eac2018f.080114",
						"type": "mqtt in",
						"z": "eac2018f.010114",
						"name": "",
						"topic": "/grove/rgb_led",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020114",
						"x": 120,
						"y": 200,
						"wires": [["eac2018f.170114"]]
					}, {
						"id": "eac2018f.060114",
						"type": "mqtt out",
						"z": "eac2018f.010114",
						"name": "",
						"topic": "/grove/button",
						"qos": "",
						"retain": "",
						"broker": "eac2018f.020114",
						"x": 580,
						"y": 80,
						"wires": []
					}, {
						"id": "eac2018f.090114",
						"type": "mosca in",
						"z": "eac2018f.010114",
						"mqtt_port": 1883,
						"mqtt_ws_port": 8080,
						"name": "",
						"username": "",
						"password": "",
						"dburl": "",
						"x": 110,
						"y": 40,
						"wires": [[]]
					}, {
						"id": "eac2018f.100114",
						"type": "grove-4-digit-display",
						"z": "eac2018f.010114",
						"name": "",
						"pin": "22",
						"x": 580,
						"y": 260,
						"wires": []
					}, {
						"id": "eac2018f.110114",
						"type": "mqtt in",
						"z": "eac2018f.010114",
						"name": "",
						"topic": "/grove/4digit_display",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020114",
						"x": 130,
						"y": 260,
						"wires": [["eac2018f.160114"]]
					}, {
						"id": "eac2018f.120114",
						"type": "inject",
						"z": "eac2018f.010114",
						"name": "Startup Inject",
						"topic": "",
						"payload": "0",
						"payloadType": "num",
						"repeat": "",
						"crontab": "",
						"once": true,
						"onceDelay": "1",
						"x": 120,
						"y": 420,
						"wires": [["eac2018f.130114", "eac2018f.200114", "eac2018f.220114", "eac2018f.230114"]]
					}, {
						"id": "eac2018f.130114",
						"type": "trigger",
						"z": "eac2018f.010114",
						"op1": " 114",
						"op2": "    ",
						"op1type": "str",
						"op2type": "str",
						"duration": "5",
						"extend": false,
						"units": "s",
						"reset": "",
						"bytopic": "all",
						"name": "",
						"x": 320,
						"y": 500,
						"wires": [["eac2018f.140114"]]
					}, {
						"id": "eac2018f.140114",
						"type": "grove-4-digit-display",
						"z": "eac2018f.010114",
						"name": "",
						"pin": "22",
						"x": 500,
						"y": 500,
						"wires": []
					}, {
						"id": "eac2018f.150114",
						"type": "function",
						"z": "eac2018f.010114",
						"name": "Store ButtonLed state",
						"func": "flow.set('ButtonLed', msg.payload);\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 340,
						"y": 140,
						"wires": [["eac2018f.030114"]]
					}, {
						"id": "eac2018f.160114",
						"type": "function",
						"z": "eac2018f.010114",
						"name": "Store Display state",
						"func": "try {\n    val = Number(msg.payload);\n} catch (error) {\n    val = msg.payload;\n}\n\nif (Number.isInteger(val)) {\n    if (val > 9999) {\n        val = 0\n    }\n    if (val === 0) {\n        strval = \"    \";\n    } else if (val < 10) {\n        strval = \"   \" + val;\n    } else if (val < 100) {\n        strval = \"  \" + val;\n    } else if (val < 1000) {\n        strval = \" \" + val;\n    } else {\n        strval = val;\n    }\n    flow.set('Display', val);\n    msg.payload = strval;\n}\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 330,
						"y": 260,
						"wires": [["eac2018f.100114"]]
					}, {
						"id": "eac2018f.170114",
						"type": "function",
						"z": "eac2018f.010114",
						"name": "Store RGBLED state",
						"func": "if (msg.payload === \"\") return null;\non = -1;\ntry {\n    msg.payload = JSON.parse(msg.payload)\n    on = Number(msg.payload.on)\n    val = Number(msg.payload.val);\n    flow.set('RGBLed', {'on': on, 'val': val});\n} catch (error) {\n    val = msg.payload;\n}\n\nif (on === 0) {\n    msg.payload = \"rgb(0, 0, 0)\";\n} else if (on === 1) {\n    if (val === -1) {\n        msg.payload = \"rgb(255, 255, 255)\";\n    } else if (Number.isInteger(val)) {\n        val = val % 360;\n        msg.payload = \"hsv(\" + val + \",100%, 50%)\";\n    } else {\n        return null;\n    }\n}\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 340,
						"y": 200,
						"wires": [["eac2018f.050114"]]
					}, {
						"id": "eac2018f.180114",
						"type": "function",
						"z": "eac2018f.010114",
						"name": "Emit Sensors/Actuators states",
						"func": "buttonLed = flow.get('ButtonLed') || 0;\nrgbLed = flow.get('RGBLed') || {'on': 0, 'val': -1};\ndisplay = flow.get('Display') || 0;\nbutton = msg.payload;\n\nmsg.payload = {\n        \"button\": button,\n        \"buttonLed\": buttonLed,\n        \"rgbLed\": rgbLed,\n        \"display\": display\n}\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 330,
						"y": 80,
						"wires": [["eac2018f.060114"]]
					}, {
						"id": "eac2018f.190114",
						"type": "comment",
						"z": "eac2018f.010114",
						"name": "Init Phase",
						"info": "",
						"x": 80,
						"y": 360,
						"wires": []
					}, {
						"id": "eac2018f.200114",
						"type": "function",
						"z": "eac2018f.010114",
						"name": "Reset flow variables",
						"func": "flow.set('ButtonLed', 0);\nflow.set(\"RGBLed\", {'on': 0, 'val': -1});\nflow.set(\"Display\", 0);\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 360,
						"y": 380,
						"wires": [[]]
					}, {
						"id": "eac2018f.210114",
						"type": "grove-chainable-rgb-led",
						"z": "eac2018f.010114",
						"name": "",
						"pin": "5",
						"x": 520,
						"y": 460,
						"wires": []
					}, {
						"id": "eac2018f.220114",
						"type": "rpi-gpio out",
						"z": "eac2018f.010114",
						"name": "D 16",
						"pin": "36",
						"set": true,
						"level": "0",
						"freq": "",
						"out": "out",
						"x": 470,
						"y": 420,
						"wires": []
					}, {
						"id": "eac2018f.230114",
						"type": "function",
						"z": "eac2018f.010114",
						"name": "Switch off",
						"func": "msg.payload = \"rgb(0,0,0)\"\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 320,
						"y": 460,
						"wires": [["eac2018f.210114"]]
					}, {
						"id": "eac2018f.020114",
						"type": "mqtt-broker",
						"z": "eac2018f.010101",
						"name": "",
						"broker": "localhost",
						"port": "1883",
						"clientid": "",
						"usetls": false,
						"compatmode": true,
						"keepalive": "60",
						"cleansession": true,
						"birthTopic": "",
						"birthQos": "0",
						"birthPayload": "",
						"closeTopic": "",
						"closeQos": "0",
						"closePayload": "",
						"willTopic": "",
						"willQos": "0",
						"willPayload": ""
					}
				],
				"path_flow": "",
				"packages": []
			}, {
				"_type": "/infra/docker_host",
				"name": "RPiZero-115",
				"properties": [],
				"version": "0.0.1",
				"id": "884edc00-332c-4368-8fc7-3d2ef8d838f8",
				"provided_execution_port": [{
						"name": "offerDocker",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"ip": "192.168.43.115",
				"port": ["2376"],
				"credentials": {
					"username": "ubuntu",
					"password": "",
					"sshkey": ""
				},
				"monitoring_agent": "none"
			}, {
				"_type": "/internal/node_red",
				"name": "NodeRED-115",
				"properties": [],
				"version": "0.0.1",
				"id": "d6633706-df56-45ce-b9e4-cc3bc2b0a002",
				"provided_execution_port": [{
						"name": "offerNodeRED",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "DockerRaspberryPiZeroGroveBaseHat",
					"image": "node-docker-raspberry-zero:armv6",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880",
						"1883": "1883"
					},
					"mounts": {
						"src": "/sys",
						"tgt": "/sys"
					},
					"devices": [{
							"PathOnHost": "/dev/mem",
							"PathInContainer": "/dev/mem",
							"CgroupPermissions": "rwm"
						}, {
							"PathOnHost": "/dev/gpiomem",
							"PathInContainer": "/dev/gpiomem",
							"CgroupPermissions": "rwm"
						}, {
							"PathOnHost": "/dev/i2c-1",
							"PathInContainer": "/dev/i2c-1",
							"CgroupPermissions": "rwm"
						}
					]
				},
				"ssh_resource": {
					"name": "135f5236-9692-4297-bbf1-f6ec8a8ffcaa",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"ansible_resource": {
					"name": "1dd68cf9-159b-4941-9a2b-90647ed2572f",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"required_execution_port": {
					"name": "demandDocker",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "72096195-7d92-4859-9efa-1db1ec87495c",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880"
					}
				],
				"required_communication_port": [{
						"name": "ab2cd195-6f1a-4086-8857-34dd58c9e4fc",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80",
						"isMandatory": false
					}
				],
				"nr_flow": [],
				"path_flow": "",
				"packages": []
			}, {
				"_type": "/internal/node_red_flow",
				"name": "NodeRED-flow-115",
				"properties": [],
				"version": "0.0.1",
				"id": "a89607a8-9a69-4f5e-9cfa-1a7b5a0e590a",
				"provided_execution_port": [{
						"name": "17bb5280-6a8a-415b-9010-6f32a0a232b7",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "282d6c7d-8214-445f-90b4-24fc5773fedc",
					"image": "",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880"
					},
					"devices": {
						"PathOnHost": "",
						"PathInContainer": "",
						"CgroupPermissions": "rwm"
					}
				},
				"ssh_resource": {
					"name": "9a83eb9b-8221-4025-bb46-03accabd5b42",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"stopCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"ansible_resource": {
					"name": "449cd8ea-6129-454d-8b20-e29dac4dd996",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"required_execution_port": {
					"name": "demandNodeRED",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "3d65ad01-1900-4efc-82b1-46953b6c854f",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80"
					}
				],
				"required_communication_port": [{
						"name": "8ac1960f-2f1c-4a41-af66-8388dbaff30a",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880",
						"isMandatory": false
					}
				],
				"nr_flow": [{
						"id": "eac2018f.030115",
						"type": "rpi-gpio out",
						"z": "eac2018f.010115",
						"name": "D 16",
						"pin": "36",
						"set": true,
						"level": "0",
						"freq": "",
						"out": "out",
						"x": 610,
						"y": 140,
						"wires": []
					}, {
						"id": "eac2018f.040115",
						"type": "rpi-gpio in",
						"z": "eac2018f.010115",
						"name": "D 17",
						"pin": "11",
						"intype": "tri",
						"debounce": "25",
						"read": true,
						"x": 90,
						"y": 80,
						"wires": [["eac2018f.180115"]]
					}, {
						"id": "eac2018f.050115",
						"type": "grove-chainable-rgb-led",
						"z": "eac2018f.010115",
						"name": "",
						"pin": "5",
						"x": 560,
						"y": 200,
						"wires": []
					}, {
						"id": "eac2018f.070115",
						"type": "mqtt in",
						"z": "eac2018f.010115",
						"name": "",
						"topic": "/grove/button_led",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020115",
						"x": 130,
						"y": 140,
						"wires": [["eac2018f.150115"]]
					}, {
						"id": "eac2018f.080115",
						"type": "mqtt in",
						"z": "eac2018f.010115",
						"name": "",
						"topic": "/grove/rgb_led",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020115",
						"x": 120,
						"y": 200,
						"wires": [["eac2018f.170115"]]
					}, {
						"id": "eac2018f.060115",
						"type": "mqtt out",
						"z": "eac2018f.010115",
						"name": "",
						"topic": "/grove/button",
						"qos": "",
						"retain": "",
						"broker": "eac2018f.020115",
						"x": 580,
						"y": 80,
						"wires": []
					}, {
						"id": "eac2018f.090115",
						"type": "mosca in",
						"z": "eac2018f.010115",
						"mqtt_port": 1883,
						"mqtt_ws_port": 8080,
						"name": "",
						"username": "",
						"password": "",
						"dburl": "",
						"x": 110,
						"y": 40,
						"wires": [[]]
					}, {
						"id": "eac2018f.100115",
						"type": "grove-4-digit-display",
						"z": "eac2018f.010115",
						"name": "",
						"pin": "22",
						"x": 580,
						"y": 260,
						"wires": []
					}, {
						"id": "eac2018f.110115",
						"type": "mqtt in",
						"z": "eac2018f.010115",
						"name": "",
						"topic": "/grove/4digit_display",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020115",
						"x": 130,
						"y": 260,
						"wires": [["eac2018f.160115"]]
					}, {
						"id": "eac2018f.120115",
						"type": "inject",
						"z": "eac2018f.010115",
						"name": "Startup Inject",
						"topic": "",
						"payload": "0",
						"payloadType": "num",
						"repeat": "",
						"crontab": "",
						"once": true,
						"onceDelay": "1",
						"x": 120,
						"y": 420,
						"wires": [["eac2018f.130115", "eac2018f.200115", "eac2018f.220115", "eac2018f.230115"]]
					}, {
						"id": "eac2018f.130115",
						"type": "trigger",
						"z": "eac2018f.010115",
						"op1": " 115",
						"op2": "    ",
						"op1type": "str",
						"op2type": "str",
						"duration": "5",
						"extend": false,
						"units": "s",
						"reset": "",
						"bytopic": "all",
						"name": "",
						"x": 320,
						"y": 500,
						"wires": [["eac2018f.140115"]]
					}, {
						"id": "eac2018f.140115",
						"type": "grove-4-digit-display",
						"z": "eac2018f.010115",
						"name": "",
						"pin": "22",
						"x": 500,
						"y": 500,
						"wires": []
					}, {
						"id": "eac2018f.150115",
						"type": "function",
						"z": "eac2018f.010115",
						"name": "Store ButtonLed state",
						"func": "flow.set('ButtonLed', msg.payload);\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 340,
						"y": 140,
						"wires": [["eac2018f.030115"]]
					}, {
						"id": "eac2018f.160115",
						"type": "function",
						"z": "eac2018f.010115",
						"name": "Store Display state",
						"func": "try {\n    val = Number(msg.payload);\n} catch (error) {\n    val = msg.payload;\n}\n\nif (Number.isInteger(val)) {\n    if (val > 9999) {\n        val = 0\n    }\n    if (val === 0) {\n        strval = \"    \";\n    } else if (val < 10) {\n        strval = \"   \" + val;\n    } else if (val < 100) {\n        strval = \"  \" + val;\n    } else if (val < 1000) {\n        strval = \" \" + val;\n    } else {\n        strval = val;\n    }\n    flow.set('Display', val);\n    msg.payload = strval;\n}\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 330,
						"y": 260,
						"wires": [["eac2018f.100115"]]
					}, {
						"id": "eac2018f.170115",
						"type": "function",
						"z": "eac2018f.010115",
						"name": "Store RGBLED state",
						"func": "if (msg.payload === \"\") return null;\non = -1;\ntry {\n    msg.payload = JSON.parse(msg.payload)\n    on = Number(msg.payload.on)\n    val = Number(msg.payload.val);\n    flow.set('RGBLed', {'on': on, 'val': val});\n} catch (error) {\n    val = msg.payload;\n}\n\nif (on === 0) {\n    msg.payload = \"rgb(0, 0, 0)\";\n} else if (on === 1) {\n    if (val === -1) {\n        msg.payload = \"rgb(255, 255, 255)\";\n    } else if (Number.isInteger(val)) {\n        val = val % 360;\n        msg.payload = \"hsv(\" + val + \",100%, 50%)\";\n    } else {\n        return null;\n    }\n}\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 340,
						"y": 200,
						"wires": [["eac2018f.050115"]]
					}, {
						"id": "eac2018f.180115",
						"type": "function",
						"z": "eac2018f.010115",
						"name": "Emit Sensors/Actuators states",
						"func": "buttonLed = flow.get('ButtonLed') || 0;\nrgbLed = flow.get('RGBLed') || {'on': 0, 'val': -1};\ndisplay = flow.get('Display') || 0;\nbutton = msg.payload;\n\nmsg.payload = {\n        \"button\": button,\n        \"buttonLed\": buttonLed,\n        \"rgbLed\": rgbLed,\n        \"display\": display\n}\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 330,
						"y": 80,
						"wires": [["eac2018f.060115"]]
					}, {
						"id": "eac2018f.190115",
						"type": "comment",
						"z": "eac2018f.010115",
						"name": "Init Phase",
						"info": "",
						"x": 80,
						"y": 360,
						"wires": []
					}, {
						"id": "eac2018f.200115",
						"type": "function",
						"z": "eac2018f.010115",
						"name": "Reset flow variables",
						"func": "flow.set('ButtonLed', 0);\nflow.set(\"RGBLed\", {'on': 0, 'val': -1});\nflow.set(\"Display\", 0);\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 360,
						"y": 380,
						"wires": [[]]
					}, {
						"id": "eac2018f.210115",
						"type": "grove-chainable-rgb-led",
						"z": "eac2018f.010115",
						"name": "",
						"pin": "5",
						"x": 520,
						"y": 460,
						"wires": []
					}, {
						"id": "eac2018f.220115",
						"type": "rpi-gpio out",
						"z": "eac2018f.010115",
						"name": "D 16",
						"pin": "36",
						"set": true,
						"level": "0",
						"freq": "",
						"out": "out",
						"x": 470,
						"y": 420,
						"wires": []
					}, {
						"id": "eac2018f.230115",
						"type": "function",
						"z": "eac2018f.010115",
						"name": "Switch off",
						"func": "msg.payload = \"rgb(0,0,0)\"\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 320,
						"y": 460,
						"wires": [["eac2018f.210115"]]
					}, {
						"id": "eac2018f.020115",
						"type": "mqtt-broker",
						"z": "eac2018f.010101",
						"name": "",
						"broker": "localhost",
						"port": "1883",
						"clientid": "",
						"usetls": false,
						"compatmode": true,
						"keepalive": "60",
						"cleansession": true,
						"birthTopic": "",
						"birthQos": "0",
						"birthPayload": "",
						"closeTopic": "",
						"closeQos": "0",
						"closePayload": "",
						"willTopic": "",
						"willQos": "0",
						"willPayload": ""
					}
				],
				"path_flow": "",
				"packages": []
			}, {
				"_type": "/infra/docker_host",
				"name": "RPiZero-116",
				"properties": [],
				"version": "0.0.1",
				"id": "8aa3ae8c-54c7-4a05-a766-b3991093abad",
				"provided_execution_port": [{
						"name": "offerDocker",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"ip": "192.168.43.116",
				"port": ["2376"],
				"credentials": {
					"username": "ubuntu",
					"password": "",
					"sshkey": ""
				},
				"monitoring_agent": "none"
			}, {
				"_type": "/internal/node_red",
				"name": "NodeRED-116",
				"properties": [],
				"version": "0.0.1",
				"id": "61f7ed04-4477-4437-870c-5283b4c70f05",
				"provided_execution_port": [{
						"name": "offerNodeRED",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "DockerRaspberryPiZeroGroveBaseHat",
					"image": "node-docker-raspberry-zero:armv6",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880",
						"1883": "1883"
					},
					"mounts": {
						"src": "/sys",
						"tgt": "/sys"
					},
					"devices": [{
							"PathOnHost": "/dev/mem",
							"PathInContainer": "/dev/mem",
							"CgroupPermissions": "rwm"
						}, {
							"PathOnHost": "/dev/gpiomem",
							"PathInContainer": "/dev/gpiomem",
							"CgroupPermissions": "rwm"
						}, {
							"PathOnHost": "/dev/i2c-1",
							"PathInContainer": "/dev/i2c-1",
							"CgroupPermissions": "rwm"
						}
					]
				},
				"ssh_resource": {
					"name": "eebfb4ce-7609-474c-a622-df58665b1667",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"ansible_resource": {
					"name": "12d6d3a9-e97a-477d-9a0f-03b03b7abcd3",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"required_execution_port": {
					"name": "demandDocker",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "392d6ea8-b7cf-4fc9-b98b-2aaa0b7e1f50",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880"
					}
				],
				"required_communication_port": [{
						"name": "2303e1c3-7f69-4302-952b-7d52a10547b5",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80",
						"isMandatory": false
					}
				],
				"nr_flow": [],
				"path_flow": "",
				"packages": []
			}, {
				"_type": "/internal/node_red_flow",
				"name": "NodeRED-flow-116",
				"properties": [],
				"version": "0.0.1",
				"id": "378b2291-dcfa-45bf-95a0-7e8cc3ca27ac",
				"provided_execution_port": [{
						"name": "9f196fed-0a29-4d1d-90fb-ed5b1e88c88b",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "3ecd891b-2f83-4a05-a812-4880027105c1",
					"image": "",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880"
					},
					"devices": {
						"PathOnHost": "",
						"PathInContainer": "",
						"CgroupPermissions": "rwm"
					}
				},
				"ssh_resource": {
					"name": "e6fcf5aa-6481-4f1e-b75b-be60de07097b",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"stopCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"ansible_resource": {
					"name": "45b5eab0-0f46-4657-b1b9-d907bfe1d041",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"required_execution_port": {
					"name": "demandNodeRED",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "8bbb37fc-b9c6-468e-af9a-0ace04f11be9",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80"
					}
				],
				"required_communication_port": [{
						"name": "0977de48-1586-48db-acd1-9b8e726997a2",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880",
						"isMandatory": false
					}
				],
				"nr_flow": [{
						"id": "eac2018f.030116",
						"type": "rpi-gpio out",
						"z": "eac2018f.010116",
						"name": "D 16",
						"pin": "36",
						"set": true,
						"level": "0",
						"freq": "",
						"out": "out",
						"x": 610,
						"y": 140,
						"wires": []
					}, {
						"id": "eac2018f.040116",
						"type": "rpi-gpio in",
						"z": "eac2018f.010116",
						"name": "D 17",
						"pin": "11",
						"intype": "tri",
						"debounce": "25",
						"read": true,
						"x": 90,
						"y": 80,
						"wires": [["eac2018f.180116"]]
					}, {
						"id": "eac2018f.050116",
						"type": "grove-chainable-rgb-led",
						"z": "eac2018f.010116",
						"name": "",
						"pin": "5",
						"x": 560,
						"y": 200,
						"wires": []
					}, {
						"id": "eac2018f.070116",
						"type": "mqtt in",
						"z": "eac2018f.010116",
						"name": "",
						"topic": "/grove/button_led",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020116",
						"x": 130,
						"y": 140,
						"wires": [["eac2018f.150116"]]
					}, {
						"id": "eac2018f.080116",
						"type": "mqtt in",
						"z": "eac2018f.010116",
						"name": "",
						"topic": "/grove/rgb_led",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020116",
						"x": 120,
						"y": 200,
						"wires": [["eac2018f.170116"]]
					}, {
						"id": "eac2018f.060116",
						"type": "mqtt out",
						"z": "eac2018f.010116",
						"name": "",
						"topic": "/grove/button",
						"qos": "",
						"retain": "",
						"broker": "eac2018f.020116",
						"x": 580,
						"y": 80,
						"wires": []
					}, {
						"id": "eac2018f.090116",
						"type": "mosca in",
						"z": "eac2018f.010116",
						"mqtt_port": 1883,
						"mqtt_ws_port": 8080,
						"name": "",
						"username": "",
						"password": "",
						"dburl": "",
						"x": 110,
						"y": 40,
						"wires": [[]]
					}, {
						"id": "eac2018f.100116",
						"type": "grove-4-digit-display",
						"z": "eac2018f.010116",
						"name": "",
						"pin": "22",
						"x": 580,
						"y": 260,
						"wires": []
					}, {
						"id": "eac2018f.110116",
						"type": "mqtt in",
						"z": "eac2018f.010116",
						"name": "",
						"topic": "/grove/4digit_display",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2018f.020116",
						"x": 130,
						"y": 260,
						"wires": [["eac2018f.160116"]]
					}, {
						"id": "eac2018f.120116",
						"type": "inject",
						"z": "eac2018f.010116",
						"name": "Startup Inject",
						"topic": "",
						"payload": "0",
						"payloadType": "num",
						"repeat": "",
						"crontab": "",
						"once": true,
						"onceDelay": "1",
						"x": 120,
						"y": 420,
						"wires": [["eac2018f.130116", "eac2018f.200116", "eac2018f.220116", "eac2018f.230116"]]
					}, {
						"id": "eac2018f.130116",
						"type": "trigger",
						"z": "eac2018f.010116",
						"op1": " 116",
						"op2": "    ",
						"op1type": "str",
						"op2type": "str",
						"duration": "5",
						"extend": false,
						"units": "s",
						"reset": "",
						"bytopic": "all",
						"name": "",
						"x": 320,
						"y": 500,
						"wires": [["eac2018f.140116"]]
					}, {
						"id": "eac2018f.140116",
						"type": "grove-4-digit-display",
						"z": "eac2018f.010116",
						"name": "",
						"pin": "22",
						"x": 500,
						"y": 500,
						"wires": []
					}, {
						"id": "eac2018f.150116",
						"type": "function",
						"z": "eac2018f.010116",
						"name": "Store ButtonLed state",
						"func": "flow.set('ButtonLed', msg.payload);\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 340,
						"y": 140,
						"wires": [["eac2018f.030116"]]
					}, {
						"id": "eac2018f.160116",
						"type": "function",
						"z": "eac2018f.010116",
						"name": "Store Display state",
						"func": "try {\n    val = Number(msg.payload);\n} catch (error) {\n    val = msg.payload;\n}\n\nif (Number.isInteger(val)) {\n    if (val > 9999) {\n        val = 0\n    }\n    if (val === 0) {\n        strval = \"    \";\n    } else if (val < 10) {\n        strval = \"   \" + val;\n    } else if (val < 100) {\n        strval = \"  \" + val;\n    } else if (val < 1000) {\n        strval = \" \" + val;\n    } else {\n        strval = val;\n    }\n    flow.set('Display', val);\n    msg.payload = strval;\n}\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 330,
						"y": 260,
						"wires": [["eac2018f.100116"]]
					}, {
						"id": "eac2018f.170116",
						"type": "function",
						"z": "eac2018f.010116",
						"name": "Store RGBLED state",
						"func": "if (msg.payload === \"\") return null;\non = -1;\ntry {\n    msg.payload = JSON.parse(msg.payload)\n    on = Number(msg.payload.on)\n    val = Number(msg.payload.val);\n    flow.set('RGBLed', {'on': on, 'val': val});\n} catch (error) {\n    val = msg.payload;\n}\n\nif (on === 0) {\n    msg.payload = \"rgb(0, 0, 0)\";\n} else if (on === 1) {\n    if (val === -1) {\n        msg.payload = \"rgb(255, 255, 255)\";\n    } else if (Number.isInteger(val)) {\n        val = val % 360;\n        msg.payload = \"hsv(\" + val + \",100%, 50%)\";\n    } else {\n        return null;\n    }\n}\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 340,
						"y": 200,
						"wires": [["eac2018f.050116"]]
					}, {
						"id": "eac2018f.180116",
						"type": "function",
						"z": "eac2018f.010116",
						"name": "Emit Sensors/Actuators states",
						"func": "buttonLed = flow.get('ButtonLed') || 0;\nrgbLed = flow.get('RGBLed') || {'on': 0, 'val': -1};\ndisplay = flow.get('Display') || 0;\nbutton = msg.payload;\n\nmsg.payload = {\n        \"button\": button,\n        \"buttonLed\": buttonLed,\n        \"rgbLed\": rgbLed,\n        \"display\": display\n}\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 330,
						"y": 80,
						"wires": [["eac2018f.060116"]]
					}, {
						"id": "eac2018f.190116",
						"type": "comment",
						"z": "eac2018f.010116",
						"name": "Init Phase",
						"info": "",
						"x": 80,
						"y": 360,
						"wires": []
					}, {
						"id": "eac2018f.200116",
						"type": "function",
						"z": "eac2018f.010116",
						"name": "Reset flow variables",
						"func": "flow.set('ButtonLed', 0);\nflow.set(\"RGBLed\", {'on': 0, 'val': -1});\nflow.set(\"Display\", 0);\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 360,
						"y": 380,
						"wires": [[]]
					}, {
						"id": "eac2018f.210116",
						"type": "grove-chainable-rgb-led",
						"z": "eac2018f.010116",
						"name": "",
						"pin": "5",
						"x": 520,
						"y": 460,
						"wires": []
					}, {
						"id": "eac2018f.220116",
						"type": "rpi-gpio out",
						"z": "eac2018f.010116",
						"name": "D 16",
						"pin": "36",
						"set": true,
						"level": "0",
						"freq": "",
						"out": "out",
						"x": 470,
						"y": 420,
						"wires": []
					}, {
						"id": "eac2018f.230116",
						"type": "function",
						"z": "eac2018f.010116",
						"name": "Switch off",
						"func": "msg.payload = \"rgb(0,0,0)\"\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 320,
						"y": 460,
						"wires": [["eac2018f.210116"]]
					}, {
						"id": "eac2018f.020116",
						"type": "mqtt-broker",
						"z": "eac2018f.010101",
						"name": "",
						"broker": "localhost",
						"port": "1883",
						"clientid": "",
						"usetls": false,
						"compatmode": true,
						"keepalive": "60",
						"cleansession": true,
						"birthTopic": "",
						"birthQos": "0",
						"birthPayload": "",
						"closeTopic": "",
						"closeQos": "0",
						"closePayload": "",
						"willTopic": "",
						"willQos": "0",
						"willPayload": ""
					}
				],
				"path_flow": "",
				"packages": []
			}, {
				"_type": "/infra/docker_host",
				"name": "Docker-Application",
				"properties": [],
				"version": "0.0.1",
				"id": "a43384d2-0ae1-41af-b284-c6a2dd8bee3d",
				"provided_execution_port": [{
						"name": "offerDocker",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"ip": "192.168.99.100",
				"port": ["2376"],
				"credentials": {
					"username": "ubuntu",
					"password": "",
					"sshkey": ""
				},
				"monitoring_agent": "none"
			}, {
				"_type": "/internal/node_red",
				"name": "NodeRED-Application",
				"properties": [],
				"version": "0.0.1",
				"id": "0d53a53f-3881-4d93-92d2-b04ebf9138c3",
				"provided_execution_port": [{
						"name": "offerNodeRED",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "219c7028-cac1-44a7-918d-f22cf3da8474",
					"image": "nicolasferry/multiarch-node-red-thingml:latest",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880",
						"1883": "1883"
					},
					"devices": {
						"PathOnHost": "",
						"PathInContainer": "",
						"CgroupPermissions": "rwm"
					}
				},
				"ssh_resource": {
					"name": "458d9754-7d4e-487a-8874-0ac8ed145815",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"ansible_resource": {
					"name": "c8ad6bbb-3382-4939-8ebb-d3bd17423cc4",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": ""
					}
				},
				"required_execution_port": {
					"name": "demandDocker",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "2df317a3-4017-485b-81c8-970b97cee7da",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880"
					}
				],
				"required_communication_port": [{
						"name": "74c883ee-2504-426d-82dd-96d798f57722",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80",
						"isMandatory": false
					}
				],
				"nr_flow": [],
				"path_flow": "",
				"packages": []
			}, {
				"_type": "/internal/node_red_flow",
				"name": "NodeRED-flow-Application",
				"properties": [],
				"version": "0.0.1",
				"id": "aa3973eb-4d7d-4d36-baee-d2da2a9a464e",
				"provided_execution_port": [{
						"name": "3e95dc99-4d15-4e96-868d-6593cbe0466d",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						}
					}
				],
				"docker_resource": {
					"name": "c98a6531-cee7-4789-9ec7-3ab53310d238",
					"image": "",
					"command": "",
					"links": [],
					"port_bindings": {
						"1880": "1880"
					},
					"devices": {
						"PathOnHost": "",
						"PathInContainer": "",
						"CgroupPermissions": "rwm"
					}
				},
				"ssh_resource": {
					"name": "1370b9b4-f2a0-4524-8c30-9eecc282383c",
					"startCommand": "",
					"downloadCommand": "",
					"installCommand": "",
					"configureCommand": "",
					"stopCommand": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"ansible_resource": {
					"name": "392e1e17-5405-49da-ad2e-8314683b4e25",
					"playbook_path": "",
					"playbook_host": "",
					"credentials": {
						"username": "ubuntu",
						"password": "",
						"sshkey": "",
						"agent": ""
					}
				},
				"required_execution_port": {
					"name": "demandNodeRED",
					"capabilities": {
						"_type": "/capability/security_capability",
						"name": "a_capability",
						"control_id": "",
						"description": ""
					},
					"needDeployer": false
				},
				"provided_communication_port": [{
						"name": "6da1c6e5-4024-4061-9b62-75bc392183b7",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "80"
					}
				],
				"required_communication_port": [{
						"name": "151493d7-cb21-44c0-8368-19b740c1b047",
						"capabilities": {
							"_type": "/capability/security_capability",
							"name": "a_capability",
							"control_id": "",
							"description": ""
						},
						"port_number": "1880",
						"isMandatory": false
					}
				],
				"nr_flow": [{
						"id": "eac2019f.020101",
						"type": "mqtt in",
						"z": "eac2019f.000000",
						"name": "RpiZ 101 Button",
						"topic": "/grove/button",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2019f.010101",
						"x": 120,
						"y": 60,
						"wires": [["eac2019f.090101"]]
					}, {
						"id": "eac2019f.030101",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 101 Led",
						"topic": "/grove/button_led",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010101",
						"x": 1280,
						"y": 20,
						"wires": []
					}, {
						"id": "eac2019f.040101",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 101 RGB",
						"topic": "/grove/rgb_led",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010101",
						"x": 1280,
						"y": 60,
						"wires": []
					}, {
						"id": "eac2019f.050101",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 101 Display",
						"topic": "/grove/4digit_display",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010101",
						"x": 1290,
						"y": 100,
						"wires": []
					}, {
						"id": "eac2019f.060101",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "Emit ValBool",
						"func": "msg.payload = msg.payload.button === 0 ? true : false;\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 430,
						"y": 20,
						"wires": [["eac2019f.030101"]]
					}, {
						"id": "eac2019f.070101",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "ToRGB",
						"func": "try {\n    on = parseInt(msg.payload.rgbLed.on);\n    val = parseInt(msg.payload.rgbLed.val);\n    if (msg.payload.button === 0) {\n        on_new = (on + 1) % 2;\n    msg.payload = { 'on': on_new, 'val': val }\n    } else {\n        on_new = on;\n    return null;\n    }\n} catch (error) {\n    val = msg.payload;\n}\n\nreturn msg;\n",
						"outputs": 1,
						"noerr": 0,
						"x": 440,
						"y": 60,
						"wires": [["eac2019f.040101"]]
					}, {
						"id": "eac2019f.080101",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "Incr counter",
						"func": "try {\n    val = parseInt(msg.payload.display);\n} catch (error) {\n    val = msg.payload;\n}\n\nif (msg.payload.button === 0) {\n    msg.payload = val + 1;\n    return msg;\n}",
						"outputs": 1,
						"noerr": 0,
						"x": 430,
						"y": 100,
						"wires": [["eac2019f.050101"]]
					}, {
						"id": "eac2019f.090101",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "toObj",
						"func": "msg.payload = JSON.parse(msg.payload)\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 270,
						"y": 60,
						"wires": [["eac2019f.060101", "eac2019f.070101", "eac2019f.080101"]]
					}, {
						"id": "eac2019f.010101",
						"type": "mqtt-broker",
						"z": "eac2019f.000000",
						"name": "",
						"broker": "192.168.43.101",
						"port": "1883",
						"clientid": "",
						"usetls": false,
						"compatmode": true,
						"keepalive": "60",
						"cleansession": true,
						"birthTopic": "",
						"birthQos": "0",
						"birthPayload": "",
						"closeTopic": "",
						"closeQos": "0",
						"closePayload": "",
						"willTopic": "",
						"willQos": "0",
						"willPayload": ""
					}, {
						"id": "eac2019f.020102",
						"type": "mqtt in",
						"z": "eac2019f.000000",
						"name": "RpiZ 102 Button",
						"topic": "/grove/button",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2019f.010102",
						"x": 120,
						"y": 180,
						"wires": [["eac2019f.090102"]]
					}, {
						"id": "eac2019f.030102",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 102 Led",
						"topic": "/grove/button_led",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010102",
						"x": 1280,
						"y": 140,
						"wires": []
					}, {
						"id": "eac2019f.040102",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 102 RGB",
						"topic": "/grove/rgb_led",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010102",
						"x": 1280,
						"y": 180,
						"wires": []
					}, {
						"id": "eac2019f.050102",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 102 Display",
						"topic": "/grove/4digit_display",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010102",
						"x": 1290,
						"y": 220,
						"wires": []
					}, {
						"id": "eac2019f.060102",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "Emit ValBool",
						"func": "msg.payload = msg.payload.button === 0 ? true : false;\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 430,
						"y": 140,
						"wires": [["eac2019f.030102"]]
					}, {
						"id": "eac2019f.070102",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "ToRGB",
						"func": "try {\n    on = parseInt(msg.payload.rgbLed.on);\n    val = parseInt(msg.payload.rgbLed.val);\n    if (msg.payload.button === 0) {\n        on_new = (on + 1) % 2;\n    msg.payload = { 'on': on_new, 'val': val }\n    } else {\n        on_new = on;\n    return null;\n    }\n} catch (error) {\n    val = msg.payload;\n}\n\nreturn msg;\n",
						"outputs": 1,
						"noerr": 0,
						"x": 440,
						"y": 180,
						"wires": [["eac2019f.040102"]]
					}, {
						"id": "eac2019f.080102",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "Incr counter",
						"func": "try {\n    val = parseInt(msg.payload.display);\n} catch (error) {\n    val = msg.payload;\n}\n\nif (msg.payload.button === 0) {\n    msg.payload = val + 1;\n    return msg;\n}",
						"outputs": 1,
						"noerr": 0,
						"x": 430,
						"y": 220,
						"wires": [["eac2019f.050102"]]
					}, {
						"id": "eac2019f.090102",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "toObj",
						"func": "msg.payload = JSON.parse(msg.payload)\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 270,
						"y": 180,
						"wires": [["eac2019f.060102", "eac2019f.070102", "eac2019f.080102"]]
					}, {
						"id": "eac2019f.010102",
						"type": "mqtt-broker",
						"z": "eac2019f.000000",
						"name": "",
						"broker": "192.168.43.102",
						"port": "1883",
						"clientid": "",
						"usetls": false,
						"compatmode": true,
						"keepalive": "60",
						"cleansession": true,
						"birthTopic": "",
						"birthQos": "0",
						"birthPayload": "",
						"closeTopic": "",
						"closeQos": "0",
						"closePayload": "",
						"willTopic": "",
						"willQos": "0",
						"willPayload": ""
					}, {
						"id": "eac2019f.020103",
						"type": "mqtt in",
						"z": "eac2019f.000000",
						"name": "RpiZ 103 Button",
						"topic": "/grove/button",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2019f.010103",
						"x": 120,
						"y": 300,
						"wires": [["eac2019f.090103"]]
					}, {
						"id": "eac2019f.030103",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 103 Led",
						"topic": "/grove/button_led",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010103",
						"x": 1280,
						"y": 260,
						"wires": []
					}, {
						"id": "eac2019f.040103",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 103 RGB",
						"topic": "/grove/rgb_led",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010103",
						"x": 1280,
						"y": 300,
						"wires": []
					}, {
						"id": "eac2019f.050103",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 103 Display",
						"topic": "/grove/4digit_display",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010103",
						"x": 1290,
						"y": 340,
						"wires": []
					}, {
						"id": "eac2019f.060103",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "Emit ValBool",
						"func": "msg.payload = msg.payload.button === 0 ? true : false;\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 430,
						"y": 260,
						"wires": [["eac2019f.030103"]]
					}, {
						"id": "eac2019f.070103",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "ToRGB",
						"func": "try {\n    on = parseInt(msg.payload.rgbLed.on);\n    val = parseInt(msg.payload.rgbLed.val);\n    if (msg.payload.button === 0) {\n        on_new = (on + 1) % 2;\n    msg.payload = { 'on': on_new, 'val': val }\n    } else {\n        on_new = on;\n    return null;\n    }\n} catch (error) {\n    val = msg.payload;\n}\n\nreturn msg;\n",
						"outputs": 1,
						"noerr": 0,
						"x": 440,
						"y": 300,
						"wires": [["eac2019f.040103"]]
					}, {
						"id": "eac2019f.080103",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "Incr counter",
						"func": "try {\n    val = parseInt(msg.payload.display);\n} catch (error) {\n    val = msg.payload;\n}\n\nif (msg.payload.button === 0) {\n    msg.payload = val + 1;\n    return msg;\n}",
						"outputs": 1,
						"noerr": 0,
						"x": 430,
						"y": 340,
						"wires": [["eac2019f.050103"]]
					}, {
						"id": "eac2019f.090103",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "toObj",
						"func": "msg.payload = JSON.parse(msg.payload)\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 270,
						"y": 300,
						"wires": [["eac2019f.060103", "eac2019f.070103", "eac2019f.080103"]]
					}, {
						"id": "eac2019f.010103",
						"type": "mqtt-broker",
						"z": "eac2019f.000000",
						"name": "",
						"broker": "192.168.43.103",
						"port": "1883",
						"clientid": "",
						"usetls": false,
						"compatmode": true,
						"keepalive": "60",
						"cleansession": true,
						"birthTopic": "",
						"birthQos": "0",
						"birthPayload": "",
						"closeTopic": "",
						"closeQos": "0",
						"closePayload": "",
						"willTopic": "",
						"willQos": "0",
						"willPayload": ""
					}, {
						"id": "eac2019f.020104",
						"type": "mqtt in",
						"z": "eac2019f.000000",
						"name": "RpiZ 104 Button",
						"topic": "/grove/button",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2019f.010104",
						"x": 120,
						"y": 420,
						"wires": [["eac2019f.090104"]]
					}, {
						"id": "eac2019f.030104",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 104 Led",
						"topic": "/grove/button_led",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010104",
						"x": 1280,
						"y": 380,
						"wires": []
					}, {
						"id": "eac2019f.040104",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 104 RGB",
						"topic": "/grove/rgb_led",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010104",
						"x": 1280,
						"y": 420,
						"wires": []
					}, {
						"id": "eac2019f.050104",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 104 Display",
						"topic": "/grove/4digit_display",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010104",
						"x": 1290,
						"y": 460,
						"wires": []
					}, {
						"id": "eac2019f.060104",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "Emit ValBool",
						"func": "msg.payload = msg.payload.button === 0 ? true : false;\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 430,
						"y": 380,
						"wires": [["eac2019f.030104"]]
					}, {
						"id": "eac2019f.070104",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "ToRGB",
						"func": "try {\n    on = parseInt(msg.payload.rgbLed.on);\n    val = parseInt(msg.payload.rgbLed.val);\n    if (msg.payload.button === 0) {\n        on_new = (on + 1) % 2;\n    msg.payload = { 'on': on_new, 'val': val }\n    } else {\n        on_new = on;\n    return null;\n    }\n} catch (error) {\n    val = msg.payload;\n}\n\nreturn msg;\n",
						"outputs": 1,
						"noerr": 0,
						"x": 440,
						"y": 420,
						"wires": [["eac2019f.040104"]]
					}, {
						"id": "eac2019f.080104",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "Incr counter",
						"func": "try {\n    val = parseInt(msg.payload.display);\n} catch (error) {\n    val = msg.payload;\n}\n\nif (msg.payload.button === 0) {\n    msg.payload = val + 1;\n    return msg;\n}",
						"outputs": 1,
						"noerr": 0,
						"x": 430,
						"y": 460,
						"wires": [["eac2019f.050104"]]
					}, {
						"id": "eac2019f.090104",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "toObj",
						"func": "msg.payload = JSON.parse(msg.payload)\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 270,
						"y": 420,
						"wires": [["eac2019f.060104", "eac2019f.070104", "eac2019f.080104"]]
					}, {
						"id": "eac2019f.010104",
						"type": "mqtt-broker",
						"z": "eac2019f.000000",
						"name": "",
						"broker": "192.168.43.104",
						"port": "1883",
						"clientid": "",
						"usetls": false,
						"compatmode": true,
						"keepalive": "60",
						"cleansession": true,
						"birthTopic": "",
						"birthQos": "0",
						"birthPayload": "",
						"closeTopic": "",
						"closeQos": "0",
						"closePayload": "",
						"willTopic": "",
						"willQos": "0",
						"willPayload": ""
					}, {
						"id": "eac2019f.020105",
						"type": "mqtt in",
						"z": "eac2019f.000000",
						"name": "RpiZ 105 Button",
						"topic": "/grove/button",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2019f.010105",
						"x": 120,
						"y": 540,
						"wires": [["eac2019f.090105"]]
					}, {
						"id": "eac2019f.030105",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 105 Led",
						"topic": "/grove/button_led",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010105",
						"x": 1280,
						"y": 500,
						"wires": []
					}, {
						"id": "eac2019f.040105",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 105 RGB",
						"topic": "/grove/rgb_led",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010105",
						"x": 1280,
						"y": 540,
						"wires": []
					}, {
						"id": "eac2019f.050105",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 105 Display",
						"topic": "/grove/4digit_display",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010105",
						"x": 1290,
						"y": 580,
						"wires": []
					}, {
						"id": "eac2019f.060105",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "Emit ValBool",
						"func": "msg.payload = msg.payload.button === 0 ? true : false;\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 430,
						"y": 500,
						"wires": [["eac2019f.030105"]]
					}, {
						"id": "eac2019f.070105",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "ToRGB",
						"func": "try {\n    on = parseInt(msg.payload.rgbLed.on);\n    val = parseInt(msg.payload.rgbLed.val);\n    if (msg.payload.button === 0) {\n        on_new = (on + 1) % 2;\n    msg.payload = { 'on': on_new, 'val': val }\n    } else {\n        on_new = on;\n    return null;\n    }\n} catch (error) {\n    val = msg.payload;\n}\n\nreturn msg;\n",
						"outputs": 1,
						"noerr": 0,
						"x": 440,
						"y": 540,
						"wires": [["eac2019f.040105"]]
					}, {
						"id": "eac2019f.080105",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "Incr counter",
						"func": "try {\n    val = parseInt(msg.payload.display);\n} catch (error) {\n    val = msg.payload;\n}\n\nif (msg.payload.button === 0) {\n    msg.payload = val + 1;\n    return msg;\n}",
						"outputs": 1,
						"noerr": 0,
						"x": 430,
						"y": 580,
						"wires": [["eac2019f.050105"]]
					}, {
						"id": "eac2019f.090105",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "toObj",
						"func": "msg.payload = JSON.parse(msg.payload)\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 270,
						"y": 540,
						"wires": [["eac2019f.060105", "eac2019f.070105", "eac2019f.080105"]]
					}, {
						"id": "eac2019f.010105",
						"type": "mqtt-broker",
						"z": "eac2019f.000000",
						"name": "",
						"broker": "192.168.43.105",
						"port": "1883",
						"clientid": "",
						"usetls": false,
						"compatmode": true,
						"keepalive": "60",
						"cleansession": true,
						"birthTopic": "",
						"birthQos": "0",
						"birthPayload": "",
						"closeTopic": "",
						"closeQos": "0",
						"closePayload": "",
						"willTopic": "",
						"willQos": "0",
						"willPayload": ""
					}, {
						"id": "eac2019f.020106",
						"type": "mqtt in",
						"z": "eac2019f.000000",
						"name": "RpiZ 106 Button",
						"topic": "/grove/button",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2019f.010106",
						"x": 120,
						"y": 660,
						"wires": [["eac2019f.090106"]]
					}, {
						"id": "eac2019f.030106",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 106 Led",
						"topic": "/grove/button_led",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010106",
						"x": 1280,
						"y": 620,
						"wires": []
					}, {
						"id": "eac2019f.040106",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 106 RGB",
						"topic": "/grove/rgb_led",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010106",
						"x": 1280,
						"y": 660,
						"wires": []
					}, {
						"id": "eac2019f.050106",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 106 Display",
						"topic": "/grove/4digit_display",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010106",
						"x": 1290,
						"y": 700,
						"wires": []
					}, {
						"id": "eac2019f.060106",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "Emit ValBool",
						"func": "msg.payload = msg.payload.button === 0 ? true : false;\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 430,
						"y": 620,
						"wires": [["eac2019f.030106"]]
					}, {
						"id": "eac2019f.070106",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "ToRGB",
						"func": "try {\n    on = parseInt(msg.payload.rgbLed.on);\n    val = parseInt(msg.payload.rgbLed.val);\n    if (msg.payload.button === 0) {\n        on_new = (on + 1) % 2;\n    msg.payload = { 'on': on_new, 'val': val }\n    } else {\n        on_new = on;\n    return null;\n    }\n} catch (error) {\n    val = msg.payload;\n}\n\nreturn msg;\n",
						"outputs": 1,
						"noerr": 0,
						"x": 440,
						"y": 660,
						"wires": [["eac2019f.040106"]]
					}, {
						"id": "eac2019f.080106",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "Incr counter",
						"func": "try {\n    val = parseInt(msg.payload.display);\n} catch (error) {\n    val = msg.payload;\n}\n\nif (msg.payload.button === 0) {\n    msg.payload = val + 1;\n    return msg;\n}",
						"outputs": 1,
						"noerr": 0,
						"x": 430,
						"y": 700,
						"wires": [["eac2019f.050106"]]
					}, {
						"id": "eac2019f.090106",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "toObj",
						"func": "msg.payload = JSON.parse(msg.payload)\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 270,
						"y": 660,
						"wires": [["eac2019f.060106", "eac2019f.070106", "eac2019f.080106"]]
					}, {
						"id": "eac2019f.010106",
						"type": "mqtt-broker",
						"z": "eac2019f.000000",
						"name": "",
						"broker": "192.168.43.106",
						"port": "1883",
						"clientid": "",
						"usetls": false,
						"compatmode": true,
						"keepalive": "60",
						"cleansession": true,
						"birthTopic": "",
						"birthQos": "0",
						"birthPayload": "",
						"closeTopic": "",
						"closeQos": "0",
						"closePayload": "",
						"willTopic": "",
						"willQos": "0",
						"willPayload": ""
					}, {
						"id": "eac2019f.020107",
						"type": "mqtt in",
						"z": "eac2019f.000000",
						"name": "RpiZ 107 Button",
						"topic": "/grove/button",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2019f.010107",
						"x": 120,
						"y": 780,
						"wires": [["eac2019f.090107"]]
					}, {
						"id": "eac2019f.030107",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 107 Led",
						"topic": "/grove/button_led",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010107",
						"x": 1280,
						"y": 740,
						"wires": []
					}, {
						"id": "eac2019f.040107",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 107 RGB",
						"topic": "/grove/rgb_led",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010107",
						"x": 1280,
						"y": 780,
						"wires": []
					}, {
						"id": "eac2019f.050107",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 107 Display",
						"topic": "/grove/4digit_display",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010107",
						"x": 1290,
						"y": 820,
						"wires": []
					}, {
						"id": "eac2019f.060107",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "Emit ValBool",
						"func": "msg.payload = msg.payload.button === 0 ? true : false;\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 430,
						"y": 740,
						"wires": [["eac2019f.030107"]]
					}, {
						"id": "eac2019f.070107",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "ToRGB",
						"func": "try {\n    on = parseInt(msg.payload.rgbLed.on);\n    val = parseInt(msg.payload.rgbLed.val);\n    if (msg.payload.button === 0) {\n        on_new = (on + 1) % 2;\n    msg.payload = { 'on': on_new, 'val': val }\n    } else {\n        on_new = on;\n    return null;\n    }\n} catch (error) {\n    val = msg.payload;\n}\n\nreturn msg;\n",
						"outputs": 1,
						"noerr": 0,
						"x": 440,
						"y": 780,
						"wires": [["eac2019f.040107"]]
					}, {
						"id": "eac2019f.080107",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "Incr counter",
						"func": "try {\n    val = parseInt(msg.payload.display);\n} catch (error) {\n    val = msg.payload;\n}\n\nif (msg.payload.button === 0) {\n    msg.payload = val + 1;\n    return msg;\n}",
						"outputs": 1,
						"noerr": 0,
						"x": 430,
						"y": 820,
						"wires": [["eac2019f.050107"]]
					}, {
						"id": "eac2019f.090107",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "toObj",
						"func": "msg.payload = JSON.parse(msg.payload)\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 270,
						"y": 780,
						"wires": [["eac2019f.060107", "eac2019f.070107", "eac2019f.080107"]]
					}, {
						"id": "eac2019f.010107",
						"type": "mqtt-broker",
						"z": "eac2019f.000000",
						"name": "",
						"broker": "192.168.43.107",
						"port": "1883",
						"clientid": "",
						"usetls": false,
						"compatmode": true,
						"keepalive": "60",
						"cleansession": true,
						"birthTopic": "",
						"birthQos": "0",
						"birthPayload": "",
						"closeTopic": "",
						"closeQos": "0",
						"closePayload": "",
						"willTopic": "",
						"willQos": "0",
						"willPayload": ""
					}, {
						"id": "eac2019f.020108",
						"type": "mqtt in",
						"z": "eac2019f.000000",
						"name": "RpiZ 108 Button",
						"topic": "/grove/button",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2019f.010108",
						"x": 120,
						"y": 900,
						"wires": [["eac2019f.090108"]]
					}, {
						"id": "eac2019f.030108",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 108 Led",
						"topic": "/grove/button_led",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010108",
						"x": 1280,
						"y": 860,
						"wires": []
					}, {
						"id": "eac2019f.040108",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 108 RGB",
						"topic": "/grove/rgb_led",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010108",
						"x": 1280,
						"y": 900,
						"wires": []
					}, {
						"id": "eac2019f.050108",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 108 Display",
						"topic": "/grove/4digit_display",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010108",
						"x": 1290,
						"y": 940,
						"wires": []
					}, {
						"id": "eac2019f.060108",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "Emit ValBool",
						"func": "msg.payload = msg.payload.button === 0 ? true : false;\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 430,
						"y": 860,
						"wires": [["eac2019f.030108"]]
					}, {
						"id": "eac2019f.070108",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "ToRGB",
						"func": "try {\n    on = parseInt(msg.payload.rgbLed.on);\n    val = parseInt(msg.payload.rgbLed.val);\n    if (msg.payload.button === 0) {\n        on_new = (on + 1) % 2;\n    msg.payload = { 'on': on_new, 'val': val }\n    } else {\n        on_new = on;\n    return null;\n    }\n} catch (error) {\n    val = msg.payload;\n}\n\nreturn msg;\n",
						"outputs": 1,
						"noerr": 0,
						"x": 440,
						"y": 900,
						"wires": [["eac2019f.040108"]]
					}, {
						"id": "eac2019f.080108",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "Incr counter",
						"func": "try {\n    val = parseInt(msg.payload.display);\n} catch (error) {\n    val = msg.payload;\n}\n\nif (msg.payload.button === 0) {\n    msg.payload = val + 1;\n    return msg;\n}",
						"outputs": 1,
						"noerr": 0,
						"x": 430,
						"y": 940,
						"wires": [["eac2019f.050108"]]
					}, {
						"id": "eac2019f.090108",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "toObj",
						"func": "msg.payload = JSON.parse(msg.payload)\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 270,
						"y": 900,
						"wires": [["eac2019f.060108", "eac2019f.070108", "eac2019f.080108"]]
					}, {
						"id": "eac2019f.010108",
						"type": "mqtt-broker",
						"z": "eac2019f.000000",
						"name": "",
						"broker": "192.168.43.108",
						"port": "1883",
						"clientid": "",
						"usetls": false,
						"compatmode": true,
						"keepalive": "60",
						"cleansession": true,
						"birthTopic": "",
						"birthQos": "0",
						"birthPayload": "",
						"closeTopic": "",
						"closeQos": "0",
						"closePayload": "",
						"willTopic": "",
						"willQos": "0",
						"willPayload": ""
					}, {
						"id": "eac2019f.020109",
						"type": "mqtt in",
						"z": "eac2019f.000000",
						"name": "RpiZ 109 Button",
						"topic": "/grove/button",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2019f.010109",
						"x": 120,
						"y": 1020,
						"wires": [["eac2019f.090109"]]
					}, {
						"id": "eac2019f.030109",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 109 Led",
						"topic": "/grove/button_led",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010109",
						"x": 1280,
						"y": 980,
						"wires": []
					}, {
						"id": "eac2019f.040109",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 109 RGB",
						"topic": "/grove/rgb_led",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010109",
						"x": 1280,
						"y": 1020,
						"wires": []
					}, {
						"id": "eac2019f.050109",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 109 Display",
						"topic": "/grove/4digit_display",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010109",
						"x": 1290,
						"y": 1060,
						"wires": []
					}, {
						"id": "eac2019f.060109",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "Emit ValBool",
						"func": "msg.payload = msg.payload.button === 0 ? true : false;\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 430,
						"y": 980,
						"wires": [["eac2019f.030109"]]
					}, {
						"id": "eac2019f.070109",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "ToRGB",
						"func": "try {\n    on = parseInt(msg.payload.rgbLed.on);\n    val = parseInt(msg.payload.rgbLed.val);\n    if (msg.payload.button === 0) {\n        on_new = (on + 1) % 2;\n    msg.payload = { 'on': on_new, 'val': val }\n    } else {\n        on_new = on;\n    return null;\n    }\n} catch (error) {\n    val = msg.payload;\n}\n\nreturn msg;\n",
						"outputs": 1,
						"noerr": 0,
						"x": 440,
						"y": 1020,
						"wires": [["eac2019f.040109"]]
					}, {
						"id": "eac2019f.080109",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "Incr counter",
						"func": "try {\n    val = parseInt(msg.payload.display);\n} catch (error) {\n    val = msg.payload;\n}\n\nif (msg.payload.button === 0) {\n    msg.payload = val + 1;\n    return msg;\n}",
						"outputs": 1,
						"noerr": 0,
						"x": 430,
						"y": 1060,
						"wires": [["eac2019f.050109"]]
					}, {
						"id": "eac2019f.090109",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "toObj",
						"func": "msg.payload = JSON.parse(msg.payload)\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 270,
						"y": 1020,
						"wires": [["eac2019f.060109", "eac2019f.070109", "eac2019f.080109"]]
					}, {
						"id": "eac2019f.010109",
						"type": "mqtt-broker",
						"z": "eac2019f.000000",
						"name": "",
						"broker": "192.168.43.109",
						"port": "1883",
						"clientid": "",
						"usetls": false,
						"compatmode": true,
						"keepalive": "60",
						"cleansession": true,
						"birthTopic": "",
						"birthQos": "0",
						"birthPayload": "",
						"closeTopic": "",
						"closeQos": "0",
						"closePayload": "",
						"willTopic": "",
						"willQos": "0",
						"willPayload": ""
					}, {
						"id": "eac2019f.020110",
						"type": "mqtt in",
						"z": "eac2019f.000000",
						"name": "RpiZ 110 Button",
						"topic": "/grove/button",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2019f.010110",
						"x": 120,
						"y": 1140,
						"wires": [["eac2019f.090110"]]
					}, {
						"id": "eac2019f.030110",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 110 Led",
						"topic": "/grove/button_led",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010110",
						"x": 1280,
						"y": 1100,
						"wires": []
					}, {
						"id": "eac2019f.040110",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 110 RGB",
						"topic": "/grove/rgb_led",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010110",
						"x": 1280,
						"y": 1140,
						"wires": []
					}, {
						"id": "eac2019f.050110",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 110 Display",
						"topic": "/grove/4digit_display",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010110",
						"x": 1290,
						"y": 1180,
						"wires": []
					}, {
						"id": "eac2019f.060110",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "Emit ValBool",
						"func": "msg.payload = msg.payload.button === 0 ? true : false;\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 430,
						"y": 1100,
						"wires": [["eac2019f.030110"]]
					}, {
						"id": "eac2019f.070110",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "ToRGB",
						"func": "try {\n    on = parseInt(msg.payload.rgbLed.on);\n    val = parseInt(msg.payload.rgbLed.val);\n    if (msg.payload.button === 0) {\n        on_new = (on + 1) % 2;\n    msg.payload = { 'on': on_new, 'val': val }\n    } else {\n        on_new = on;\n    return null;\n    }\n} catch (error) {\n    val = msg.payload;\n}\n\nreturn msg;\n",
						"outputs": 1,
						"noerr": 0,
						"x": 440,
						"y": 1140,
						"wires": [["eac2019f.040110"]]
					}, {
						"id": "eac2019f.080110",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "Incr counter",
						"func": "try {\n    val = parseInt(msg.payload.display);\n} catch (error) {\n    val = msg.payload;\n}\n\nif (msg.payload.button === 0) {\n    msg.payload = val + 1;\n    return msg;\n}",
						"outputs": 1,
						"noerr": 0,
						"x": 430,
						"y": 1180,
						"wires": [["eac2019f.050110"]]
					}, {
						"id": "eac2019f.090110",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "toObj",
						"func": "msg.payload = JSON.parse(msg.payload)\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 270,
						"y": 1140,
						"wires": [["eac2019f.060110", "eac2019f.070110", "eac2019f.080110"]]
					}, {
						"id": "eac2019f.010110",
						"type": "mqtt-broker",
						"z": "eac2019f.000000",
						"name": "",
						"broker": "192.168.43.110",
						"port": "1883",
						"clientid": "",
						"usetls": false,
						"compatmode": true,
						"keepalive": "60",
						"cleansession": true,
						"birthTopic": "",
						"birthQos": "0",
						"birthPayload": "",
						"closeTopic": "",
						"closeQos": "0",
						"closePayload": "",
						"willTopic": "",
						"willQos": "0",
						"willPayload": ""
					}, {
						"id": "eac2019f.020111",
						"type": "mqtt in",
						"z": "eac2019f.000000",
						"name": "RpiZ 111 Button",
						"topic": "/grove/button",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2019f.010111",
						"x": 120,
						"y": 1260,
						"wires": [["eac2019f.090111"]]
					}, {
						"id": "eac2019f.030111",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 111 Led",
						"topic": "/grove/button_led",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010111",
						"x": 1280,
						"y": 1220,
						"wires": []
					}, {
						"id": "eac2019f.040111",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 111 RGB",
						"topic": "/grove/rgb_led",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010111",
						"x": 1280,
						"y": 1260,
						"wires": []
					}, {
						"id": "eac2019f.050111",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 111 Display",
						"topic": "/grove/4digit_display",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010111",
						"x": 1290,
						"y": 1300,
						"wires": []
					}, {
						"id": "eac2019f.060111",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "Emit ValBool",
						"func": "msg.payload = msg.payload.button === 0 ? true : false;\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 430,
						"y": 1220,
						"wires": [["eac2019f.030111"]]
					}, {
						"id": "eac2019f.070111",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "ToRGB",
						"func": "try {\n    on = parseInt(msg.payload.rgbLed.on);\n    val = parseInt(msg.payload.rgbLed.val);\n    if (msg.payload.button === 0) {\n        on_new = (on + 1) % 2;\n    msg.payload = { 'on': on_new, 'val': val }\n    } else {\n        on_new = on;\n    return null;\n    }\n} catch (error) {\n    val = msg.payload;\n}\n\nreturn msg;\n",
						"outputs": 1,
						"noerr": 0,
						"x": 440,
						"y": 1260,
						"wires": [["eac2019f.040111"]]
					}, {
						"id": "eac2019f.080111",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "Incr counter",
						"func": "try {\n    val = parseInt(msg.payload.display);\n} catch (error) {\n    val = msg.payload;\n}\n\nif (msg.payload.button === 0) {\n    msg.payload = val + 1;\n    return msg;\n}",
						"outputs": 1,
						"noerr": 0,
						"x": 430,
						"y": 1300,
						"wires": [["eac2019f.050111"]]
					}, {
						"id": "eac2019f.090111",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "toObj",
						"func": "msg.payload = JSON.parse(msg.payload)\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 270,
						"y": 1260,
						"wires": [["eac2019f.060111", "eac2019f.070111", "eac2019f.080111"]]
					}, {
						"id": "eac2019f.010111",
						"type": "mqtt-broker",
						"z": "eac2019f.000000",
						"name": "",
						"broker": "192.168.43.111",
						"port": "1883",
						"clientid": "",
						"usetls": false,
						"compatmode": true,
						"keepalive": "60",
						"cleansession": true,
						"birthTopic": "",
						"birthQos": "0",
						"birthPayload": "",
						"closeTopic": "",
						"closeQos": "0",
						"closePayload": "",
						"willTopic": "",
						"willQos": "0",
						"willPayload": ""
					}, {
						"id": "eac2019f.020112",
						"type": "mqtt in",
						"z": "eac2019f.000000",
						"name": "RpiZ 112 Button",
						"topic": "/grove/button",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2019f.010112",
						"x": 120,
						"y": 1380,
						"wires": [["eac2019f.090112"]]
					}, {
						"id": "eac2019f.030112",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 112 Led",
						"topic": "/grove/button_led",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010112",
						"x": 1280,
						"y": 1340,
						"wires": []
					}, {
						"id": "eac2019f.040112",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 112 RGB",
						"topic": "/grove/rgb_led",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010112",
						"x": 1280,
						"y": 1380,
						"wires": []
					}, {
						"id": "eac2019f.050112",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 112 Display",
						"topic": "/grove/4digit_display",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010112",
						"x": 1290,
						"y": 1420,
						"wires": []
					}, {
						"id": "eac2019f.060112",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "Emit ValBool",
						"func": "msg.payload = msg.payload.button === 0 ? true : false;\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 430,
						"y": 1340,
						"wires": [["eac2019f.030112"]]
					}, {
						"id": "eac2019f.070112",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "ToRGB",
						"func": "try {\n    on = parseInt(msg.payload.rgbLed.on);\n    val = parseInt(msg.payload.rgbLed.val);\n    if (msg.payload.button === 0) {\n        on_new = (on + 1) % 2;\n    msg.payload = { 'on': on_new, 'val': val }\n    } else {\n        on_new = on;\n    return null;\n    }\n} catch (error) {\n    val = msg.payload;\n}\n\nreturn msg;\n",
						"outputs": 1,
						"noerr": 0,
						"x": 440,
						"y": 1380,
						"wires": [["eac2019f.040112"]]
					}, {
						"id": "eac2019f.080112",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "Incr counter",
						"func": "try {\n    val = parseInt(msg.payload.display);\n} catch (error) {\n    val = msg.payload;\n}\n\nif (msg.payload.button === 0) {\n    msg.payload = val + 1;\n    return msg;\n}",
						"outputs": 1,
						"noerr": 0,
						"x": 430,
						"y": 1420,
						"wires": [["eac2019f.050112"]]
					}, {
						"id": "eac2019f.090112",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "toObj",
						"func": "msg.payload = JSON.parse(msg.payload)\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 270,
						"y": 1380,
						"wires": [["eac2019f.060112", "eac2019f.070112", "eac2019f.080112"]]
					}, {
						"id": "eac2019f.010112",
						"type": "mqtt-broker",
						"z": "eac2019f.000000",
						"name": "",
						"broker": "192.168.43.112",
						"port": "1883",
						"clientid": "",
						"usetls": false,
						"compatmode": true,
						"keepalive": "60",
						"cleansession": true,
						"birthTopic": "",
						"birthQos": "0",
						"birthPayload": "",
						"closeTopic": "",
						"closeQos": "0",
						"closePayload": "",
						"willTopic": "",
						"willQos": "0",
						"willPayload": ""
					}, {
						"id": "eac2019f.020113",
						"type": "mqtt in",
						"z": "eac2019f.000000",
						"name": "RpiZ 113 Button",
						"topic": "/grove/button",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2019f.010113",
						"x": 120,
						"y": 1500,
						"wires": [["eac2019f.090113"]]
					}, {
						"id": "eac2019f.030113",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 113 Led",
						"topic": "/grove/button_led",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010113",
						"x": 1280,
						"y": 1460,
						"wires": []
					}, {
						"id": "eac2019f.040113",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 113 RGB",
						"topic": "/grove/rgb_led",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010113",
						"x": 1280,
						"y": 1500,
						"wires": []
					}, {
						"id": "eac2019f.050113",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 113 Display",
						"topic": "/grove/4digit_display",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010113",
						"x": 1290,
						"y": 1540,
						"wires": []
					}, {
						"id": "eac2019f.060113",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "Emit ValBool",
						"func": "msg.payload = msg.payload.button === 0 ? true : false;\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 430,
						"y": 1460,
						"wires": [["eac2019f.030113"]]
					}, {
						"id": "eac2019f.070113",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "ToRGB",
						"func": "try {\n    on = parseInt(msg.payload.rgbLed.on);\n    val = parseInt(msg.payload.rgbLed.val);\n    if (msg.payload.button === 0) {\n        on_new = (on + 1) % 2;\n    msg.payload = { 'on': on_new, 'val': val }\n    } else {\n        on_new = on;\n    return null;\n    }\n} catch (error) {\n    val = msg.payload;\n}\n\nreturn msg;\n",
						"outputs": 1,
						"noerr": 0,
						"x": 440,
						"y": 1500,
						"wires": [["eac2019f.040113"]]
					}, {
						"id": "eac2019f.080113",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "Incr counter",
						"func": "try {\n    val = parseInt(msg.payload.display);\n} catch (error) {\n    val = msg.payload;\n}\n\nif (msg.payload.button === 0) {\n    msg.payload = val + 1;\n    return msg;\n}",
						"outputs": 1,
						"noerr": 0,
						"x": 430,
						"y": 1540,
						"wires": [["eac2019f.050113"]]
					}, {
						"id": "eac2019f.090113",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "toObj",
						"func": "msg.payload = JSON.parse(msg.payload)\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 270,
						"y": 1500,
						"wires": [["eac2019f.060113", "eac2019f.070113", "eac2019f.080113"]]
					}, {
						"id": "eac2019f.010113",
						"type": "mqtt-broker",
						"z": "eac2019f.000000",
						"name": "",
						"broker": "192.168.43.113",
						"port": "1883",
						"clientid": "",
						"usetls": false,
						"compatmode": true,
						"keepalive": "60",
						"cleansession": true,
						"birthTopic": "",
						"birthQos": "0",
						"birthPayload": "",
						"closeTopic": "",
						"closeQos": "0",
						"closePayload": "",
						"willTopic": "",
						"willQos": "0",
						"willPayload": ""
					}, {
						"id": "eac2019f.020114",
						"type": "mqtt in",
						"z": "eac2019f.000000",
						"name": "RpiZ 114 Button",
						"topic": "/grove/button",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2019f.010114",
						"x": 120,
						"y": 1620,
						"wires": [["eac2019f.090114"]]
					}, {
						"id": "eac2019f.030114",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 114 Led",
						"topic": "/grove/button_led",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010114",
						"x": 1280,
						"y": 1580,
						"wires": []
					}, {
						"id": "eac2019f.040114",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 114 RGB",
						"topic": "/grove/rgb_led",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010114",
						"x": 1280,
						"y": 1620,
						"wires": []
					}, {
						"id": "eac2019f.050114",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 114 Display",
						"topic": "/grove/4digit_display",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010114",
						"x": 1290,
						"y": 1660,
						"wires": []
					}, {
						"id": "eac2019f.060114",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "Emit ValBool",
						"func": "msg.payload = msg.payload.button === 0 ? true : false;\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 430,
						"y": 1580,
						"wires": [["eac2019f.030114"]]
					}, {
						"id": "eac2019f.070114",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "ToRGB",
						"func": "try {\n    on = parseInt(msg.payload.rgbLed.on);\n    val = parseInt(msg.payload.rgbLed.val);\n    if (msg.payload.button === 0) {\n        on_new = (on + 1) % 2;\n    msg.payload = { 'on': on_new, 'val': val }\n    } else {\n        on_new = on;\n    return null;\n    }\n} catch (error) {\n    val = msg.payload;\n}\n\nreturn msg;\n",
						"outputs": 1,
						"noerr": 0,
						"x": 440,
						"y": 1620,
						"wires": [["eac2019f.040114"]]
					}, {
						"id": "eac2019f.080114",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "Incr counter",
						"func": "try {\n    val = parseInt(msg.payload.display);\n} catch (error) {\n    val = msg.payload;\n}\n\nif (msg.payload.button === 0) {\n    msg.payload = val + 1;\n    return msg;\n}",
						"outputs": 1,
						"noerr": 0,
						"x": 430,
						"y": 1660,
						"wires": [["eac2019f.050114"]]
					}, {
						"id": "eac2019f.090114",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "toObj",
						"func": "msg.payload = JSON.parse(msg.payload)\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 270,
						"y": 1620,
						"wires": [["eac2019f.060114", "eac2019f.070114", "eac2019f.080114"]]
					}, {
						"id": "eac2019f.010114",
						"type": "mqtt-broker",
						"z": "eac2019f.000000",
						"name": "",
						"broker": "192.168.43.114",
						"port": "1883",
						"clientid": "",
						"usetls": false,
						"compatmode": true,
						"keepalive": "60",
						"cleansession": true,
						"birthTopic": "",
						"birthQos": "0",
						"birthPayload": "",
						"closeTopic": "",
						"closeQos": "0",
						"closePayload": "",
						"willTopic": "",
						"willQos": "0",
						"willPayload": ""
					}, {
						"id": "eac2019f.020115",
						"type": "mqtt in",
						"z": "eac2019f.000000",
						"name": "RpiZ 115 Button",
						"topic": "/grove/button",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2019f.010115",
						"x": 120,
						"y": 1740,
						"wires": [["eac2019f.090115"]]
					}, {
						"id": "eac2019f.030115",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 115 Led",
						"topic": "/grove/button_led",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010115",
						"x": 1280,
						"y": 1700,
						"wires": []
					}, {
						"id": "eac2019f.040115",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 115 RGB",
						"topic": "/grove/rgb_led",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010115",
						"x": 1280,
						"y": 1740,
						"wires": []
					}, {
						"id": "eac2019f.050115",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 115 Display",
						"topic": "/grove/4digit_display",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010115",
						"x": 1290,
						"y": 1780,
						"wires": []
					}, {
						"id": "eac2019f.060115",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "Emit ValBool",
						"func": "msg.payload = msg.payload.button === 0 ? true : false;\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 430,
						"y": 1700,
						"wires": [["eac2019f.030115"]]
					}, {
						"id": "eac2019f.070115",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "ToRGB",
						"func": "try {\n    on = parseInt(msg.payload.rgbLed.on);\n    val = parseInt(msg.payload.rgbLed.val);\n    if (msg.payload.button === 0) {\n        on_new = (on + 1) % 2;\n    msg.payload = { 'on': on_new, 'val': val }\n    } else {\n        on_new = on;\n    return null;\n    }\n} catch (error) {\n    val = msg.payload;\n}\n\nreturn msg;\n",
						"outputs": 1,
						"noerr": 0,
						"x": 440,
						"y": 1740,
						"wires": [["eac2019f.040115"]]
					}, {
						"id": "eac2019f.080115",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "Incr counter",
						"func": "try {\n    val = parseInt(msg.payload.display);\n} catch (error) {\n    val = msg.payload;\n}\n\nif (msg.payload.button === 0) {\n    msg.payload = val + 1;\n    return msg;\n}",
						"outputs": 1,
						"noerr": 0,
						"x": 430,
						"y": 1780,
						"wires": [["eac2019f.050115"]]
					}, {
						"id": "eac2019f.090115",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "toObj",
						"func": "msg.payload = JSON.parse(msg.payload)\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 270,
						"y": 1740,
						"wires": [["eac2019f.060115", "eac2019f.070115", "eac2019f.080115"]]
					}, {
						"id": "eac2019f.010115",
						"type": "mqtt-broker",
						"z": "eac2019f.000000",
						"name": "",
						"broker": "192.168.43.115",
						"port": "1883",
						"clientid": "",
						"usetls": false,
						"compatmode": true,
						"keepalive": "60",
						"cleansession": true,
						"birthTopic": "",
						"birthQos": "0",
						"birthPayload": "",
						"closeTopic": "",
						"closeQos": "0",
						"closePayload": "",
						"willTopic": "",
						"willQos": "0",
						"willPayload": ""
					}, {
						"id": "eac2019f.020116",
						"type": "mqtt in",
						"z": "eac2019f.000000",
						"name": "RpiZ 116 Button",
						"topic": "/grove/button",
						"qos": "2",
						"datatype": "auto",
						"broker": "eac2019f.010116",
						"x": 120,
						"y": 1860,
						"wires": [["eac2019f.090116"]]
					}, {
						"id": "eac2019f.030116",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 116 Led",
						"topic": "/grove/button_led",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010116",
						"x": 1280,
						"y": 1820,
						"wires": []
					}, {
						"id": "eac2019f.040116",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 116 RGB",
						"topic": "/grove/rgb_led",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010116",
						"x": 1280,
						"y": 1860,
						"wires": []
					}, {
						"id": "eac2019f.050116",
						"type": "mqtt out",
						"z": "eac2019f.000000",
						"name": "RpiZ 116 Display",
						"topic": "/grove/4digit_display",
						"qos": "",
						"retain": "",
						"broker": "eac2019f.010116",
						"x": 1290,
						"y": 1900,
						"wires": []
					}, {
						"id": "eac2019f.060116",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "Emit ValBool",
						"func": "msg.payload = msg.payload.button === 0 ? true : false;\n\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 430,
						"y": 1820,
						"wires": [["eac2019f.030116"]]
					}, {
						"id": "eac2019f.070116",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "ToRGB",
						"func": "try {\n    on = parseInt(msg.payload.rgbLed.on);\n    val = parseInt(msg.payload.rgbLed.val);\n    if (msg.payload.button === 0) {\n        on_new = (on + 1) % 2;\n    msg.payload = { 'on': on_new, 'val': val }\n    } else {\n        on_new = on;\n    return null;\n    }\n} catch (error) {\n    val = msg.payload;\n}\n\nreturn msg;\n",
						"outputs": 1,
						"noerr": 0,
						"x": 440,
						"y": 1860,
						"wires": [["eac2019f.040116"]]
					}, {
						"id": "eac2019f.080116",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "Incr counter",
						"func": "try {\n    val = parseInt(msg.payload.display);\n} catch (error) {\n    val = msg.payload;\n}\n\nif (msg.payload.button === 0) {\n    msg.payload = val + 1;\n    return msg;\n}",
						"outputs": 1,
						"noerr": 0,
						"x": 430,
						"y": 1900,
						"wires": [["eac2019f.050116"]]
					}, {
						"id": "eac2019f.090116",
						"type": "function",
						"z": "eac2019f.000000",
						"name": "toObj",
						"func": "msg.payload = JSON.parse(msg.payload)\nreturn msg;",
						"outputs": 1,
						"noerr": 0,
						"x": 270,
						"y": 1860,
						"wires": [["eac2019f.060116", "eac2019f.070116", "eac2019f.080116"]]
					}, {
						"id": "eac2019f.010116",
						"type": "mqtt-broker",
						"z": "eac2019f.000000",
						"name": "",
						"broker": "192.168.43.116",
						"port": "1883",
						"clientid": "",
						"usetls": false,
						"compatmode": true,
						"keepalive": "60",
						"cleansession": true,
						"birthTopic": "",
						"birthQos": "0",
						"birthPayload": "",
						"closeTopic": "",
						"closeQos": "0",
						"closePayload": "",
						"willTopic": "",
						"willQos": "0",
						"willPayload": ""
					}
				],
				"path_flow": "",
				"packages": ["enact-actuation-conflict-manager-node", "node-red-contrib-mqtt-broker"]
			}
		],
		"links": [],
		"containments": [{
				"name": "Docker_on_RPiZero-101",
				"properties": [],
				"src": "/RPiZero-101/offerDocker",
				"target": "/NodeRED-101/demandDocker"
			}, {
				"name": "NodeRED-flow-101_on_RPiZero-101",
				"properties": [],
				"src": "/NodeRED-101/offerNodeRED",
				"target": "/NodeRED-flow-101/demandNodeRED"
			}, {
				"name": "Docker_on_RPiZero-102",
				"properties": [],
				"src": "/RPiZero-102/offerDocker",
				"target": "/NodeRED-102/demandDocker"
			}, {
				"name": "NodeRED-flow-102_on_RPiZero-102",
				"properties": [],
				"src": "/NodeRED-102/offerNodeRED",
				"target": "/NodeRED-flow-102/demandNodeRED"
			}, {
				"name": "Docker_on_RPiZero-103",
				"properties": [],
				"src": "/RPiZero-103/offerDocker",
				"target": "/NodeRED-103/demandDocker"
			}, {
				"name": "NodeRED-flow-103_on_RPiZero-103",
				"properties": [],
				"src": "/NodeRED-103/offerNodeRED",
				"target": "/NodeRED-flow-103/demandNodeRED"
			}, {
				"name": "Docker_on_RPiZero-104",
				"properties": [],
				"src": "/RPiZero-104/offerDocker",
				"target": "/NodeRED-104/demandDocker"
			}, {
				"name": "NodeRED-flow-104_on_RPiZero-104",
				"properties": [],
				"src": "/NodeRED-104/offerNodeRED",
				"target": "/NodeRED-flow-104/demandNodeRED"
			}, {
				"name": "Docker_on_RPiZero-105",
				"properties": [],
				"src": "/RPiZero-105/offerDocker",
				"target": "/NodeRED-105/demandDocker"
			}, {
				"name": "NodeRED-flow-105_on_RPiZero-105",
				"properties": [],
				"src": "/NodeRED-105/offerNodeRED",
				"target": "/NodeRED-flow-105/demandNodeRED"
			}, {
				"name": "Docker_on_RPiZero-106",
				"properties": [],
				"src": "/RPiZero-106/offerDocker",
				"target": "/NodeRED-106/demandDocker"
			}, {
				"name": "NodeRED-flow-106_on_RPiZero-106",
				"properties": [],
				"src": "/NodeRED-106/offerNodeRED",
				"target": "/NodeRED-flow-106/demandNodeRED"
			}, {
				"name": "Docker_on_RPiZero-107",
				"properties": [],
				"src": "/RPiZero-107/offerDocker",
				"target": "/NodeRED-107/demandDocker"
			}, {
				"name": "NodeRED-flow-107_on_RPiZero-107",
				"properties": [],
				"src": "/NodeRED-107/offerNodeRED",
				"target": "/NodeRED-flow-107/demandNodeRED"
			}, {
				"name": "Docker_on_RPiZero-108",
				"properties": [],
				"src": "/RPiZero-108/offerDocker",
				"target": "/NodeRED-108/demandDocker"
			}, {
				"name": "NodeRED-flow-108_on_RPiZero-108",
				"properties": [],
				"src": "/NodeRED-108/offerNodeRED",
				"target": "/NodeRED-flow-108/demandNodeRED"
			}, {
				"name": "Docker_on_RPiZero-109",
				"properties": [],
				"src": "/RPiZero-109/offerDocker",
				"target": "/NodeRED-109/demandDocker"
			}, {
				"name": "NodeRED-flow-109_on_RPiZero-109",
				"properties": [],
				"src": "/NodeRED-109/offerNodeRED",
				"target": "/NodeRED-flow-109/demandNodeRED"
			}, {
				"name": "Docker_on_RPiZero-110",
				"properties": [],
				"src": "/RPiZero-110/offerDocker",
				"target": "/NodeRED-110/demandDocker"
			}, {
				"name": "NodeRED-flow-110_on_RPiZero-110",
				"properties": [],
				"src": "/NodeRED-110/offerNodeRED",
				"target": "/NodeRED-flow-110/demandNodeRED"
			}, {
				"name": "Docker_on_RPiZero-111",
				"properties": [],
				"src": "/RPiZero-111/offerDocker",
				"target": "/NodeRED-111/demandDocker"
			}, {
				"name": "NodeRED-flow-111_on_RPiZero-111",
				"properties": [],
				"src": "/NodeRED-111/offerNodeRED",
				"target": "/NodeRED-flow-111/demandNodeRED"
			}, {
				"name": "Docker_on_RPiZero-112",
				"properties": [],
				"src": "/RPiZero-112/offerDocker",
				"target": "/NodeRED-112/demandDocker"
			}, {
				"name": "NodeRED-flow-112_on_RPiZero-112",
				"properties": [],
				"src": "/NodeRED-112/offerNodeRED",
				"target": "/NodeRED-flow-112/demandNodeRED"
			}, {
				"name": "Docker_on_RPiZero-113",
				"properties": [],
				"src": "/RPiZero-113/offerDocker",
				"target": "/NodeRED-113/demandDocker"
			}, {
				"name": "NodeRED-flow-113_on_RPiZero-113",
				"properties": [],
				"src": "/NodeRED-113/offerNodeRED",
				"target": "/NodeRED-flow-113/demandNodeRED"
			}, {
				"name": "Docker_on_RPiZero-114",
				"properties": [],
				"src": "/RPiZero-114/offerDocker",
				"target": "/NodeRED-114/demandDocker"
			}, {
				"name": "NodeRED-flow-114_on_RPiZero-114",
				"properties": [],
				"src": "/NodeRED-114/offerNodeRED",
				"target": "/NodeRED-flow-114/demandNodeRED"
			}, {
				"name": "Docker_on_RPiZero-115",
				"properties": [],
				"src": "/RPiZero-115/offerDocker",
				"target": "/NodeRED-115/demandDocker"
			}, {
				"name": "NodeRED-flow-115_on_RPiZero-115",
				"properties": [],
				"src": "/NodeRED-115/offerNodeRED",
				"target": "/NodeRED-flow-115/demandNodeRED"
			}, {
				"name": "Docker_on_RPiZero-116",
				"properties": [],
				"src": "/RPiZero-116/offerDocker",
				"target": "/NodeRED-116/demandDocker"
			}, {
				"name": "NodeRED-flow-116_on_RPiZero-116",
				"properties": [],
				"src": "/NodeRED-116/offerNodeRED",
				"target": "/NodeRED-flow-116/demandNodeRED"
			}, {
				"name": "NodeRED-Application_on_Docker-Application",
				"properties": [],
				"src": "/Docker-Application/offerDocker",
				"target": "/NodeRED-Application/demandDocker"
			}, {
				"name": "NodeRED-flow-Application_on_NodeRED-Application",
				"properties": [],
				"src": "/NodeRED-Application/offerNodeRED",
				"target": "/NodeRED-flow-Application/demandNodeRED"
			}
		],
		"type_registry": []
	},
	"graph": {
		"elements": {
			"nodes": [{
					"data": {
						"id": "RPiZero-101"
					},
					"position": {
						"x": 285,
						"y": 190
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "container"
				}, {
					"data": {
						"id": "NodeRED-101",
						"parent": "RPiZero-101"
					},
					"position": {
						"x": 285,
						"y": 190
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "node_red"
				}, {
					"data": {
						"id": "NodeRED-flow-101",
						"parent": "NodeRED-101"
					},
					"position": {
						"x": 285,
						"y": 190
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": ""
				}, {
					"data": {
						"id": "RPiZero-102"
					},
					"position": {
						"x": 385,
						"y": 190
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "container"
				}, {
					"data": {
						"id": "NodeRED-102",
						"parent": "RPiZero-102"
					},
					"position": {
						"x": 385,
						"y": 190
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "node_red"
				}, {
					"data": {
						"id": "NodeRED-flow-102",
						"parent": "NodeRED-102"
					},
					"position": {
						"x": 385,
						"y": 190
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": ""
				}, {
					"data": {
						"id": "RPiZero-103"
					},
					"position": {
						"x": 485,
						"y": 190
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "container"
				}, {
					"data": {
						"id": "NodeRED-103",
						"parent": "RPiZero-103"
					},
					"position": {
						"x": 485,
						"y": 190
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "node_red"
				}, {
					"data": {
						"id": "NodeRED-flow-103",
						"parent": "NodeRED-103"
					},
					"position": {
						"x": 485,
						"y": 190
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": ""
				}, {
					"data": {
						"id": "RPiZero-104"
					},
					"position": {
						"x": 585,
						"y": 190
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "container"
				}, {
					"data": {
						"id": "NodeRED-104",
						"parent": "RPiZero-104"
					},
					"position": {
						"x": 585,
						"y": 190
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "node_red"
				}, {
					"data": {
						"id": "NodeRED-flow-104",
						"parent": "NodeRED-104"
					},
					"position": {
						"x": 585,
						"y": 190
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": ""
				}, {
					"data": {
						"id": "RPiZero-105"
					},
					"position": {
						"x": 285,
						"y": 290
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "container"
				}, {
					"data": {
						"id": "NodeRED-105",
						"parent": "RPiZero-105"
					},
					"position": {
						"x": 285,
						"y": 290
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "node_red"
				}, {
					"data": {
						"id": "NodeRED-flow-105",
						"parent": "NodeRED-105"
					},
					"position": {
						"x": 285,
						"y": 290
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": ""
				}, {
					"data": {
						"id": "RPiZero-106"
					},
					"position": {
						"x": 385,
						"y": 290
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "container"
				}, {
					"data": {
						"id": "NodeRED-106",
						"parent": "RPiZero-106"
					},
					"position": {
						"x": 385,
						"y": 290
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "node_red"
				}, {
					"data": {
						"id": "NodeRED-flow-106",
						"parent": "NodeRED-106"
					},
					"position": {
						"x": 385,
						"y": 290
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": ""
				}, {
					"data": {
						"id": "RPiZero-107"
					},
					"position": {
						"x": 485,
						"y": 290
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "container"
				}, {
					"data": {
						"id": "NodeRED-107",
						"parent": "RPiZero-107"
					},
					"position": {
						"x": 485,
						"y": 290
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "node_red"
				}, {
					"data": {
						"id": "NodeRED-flow-107",
						"parent": "NodeRED-107"
					},
					"position": {
						"x": 485,
						"y": 290
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": ""
				}, {
					"data": {
						"id": "RPiZero-108"
					},
					"position": {
						"x": 585,
						"y": 290
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "container"
				}, {
					"data": {
						"id": "NodeRED-108",
						"parent": "RPiZero-108"
					},
					"position": {
						"x": 585,
						"y": 290
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "node_red"
				}, {
					"data": {
						"id": "NodeRED-flow-108",
						"parent": "NodeRED-108"
					},
					"position": {
						"x": 585,
						"y": 290
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": ""
				}, {
					"data": {
						"id": "RPiZero-109"
					},
					"position": {
						"x": 285,
						"y": 390
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "container"
				}, {
					"data": {
						"id": "NodeRED-109",
						"parent": "RPiZero-109"
					},
					"position": {
						"x": 285,
						"y": 390
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "node_red"
				}, {
					"data": {
						"id": "NodeRED-flow-109",
						"parent": "NodeRED-109"
					},
					"position": {
						"x": 285,
						"y": 390
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": ""
				}, {
					"data": {
						"id": "RPiZero-110"
					},
					"position": {
						"x": 385,
						"y": 390
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "container"
				}, {
					"data": {
						"id": "NodeRED-110",
						"parent": "RPiZero-110"
					},
					"position": {
						"x": 385,
						"y": 390
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "node_red"
				}, {
					"data": {
						"id": "NodeRED-flow-110",
						"parent": "NodeRED-110"
					},
					"position": {
						"x": 385,
						"y": 390
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": ""
				}, {
					"data": {
						"id": "RPiZero-111"
					},
					"position": {
						"x": 485,
						"y": 390
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "container"
				}, {
					"data": {
						"id": "NodeRED-111",
						"parent": "RPiZero-111"
					},
					"position": {
						"x": 485,
						"y": 390
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "node_red"
				}, {
					"data": {
						"id": "NodeRED-flow-111",
						"parent": "NodeRED-111"
					},
					"position": {
						"x": 485,
						"y": 390
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": ""
				}, {
					"data": {
						"id": "RPiZero-112"
					},
					"position": {
						"x": 585,
						"y": 390
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "container"
				}, {
					"data": {
						"id": "NodeRED-112",
						"parent": "RPiZero-112"
					},
					"position": {
						"x": 585,
						"y": 390
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "node_red"
				}, {
					"data": {
						"id": "NodeRED-flow-112",
						"parent": "NodeRED-112"
					},
					"position": {
						"x": 585,
						"y": 390
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": ""
				}, {
					"data": {
						"id": "RPiZero-113"
					},
					"position": {
						"x": 285,
						"y": 490
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "container"
				}, {
					"data": {
						"id": "NodeRED-113",
						"parent": "RPiZero-113"
					},
					"position": {
						"x": 285,
						"y": 490
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "node_red"
				}, {
					"data": {
						"id": "NodeRED-flow-113",
						"parent": "NodeRED-113"
					},
					"position": {
						"x": 285,
						"y": 490
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": ""
				}, {
					"data": {
						"id": "RPiZero-114"
					},
					"position": {
						"x": 385,
						"y": 490
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "container"
				}, {
					"data": {
						"id": "NodeRED-114",
						"parent": "RPiZero-114"
					},
					"position": {
						"x": 385,
						"y": 490
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "node_red"
				}, {
					"data": {
						"id": "NodeRED-flow-114",
						"parent": "NodeRED-114"
					},
					"position": {
						"x": 385,
						"y": 490
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": ""
				}, {
					"data": {
						"id": "RPiZero-115"
					},
					"position": {
						"x": 485,
						"y": 490
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "container"
				}, {
					"data": {
						"id": "NodeRED-115",
						"parent": "RPiZero-115"
					},
					"position": {
						"x": 485,
						"y": 490
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "node_red"
				}, {
					"data": {
						"id": "NodeRED-flow-115",
						"parent": "NodeRED-115"
					},
					"position": {
						"x": 485,
						"y": 490
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": ""
				}, {
					"data": {
						"id": "RPiZero-116"
					},
					"position": {
						"x": 585,
						"y": 490
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "container"
				}, {
					"data": {
						"id": "NodeRED-116",
						"parent": "RPiZero-116"
					},
					"position": {
						"x": 585,
						"y": 490
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "node_red"
				}, {
					"data": {
						"id": "NodeRED-flow-116",
						"parent": "NodeRED-116"
					},
					"position": {
						"x": 585,
						"y": 490
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": ""
				}, {
					"data": {
						"id": "Docker-Application"
					},
					"position": {
						"x": 332.9695807744597,
						"y": 586.6990367248031
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "container"
				}, {
					"data": {
						"id": "NodeRED-Application",
						"parent": "Docker-Application"
					},
					"position": {
						"x": 332.9695807744597,
						"y": 586.6990367248031
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": "node_red"
				}, {
					"data": {
						"id": "NodeRED-flow-Application",
						"parent": "NodeRED-Application"
					},
					"position": {
						"x": 332.9695807744597,
						"y": 586.6990367248031
					},
					"group": "nodes",
					"removed": false,
					"selected": false,
					"selectable": true,
					"locked": false,
					"grabbable": true,
					"classes": ""
				}
			]
		},
		"style": [{
				"selector": "node",
				"style": {
					"label": "data(id)",
					"background-fit": "contain",
					"background-image-opacity": "0.3",
					"text-valign": "center",
					"text-halign": "center",
					"font-size": "4px",
					"font-weight": "bold"
				}
			}, {
				"selector": "node.container",
				"style": {
					"padding": "10px",
					"text-valign": "top",
					"text-halign": "center",
					"background-color": "#DDD",
					"font-size": "8px",
					"font-weight": "normal",
					"shape": "rectangle",
					"background-image": "./img/docker-official.svg"
				}
			}, {
				"selector": "edge",
				"style": {
					"curve-style": "bezier",
					"target-arrow-shape": "triangle"
				}
			}, {
				"selector": "edge.control",
				"style": {
					"curve-style": "bezier",
					"target-arrow-shape": "circle"
				}
			}, {
				"selector": ":selected",
				"style": {
					"background-color": "black",
					"line-color": "black",
					"target-arrow-color": "black",
					"source-arrow-color": "black"
				}
			}, {
				"selector": "node.questionable",
				"style": {
					"border-color": "#A33",
					"background-color": "#B55",
					"shape": "roundrectangle"
				}
			}, {
				"selector": "node.node_red",
				"style": {
					"background-image": "./img/node-red-256.png"
				}
			}, {
				"selector": "node.ansible",
				"style": {
					"background-image": "./img/ansible.png"
				}
			}, {
				"selector": "node.orion",
				"style": {
					"background-color": "#ADD8E6",
					"background-image": "./img/fiware_logo.png"
				}
			}, {
				"selector": "node.thingml",
				"style": {
					"background-color": "#ADD8E6",
					"background-image": "./img/thingml_short.png"
				}
			}, {
				"selector": "node.device",
				"style": {
					"padding": "10px",
					"text-valign": "top",
					"text-halign": "center",
					"background-color": "#DDD",
					"font-size": "8px",
					"font-weight": "normal",
					"shape": "rectangle",
					"background-image": "./img/device.png"
				}
			}, {
				"selector": "node.vm",
				"style": {
					"padding": "10px",
					"text-valign": "top",
					"text-halign": "center",
					"background-color": "#DDD",
					"font-size": "8px",
					"font-weight": "normal",
					"shape": "rectangle",
					"background-image": "./img/server_cloud.png"
				}
			}
		],
		"zoomingEnabled": true,
		"userZoomingEnabled": true,
		"zoom": 1.2926608442972627,
		"minZoom": 0.4,
		"maxZoom": 6,
		"panningEnabled": true,
		"userPanningEnabled": true,
		"pan": {
			"x": 106.01165603329498,
			"y": -117.08368665351048
		},
		"boxSelectionEnabled": false,
		"renderer": {
			"name": "canvas"
		}
	}
}
